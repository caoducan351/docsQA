NGUY
ỄN ĐỨ
C NGH
ĨA
 
- NGUY
Ễ
N TÔ THÀNH

----------

GIÁO TRÌNH

TOÁN R
Ờ
I R
Ạ
C

NXB
 
ĐẠ
I H
Ọ
C QU
Ố
C GIA HÀ N
Ộ
I -2009

Lời nói đầu

Toán rời rạc là m ột lĩnh vực của toán học nghiên cứu các đối tượng rời rạc. Chúng
ta sẽ sử dụng công cụ của toán rời rạc khi phải đếm các đối tượng, khi nghiên cứu quan
hệ giữa các tập rời rạc, khi phân tích các quá trình hữu hạn. M ột trong những nguyên
nhân chủ yếu làm nâng tầm quan trọng của toán rời rạc là việc cất giữ và xử lý thông tin
trên m áy tính bản chất là các quá trình rời rạc. Cuốn sách này nhầm giới thiệu các kiến
thức cơ bản trong ba lĩnh vực có nhiều ứng dụng của toán rời rạc là: lý thuyết tổ hợp, lý
thuyết đồ thị và hàm đại số logic. Nội dung cuốn sách được trình bày thành ba phần.

Phần I trình bày các vấn đề của lý thuyết tổ hợp xoay quanh 4 bài toán cơ bản: Bài
toán đếm , Bài toán tồn tại, Bài toán liệt kê và Bài toán tối ưu tổ hợp. Nội dung của phần

1 không những giúp nâng cao tư duy toán, mà còn làm quen với tư duy thuật toán trong
việc giải qu y ết các vấn đề thực tế, đổng thời cũng rèn luyện kỹ thuật lập trình giải các
bài toán tổ hợp.

Phần II đề cập đến lý thuyết đổ thị - một cấu trúc rời rạc tìm được những ứng dụng
rộng rãi trong nhiều
 
lĩnh vực của khoa học kỹ thuật và đời sống. Trong phần này sau
phần giới thiệu các khái niệm cơ bủn,
 
các bài toán ứng dụng quan trọng của lý thuyết
đồ thị như Bài toán cây khung nhỏ nhất, Bài toán đưòìig đi ngán nhất, Bài toán luồng
cực đại trong m ạng... và những thuật toán để giải quyết chúng đã được trình bày chi tiết
cùng với việc phân tích và hướng dẫn cài đặt chươiig trình trên m áy tính.

Phần III liên quan đến lý thuyết hàm đại số logic là cơ sở để nắm bắt những vấn để
phức tạp của kỹ thuật m áy tính. Sau phần trình bày các khái niệm cơ bản, phần này đi
sâu vào vấn đề tối thiểu hoá các hàm đại số lôgic và m ô tả m ột số thuật toán quan trọng
để giải quyết vấn đề đặt ra như thuật toán Q uine - M cCluskey, Black - Poreski.

Các vấn đề được trình bày trong cuốn sách đều được m inh hoạ trên nhiều thí dụ, các
thuật toán được m ô tả trên ngôn ngữ PASCAL m ô phỏng thuận tiện cho việc cài đặt các
chương trình thực hiện thuật toán trên máy tính, trong đó nhiều thuật toán chọn lọc đã
được cài đặt trên ngôn ngữ PASCAL.

Mục lục
■
 
■

P h ầ n
 
ỉ. L ý t h u y ế t T ổ
 
h ợ p

T ra n g

1

Mở đầu
 
3

1.1 Sơ lược về tổ hợp
 
3

1.2 N hắc lại lý thuyết tập hợp
 
5

1.3 M ột số nguyên lý cơ bản
 
8

1.4 Các cấu hình tổ hợp đơn giản
 
11

Bài toán đếm
 
17

2.1 Giới thiệu bài toán
 
17

2.2 N guyên lý bù trừ
 
19

2.3 Quy về các bài toán đơn giản
 
22

2.4 Công thức truy hồi
 
24

2.5 Phương pháp hàm sinh
 
31

2.6 Liệt kê
 
40

Bài toán tồn tại
 
47

3.1 Giới thiệu bài toán
 
47

3.2 Phương pháp phản chứng
 
51

3.3
 
N guyên
 
lý Dirichlet
 
52

3.4 Hệ đại diện phân biệt
 
56

3.5. Đ ịnh lý Ram sey
 
59

Bài toán liệt kê
 
69

4.1 Giới thiệu bài toán
 
69

4.2 Thuật toán và độ phức tạp tính toán
 
70

4.3 Phương pháp sinh
 
85

4.4 Thuật toán quay lui
 
92

Bài toán tối ưu
 
107

5.1 Phát biểu bài toán
 
107

ỈV

5.2 C ác thuật toán duyệt
 
111

5.3 T huật toán nhánh cận giải bài toán tiíĩười
 
du lịch
 
124

5.4 Bài toán lập lịch gia công trên hai máy
 
135

Phần 2. Lý thuyết đồ thị
 
145

1. C.ic khái íiiệni t ơ bản của lý th i vèt đổ thị
 
147

1.1 Đ ịnh nghĩa đồ thị
 
147

1.2 C ác thuật ngữ cơ bản
 
150

1.3 Đ ường đi, Chu trình, Đổ thị liên thông
 
152

1.4 M ột sô' dạng đồ thị đặc biệt
 
155

Chương 2. Biểu diễn đồ thị trên m áy tính
 
165

2.1 M a trận kề. M a trận trọng số
 
165

2.2 M a trận liên thuộc đỉnh-cạnh
 
168

2.3 D anh sách cạnh
 
169

2.4 D anh sách kể
 
169

Chưưng 3. C ác thuật toán tìm kiếm trên đồ thị và ứng dụng
 
175

3.1 Tim kiếm theo chiều sâu trên đồ thị
 
176

3.2 Tim kiếm theo chiều rộng trên đồ thị
 
177

3.3 Tim đường đi và kiểm tra tính liên ihông
 
179

Chương 4. Đ ồ thị E uler và đồ thị H am ilton
 
187

4.1 Đ ồ thị E uler
 
187

4.2 Đ ồ thị H am ilton
 
191

Chương 5. C ây và cây k h un g của đồ thị
 
197

5.1 Cây và các tính chất của cây
 
197

5.2 Cây khung của đồ thị
 
199

5.3 X ây dựng tập các chu trình cơ bản của đồ thị
 
201

5.4 Bài toán cây khung nhỏ nhất
 
203

Chương 6. Bài toán đường đi ngán nhất
 
219

6 .1 Các khái niệm m ở đầu
 
220

6.2 Đ ường đi ngắn nhất xuất phát từ m ột đỉnh
 
222

6.3 T huật toán D ijkstra
 
224

6.4 Đ ường đi trong đổ thị không có chu trình
 
227

6.5 Đ ường đi ngắn nhất giữa tất cả các cập đỉnh
 
231

Chương 7. Bài toán luồng cực đại trong m ạng
 
239

7.1 M ạng, luồng trong m ạng và bài toán luồng
 
cực đại
 
239

7.2 Lát cắt.Đưòfng tăng luồng. Định lý Ford-Fulkerson
 
241

7.3 Thuật toán tìm luồng cực đại trong m ạng
 
244

7.4 M ột số bài toán luồng tổng quát
 
249

7.5 M ột sô' ứng dụng trong tổ hợp
 
252

Phần 3. Hàm đại số lôgỉc
 
261

Chương 1. M ở đầu
 
263

1.1 M ô hình xử lý thông tin và hàm đại số lôgic
 
263

1.2 Các hàm đại số lôgic sơ cấp
 
265

1.3 Biểu diễn các hàm đại số lôgic qua hệ tuyển, hội, phủ định
 
266

1.4 Biểu diễn tối thiểu của hàm đại số lôgic
 
269

Chương 2. D ạng tuyển chuẩn tắc của hàm đại sò lògic
 
271

2.1 Các khái niệm cơ bản
 
271

2.2 D ạng tuyển chuẩn tắc thu gọn
 
273

2.3 Dạng tuyển chuẩn tắc nghẽn và dạng tuyển chuẩn tắc tối thiểu

Chương 3. T huật toán tìm dạng tuyển chuẩn tác tối thiểu
 
277

3.1 Chú ý m ở đẩu
 
277

3.2 Tim dạng tuyển chuẩn tắc thu gọn
 
278

3.3 Tim dạng tuyển chuẩn tắc tối thiểu
 
282

3.4 Sơ đồ tối thiểu
 
285

Tài liệu tham khảo
 
289

VI

PHẦNI

L Ý T H U Y Ê Y
 
t ổ
 
h ợ p
■

CỉiươtiỊ^ ỉ . M ở d á ỉỉ

1

M ỏ ĐẦU

1.1. Sơ lược về tổ hợp

Tổ hợp như là một lĩnh vực của toán học rời rạc, xuất hiện vào đầu th ế kỷ 17. Trong một
thời gian dài, dường như tổ hợp nằm ngoài guồng máy phát triển của toán học cũng như
ứng dụng của nó. Tinh th ế bắt đẩu đổi khác khi xuất hiện các m áy tính và cùng với nó
là sự phát triển của toán hữu hạn. Hiện nay lý thuyếl tổ hợp được áp dụng trong nhiều
lĩnh vực khác nhau: lý thuyết số, hình học hữu hạn. biểu diễn nhóm , đại sô' không giao
hoán, quá trình ngẫu nhiên, thống kê xác suất, quy hoạch thực n g h iệ m ,...

1.1.1. Các bài toán tổng quát

Tổ hợp
 
đụng chạm đến nhiều vấn đề khác nhau của toán học, do đó khó có thể định
nghĩa nó một cách hình thức. Nói chung, lý thuyết tổ hợp gắn liền với việ^ nghiên cứu
phân bố các phần tử vào các tập hợp. Thông thường, các phần tử này là hữu hạn và việc
phân bố chúng phải thoả mãn những điều kiện nhất định nào đấy, tuỳ theo yêu cầu của
bài toán cần nghiên cứu. Mỗi cách phân bố như thế được gọi là m ột
 
cấu hình tổ hợp.

Trong các tài liệu về tổ hợp, thường gặp các dạng bài toán dưới đây:

a)
 
Bài toán đếm:
 
đây là các bài toán nhằm trả lời câu hỏi "có bao nhiêu cấu hình
thoả m ãn điểu kiện đã nêu ?". Phương pháp đếm thường dựa vào m ột số nguyên lý cơ
bản
 
và m ột số kết quả đếm các cấu hình đơn giản. Bài toán đếm
 
được áp dụng một

Phân J . Lv tlntvêr tổ hợp

cách có hiệu quả vào những công việc m ang tính chất đánh giá như tính xác suất của
một sự kiện, tính độ phức tạp của m ột thuật to á n ,...

h) Bải toán liệt kê:
 
bài toán này quan tâm đến tất cả cấu hình có thể có được, vì thế
lời giải của nó cần được biểu diễn dưới dạng thuật toán
 
"vét cạn" tất cả các cấu hình.
Lời giải trong từng trường hợp cụ thể sẽ được m áy tính điện tử giải quyết theo thuật
toán đã nèu. Bài toán liệt kê được làm "nền" cho nhiều bài toán khác. H iện nay, m ột sô'
bài toán đếm , tối ưu, tồn tại vẫn chưa có cách nào giải, ngoài cách giải liệt kê. Nếu
trước đây, cách giải liệt kê còn m ang nạng tính ]ý thuyết, thì bây giờ nó ngày càng khả
thi nhờ sự phát triển nhanh chóng của m áy tính điện tử.

C) Bài toán tôi ưu:
 
khác với bài bài toán liệt kê, bài toán lối ưu chỉ quan tâm đến
m ột cấu hình "tốt nhất" theo m ột nghĩa
 
nào đấy. Đ ây là bài toán có nhiều ứng dụng
irong thực tién và lý thuyết tổ hợp đã đóng góp m ột phần đáng kể trong việc xây dựng
được những thuật toán hữu hiệu.

d)
 
Bài toán tồn tại:
 
nếu như trong các bài toán trên, việc tồn tại các cấu hình là hiển
nhiên thì trong bài toán này, vấn đề "có hay không có" cấu hình còn là điều nghi vấn.
Các bài toán loại này thường bị kẹt trong tình huống nan giải: không chỉ ra được cấu
hình nào nhưng cũng không khẳng định được là chúng không tồn tại. Lịch sử toán học
thường để lại những bài toán khó trong lĩnh vực này và việc cố gắng giải quyết chúng
đã thúc đẩy không ít sự phát triển của nhiều ngành toán học.

1.1.2.
 
Vài nét về lịch sử

Có thể nói tư duy về tổ hợp ra đời từ rất sớm. Vào thời nhà Chu, người ta đã biết đến các
hình
 
vẽ có
 
liên quan
 
đến
 
những hình
 
vuông
 
thần
 
bí. Thời
 
cổ
 
Hy
 
lạp, nhà triết học
K xenokrat, sống ở th ế kỷ thứ 4 trước công nguyên, đã biết cách
 
tính số các từ khác
nhau, lập từ m ột bảng chữ cái cho trước. N hà toán học Pitagor và các học trò của ông đã
tìm ra được nhiều con số có các tính chất đặc biệt, chẳng hạn số 36 không những
 
là
tổng của 4 số chẩn và 4 sô' ỉẻ đầu tiên m à còn là tổng lập phương của 3 sô' tự nhiên đầu
tiên. M ột định lý nổi tiếng của trường phái này là định lý về độ dài các cạnh của một
tam giác vuông, và từ đó họ đã tìm ra các số m à bình phương của m ột số này bằng tổng
bình phương của hai số khác. V iệc tìm
 
ra được các số như vậy, đòi hỏi phải có m ột
nghệ thuật tổ hợp nhất định. Tuy nhiên, có thể nói rằng, lý thuyết tổ hợp được hình
thành như m ột ngành toán học mới, vào quãng thế kỷ
 
17 bằng một loạt các công trình
nghiên cứu nghiêm
 
túc
 
của các nhà toán
 
học
 
xuất sắc như Pascal, Ferm at, Leibnitz,
Euler, ... M ặc dù vậy, trong suốt hai th ế kỷ rưỡi, vai trò quan trọng
 
trong việc nghiên
cứu thế giới tự nhiên vẫn thuộc về các ngành toán học cổ điển như toán giải tích, các
phép tính vi tích phân, phương trình vi phân, phương trình toán lý...

Chươỉỉí^ ỉ . Mở (kỉIt

Trong thời gian hiện nay, mối tương quan giữa loan học hữu hạn và toán học cổ
điển đã có nhiều thay đổi, đặc biệt từ khi máv tính điện tử ra đời và phát triển. N hiều
bài toán nổi tiếng đã được giải trên máy tính bàng nhữrm thuật toán của toán hữu hạn.
Các lĩnh vực trừu tượng của toán học như đại số logic, ngôn ngữ hình thức, ... đã trở
thành khoa học ứng dụng để xây dựng các ngôn ngữ lập trình cho m áy tính. Trong thời
đại phát triển
 
của toán học hữu hạn, vai trò của lý thuyết lổ hợp cũng khác xưa. Từ lĩnh
vực nghiên cứu các trò chơi tiêu khiển, hay phân lích giải mã các bức thư cổ, tổ hợp đã
chuyển sang lĩnh vực toán ứng dụng với sư phát triển mạnh mẽ.

1.2. Nhắc lại lý thuyết tập hợp

1.2.1.
 
Các khái niệm và ký hiệu

Trong giáo trình này, tập hợp được ký hiệu bàng những chữ cái lớn
 
A, B
 
.....
X, Y, ...
 
còn

những phần tử được ký hiệu bằng các chữ cái nhỏ
 
a,
 
b
 
.......
 
X,
 
Để chỉ .r là phần tử của

X,
 
ta viết .V G
 
X,
 
trái lại ta viết ,v Ể
 
X.
 
Nếu mỗi phần tử của
 
A
 
cũng là những phần tử của

B
 
thì ta nói
 
A
 
là tập con của
 
B
 
và viết
 
A
 
q
 
B.
 
Nếu
 
B
 
Ỳd B
 
q
 
A
 
thì
 
A và s
 
là hai tập
hợp bằng nhau và viết
 
A = B.

Số các phần tử của tập hợp
 
A
 
sẽ được ký hiệu là
 
N{A)
 
hoặc
 
A
 
I . M ột tập gồm
 
n

phần tử được gọi là một /ỉ-tập. Các tập hợp có thế xem như là những tập con của m ột tập
hợp vũ trụ
 
X.
 
Tập rỗng là tập hợp không có phần tử nào, nó được xem như tập con của
mọi tập hợp.

1.2.2.
 
Các phép toán tập hợp

Các phép toán cho trên tập hợp là:

•
 
Phần bù của
 
A
 
trong
 
X,
 
ký hiệu
 
A
 
,
 
là tập các phần tử của X không thuộc vào /4:

A = { X e X:
 
X Ể A }.

•
 
Hợp của v4 và
 
ký hiệu
 
A \ j B ,
 
là tập các phần tử hoặc thuộc vào /4 hoặc thuộc
vào
 
B
 
hoặc thuộc vào cả hai tập
 
A
 
và
 
B:

A u B
 
= ị x:
 
X e A
 
hoặc,v e
 
}.

•
 
G iao của
 
A
 
và
 
B,
 
ký hiệu
 
A n B ,
 
là tập các phần tử đổng thời thuộc vào cả hai
tập
 
A
 
và
 
B:

A n B
 
= { x:
 
X e A
 
vàA' 6
 
I.

•
 
H iệu của tập
 
A
 
và
 
B,
 
ký hiệu là /4 \ s (hoặc
 
A - B):

A \ B =
 
ị .x:
 
X 6 /l
 
và,v Ể ổ
 
I.

Phđn I. Lý thuyết tổ hợp

Các tập hợp, cùng với các phép toán trên nó, lập nên một đại số, gọi là
 
đại sô' tập

hỢỊì.
 
Dưới đây là m ột vài tính chất của các phép toán tập hợp:

•
 
kết hợp

( À u B ) u C =
 
A u ( B u C )

( À n B ) n C =
 
À n ( B n C )

•
 
giao hoán

A<
j
 
B
 
= B u A

A n B
 
= B r \ A

•
 
phân bố

/ í u f i 5 n C ) = ( / í u 5 ì n ( / l u C )

A n { B v ) C ) ^ { A n B ) ^ j { A n C )

•
 
(đối ngẫu)

A'-
j
 
B =
 
A n B

A n B
 
A \
 
j
 
B

1.2.3. C ác tính chất cho trên tập hợp

M ỗi tập con của m ột tập hợp được tương ứng với tính chất (còn được gọi là
 
mệnh đề)

xác định nó trên tập hợp đã cho. Với tương ứng này, các phép toán tập hợp được chuyển
sang các phép toán m ệnh đề:

•
 
phủ định
 
A,
 
ký hiệu
 
A
 
(hay
 
N O T A )
 
tương ứng với phần bù
 
A

•
 
tuyển củ a
 
A
 
và
 
B,
 
ký hiệu
 
A v
 
B
 
(hay
 
A or B)
 
tương ứng với
 
A ^ B

•
 
hội của A và ß , ký hiệu
 
A & B
 
(hay
 
A a n d B)
 
tương ứng với
 
A n B

Các m ệnh đề, cùng với các phép toán trên nó, lập nên m ột đại số, gọi là
 
đại sô' mệnh dê

(còn gọi là
 
đại sô' lôgic).
 
N hư thế, đại số m ệnh đề và đại số tập hợp
 
là hai
 
đại sô'đẳng

cấu
 
với nhau. T uỳ tình huống, một bài toán có thể phát biểu bằng ngôn ngữ của đại sô'
tập hợp
 
hoặc bằng ngôn ngữ của đại số m ệnh đề.

1.2.4. T ích Đ êcac của các tập hợp

N goài các phép toán của đại số tập hợp, người ta còn định nghĩa m ột phép toán cho
phép ghép hai tập hợp để được m ột tập hợp mới, đó là tích Đêcac

A X B
 
=
 
{(a, b)
 
\ a e A, b G B}.

Tích Đ ècac được m ở rộng tự nhiên cho trường hợp nhiều tập hợp:

X /I
2
 
X ...
 
x A ^
 
=
 
{(ữ|,
 
.....
a¡)
 
I
 
a, e
 
Aị,
 
i
 
= 1 ,2 ,...,
 
k].

Người ta cũng dùng ký hiệu luỹ thừa để biểu diễn tích Đ êcac của cùng một tập hợp;

/4* =
 
/ 4 x / l x . . . Xy4
 
fẨ:lầnj.

Chương I . Mờ dâu

T h í dụ:

R
 
biểu diễn các điểm trên đường thẳng,
biểu diễn các điểm trên mặt phảng,
biểu diễn các điểm trong không gian.

1,2.5. Q uan hệ tương đương và phân hoạch

Trong nhiéu vấn đê, người la cần (Ịuan tâm đến mộl quan hệ nào đó giưa hai phần tử của
tập hợp đang xét. Một quan hệ hai ngôi
 
R
 
trên tập hữu hạn phẩn tử A"được định nghĩa
như là tập con
 
R{X)
 
của tích Đề các
 
XxX.
 
Người ta quan tâm đến các tính chất sau đây
của một quan hệ trên tập
 
X:

•
 
đối xứng
 
(ứ có quan hệ với
 
h
 
kéo theo
 
b
 
có quan hệ với íĩ),

•
 
phản xạ (m ọi phần tử có quan hệ với chính nó),

•
 
truyền ứng (nếu
 
a
 
có quan hệ với
 
h
 
và
 
b
 
có quan hệ với c thì
 
a
 
có quan hệ với

c).

T h í d ụ : X ét
 
x =
 
{1, 2, 3, 4 Ị. Ta xác định mối quan hệ
 
p
 
giữa các phần tử
 
của
 
X
 
như
sau: Giả sử Í7,
 
e Ầ, ta nói
 
a
 
có quan hệ (yơ) đối với
 
b
 
nếu
 
a
 
chia hết cho
 
b.
 
K hi đó

(3, 1),(4, 1), (4 ,2 )Ị c X x X

Dễ thấy
 
p
 
có tính chất phản xạ (vì rõ ràng là
 
a
 
chia hết cho í/), truyền ứng (vì
 
Ü
 
chia hết
cho
 
và í» chia hết cho
 
c
 
kéo theo
 
a
 
chia hết cho c), nhưng không có tính chất phản xạ
(vì
 
a
 
chia hết cho
 
b
 
không nhất thiết kéo theo
 
h
 
chia hết cho
 
a).

Có nhiều kiểu quan hệ, nhirng quan hệ được quan tâm nhiều nhất là
 
quan hệ tươĩĩg

đương.
 
M ột quan hệ được gọi là tương đương nếu nó thoả mãn cả 3 tính chất: đối xứng,
phản xạ và truyền ứng. M ột quan hệ lương đương trên tập hợp đang xét sẽ chia tập hợp

đ ó
 
th à n h
 
c á c
 
lớ p
 
( g ọ i
 
là c á c
 
ÌỚỊy t ư ơ n ^
 
đ ư ơ n ịO
 
s a o
 
c h o
 
h a i p h ầ n
 
tử t h u ộ c
 
c ù n g
 
m ộ t
 
lớ p

là có quan hệ với nhau và hai phần tử khác lớp là không có quan hệ với nhau. Các lớp
tương đương có tính chất phủ kín tập hợp đã cho (tức là một phần tử bất kỳ phải thuộc
vào m ột lớp nào đó) và rời nhau (từng cặp giao với nhau bằng rỗng). Người ta gọi m ột
họ các tập con khác rỗng của một tập hợp có tính chất vừa nêu là m ột
 
phâ n hoạch
 
của
tập hợp đó. Từ đấy suy ra m ột quan hệ tương đương trên một tập hợp sẽ xác định m ột
phân hoạch
 
trên tập đó và ngược
 
lại, m ột phân hoạch
 
bất kỳ trên
 
tập hợp đã cho
 
sẽ
tương ứng với m ột quan hệ tương đương trên nó.

T h í d ụ : G iả sử xét tập
 
m { m >
 
1) sô' nguyên dương
 
N„,=
 
{ 1 ,2 ,
 
m \ .
 
G iả sử
 
k
 
là số

nguyên dương,
 
k
 
<
 
m.
 
Ta nói hai số nguyên dương
 
a , h
 
Ç
: N,„
 
là có quan hệ với nhau và
ký hiệu là
 
a <r^h
 
nếu như ứ và ủ có cùng sô' dư khi chia cho
 
k
 
(ký hiệu
 
\ầ.a = b
 
(m od
 
k)).

N hư vậy,

Phần ỉ. Lý thuyết tổhỢỊ)

a
 
<->/?
 
o
 
a = b
 
(m od
 
k),

Dễ dàng kiểm tra được rằng m ối quan hệ
 
vừa xác định trên tập
 
là m ối quan hệ
tương đương. Gọi

/l, = |£/ e
 
N„;. a = i
 
(m od /:)},
 
i
 
= 0, 1
 
,
 
Ẩ:-l.

Khi đó dễ dàng kiểm ira được rằng

A ¡ n A j = 0 , i i ^ j
 
và
 
7V
„, = Ị J / I , .

/=
()

Đ iều
 
đó
 
có
 
nghĩa là các
 
tập
 
Nị-ị, N ị
 
.......
 
tạo thành
 
m ột phân
 
hoạch
 
của tập

Trườna hợp riêng khi
 
k=2.
 
tập /V,,. được phân hoach thành hai tập: tập các số chẵn (/V,ịÌ
và tập các số lẻ (A^i).

1.3. Một số nguyên lý cơ bản

1.3.1. N guyên lý cộng

N ếu A và B là hai tập hợp rời nhau thì

N(A
 
u
 
ß )
 
=
 
N{A) + N{B).

N guyên lý cộng được mở rộng cho nhiều tập con rời nhau:

N ếu
 
|/4|, Aj,
 
là m ộí phán hoạch của tập lì(/Ị7 X
 
thì

N{X)
 
=
 
N{Aị)
 
+
 
NiA^) + ... + N{A^).

M ột trường hợp riêng hay dùng của nguyên lý cộng:

N ếu A
 
là m ột tính chất cho trên tập X
 
thì
 
N( A)
 
=
 
N(X) - N ( A ) .

Thí dụ 1.
 
M ột đoàn vận động viên gồm 2 m ôn bắn súng và bơi được cử đi thi đấu ở
nước ngoài. N am có
 
10 người. Số vận động viên thi bắn súng (kể cả nam và nữ) là 14.
Số nữ vận động viên thi bơi bằng số nam vận động viên thi bắn súng. Hỏi toàn đoàn có
bao nhiêu người?

Giải:
 
Chia đoàn thành 2 lớp; nam và nữ. Lớp nữ lại được chia 2: thi bắn súng và thi bơi.
ITiay số nữ thi bơi bằng số nam thi bắn súng (2 số này bằng nhau theo đầu bài), ta được
số nữ bằng tổng số đấu thủ thi bắn súng. Từ đó, theo nguyên lý cộng, toàn đoàn có 10 +
14 = 24 người.

Chương í . Mở đầu

T hí dụ 2,
 
Trong m ột đợt phổ biến đề tài tốt nghiệp, Ban chủ nhiệm K hoa công bố danh
sách các đề tài bao gồm 80 đề tài về chủ để "xây dựng hệ thông tin quản lý",
 
10 đề tài
vé chủ đề "ihiết k ế phần m ềm dạy học" và
 
10 đề tài về chủ đề "Hệ chuyên gia". Hỏi
m ột sinh viên có bao nhiêu khả năng lựa chọn đề tài?

Giải:
 
Sinh viên có thể lựa chọn đề tài theo chủ đề thứ nhất bởi 80 cách, theo chủ đề thứ
hai bởi 10 cách, theo chủ đề thứ ba bởi 10 cách. Vậy tất cả có 100 cách lựa chọn.

Thí dụ
 
3. Hòi rằng giá trị của k sẽ là bao nhiêu sau khi đoạn chưcfng trình PASCAL sau
đuợc thực hiện?

n l:= 1 0 ;

n2:=20;

n3:=30;

k:= 0 ;

fo r
 
il:=
 
1
 
to
 
n l
 
do
 
k := k + l;

fo r
 
i2:= 1
 
to
 
n2
 
do
 
k := k + l;

fo r
 
i3:= 1
 
to
 
n3
 
do
 
k := k + l;

G iải: Đ ầu tiên giá trị của k được gán bằng 0. Có 3 vòng lặp for độc lập. Sau mỗi lần lặp
của m ỗi m ột trong 3 vòng for, giá trị của k tăng lên
 
1. V òng for thứ nhất lập 10 lần,
vòng for thứ hai lặp 20 lần, vòng for thứ ba lập 30 lần. Vậy, kết thúc 3 vòng lập for giá
tri của k sẽ là 10+20+30= 60.

1.3.2. N guyên lý nhân

N ếu mỗi thành phấ n
 
ứ,
 
của bộ có thứ tự k thành phẩn (Oị,
 
«2..... «k) cổ rt,
 
khả năng chọn

(/ = 1, 2 ,
 
k), thì s ố bộ s è được tạo ra là tích s ố của các khá năng này
 
ni>Ĩ
2
 
... rit.

M ột hệ quả trực tiếp của nguyên lý nhân:

yV(A, X A
2
 
X ... X
 
A,)
 
=
 
N(A,) N { A ^ ) ... N(At).

với
 
A2, / i *
 
là những tập hợp nào đó, nói riêng;

N{A^)
 
=
 
N { A ý .

T h í d ụ 1. T ừ H à nội đến H uế có 3 cách đi: máy bay, ô tô, tàu hoả. Từ Huê' đến Sài gòn
có 4 cách đi: m áy bay, ô tô, tàu hoả, tàu thuỷ. Hỏi từ Hà nội đến Sài gòn (qua H uế) có
bao nhiêu cách đi?

G iải:
 
M ỗi cách đi từ H à nội đến Sài gòn (qua Huế) được xem gồm 2 chặng; H à nội -
H uế và H u ế - Sài gòn. Từ đó, theo nguyên lý nhân, sô' cách đi từ H à nội đến Sài gòn là
3 x 4 = 1 2
 
cách.

Phần 1. Lý thuyết tổ hợp

T h í d ụ 2. Hỏi rằng giá trị của k sẽ là bao nhiêu sau khi đoạn chương trình PASCAL sau
được thực hiện?

n l ; = 10;

n 2 :=20 ;

n3:=30;

k:= 0 ;

for
 
il:=
 
1 to
 
nl
 
do

fo r
 
i2 := 1 to
 
n 2
 
do

for
 
i3:= 1
 
to
 
p3
 
do
 
k := k + l;

G iải:
 
Đ ầu tiên giá trị của k được gán bằng 0. Có 3 vòng lặp for
 
lồng nhau. Sau mỗi lần
lặp của vòng for, giá trị của k tăng lên 1. Vòng for thứ nhất lặp 10 lần, vòng for thứ hai
lặp 20 lần, vòng for thứ ba lặp 30 lần. Vậy, theo nguyên lý nhân, kết thúc 3 vòng lặp for
lồng nhau, giá trị của k sẽ là 10 X 20 X 30 = 6000.

T hí dụ
 
3. Có bao nhiêu tên biến trong PASCAL độ dài 10 chỉ chứa hai chữ cái A, B, bắt
đầu bởi A A A hoặc ABA?

G iả i:
 
Tập các tên biến cần đếm được phân hoạch thành hai tập: m ột tập gồm các biến
bắt đầu bởi A A A , còn tập kia gồm các tên biến bắt đầu bởi ABA. M ỗi tên biến độ dài 8
bắt đầu bởi A A A có thể xây dựng như sau: chọn ký tự thứ 4, thứ 5,
 
thứ 10. Mỗi một
trong 7 ký tự còn lại này có 2 khả năng chọn (hoặc chọn A, hoặc chọn B), nên theo
nguyên lý nhân có

2 x 2 x 2 x 2 x 2 x 2 x 2
 
= 2 ^ = 1 2 8

tên biến bắt đầu bởi AAA . L ập luận tương tự ta cũng đếm được 128 tên biến bắt đầu bởi
ABA. Vì vậy, theo nguyên lý cộng, có tất cả 128 +
 
128 = 256 tên biến độ dài
 
10 chỉ
chứa hai chữ A, B hoặc bắt đầu bởi AAA hoặc bắt đầu bởi ABA.

Trong việc giải các bài toán đếm cụ thể, nếu như đếm trực tiếp số cấu hình là khó,
ta có thể phân hoạch tập các cấu hình cần đếm ra thành các tập con sao cho việc đếm
các phần tử của các tập con này là đơn giản hơn. Khi đó sử dụng nguyên
 
lý cộng để
đếm số cấu hình đặt ra.

N ếu chúng ta cần đếm các cấu hình có thể xây dựng theo từng bước, thì khi đó có
thể sử dụng nguyên lý nhân.

Nói chung, điểu quan trọng khi giải m ột bài toán đếm là phải xác định được cần sử
dụng nguyên lý nào (tổng q u át hơn, là công cụ nào) để giải bài toán và điều đó đòi hỏi
tư duy của người giải.

10

Chươni> Ị . Màcỉấỉi

1.4. Các câu hình tổ hợp đơn giản

Dưới đây trình bày một số cấu hình tổ hợp đcm giản, những cấu hình này thường được
làm cơ sỏ' cho phép đếm.

1.4.1. C hỉnh họp lặp

Đ ịiih ngliĩa.
 
M ột chỉỉìh hỢỊ? lập chập k của
 
ìỉ pluín tử lù ỉ.ìột hộ có thứ
 
lự gồm k thàî'h

phần lấy ĩừ n p h ẩ n i ử đ ã cho. Các ỉlĩùnlì phần có í
 
h ể dược lặp lại

N hư thế, m ột chỉnh
 
hợp lặp chập
 
k
 
của
 
n
 
có thể xein như m ột phần
 
tử của tích
Đ êcac
 
với
 
A
 
là tập đã cho. Theo nguyên lý nhân, số tất cả các chỉnh hợp lặp chập
 
k

c ủ a
 
n
 
s ẽ là
 
n \

T h í d ụ 1.
 
Tính số hàm từ một
 
Ả'-iập vào một /7-tập,

G iải;
 
Biểu diễn m ỗi hàm bằng m ột bộ
 
k
 
thành phần, trong đó thành phần thứ
 
i
 
là ảnh
của phần tử / (1 < / <
 
k),
 
Mỗi thành phần được lấy từ một trong
 
n
 
giá trị. Từ đó nhận
được số cần tìm là

T h í d ụ 2.
 
Tính số dãy nhị phân độ dài
 
n.

G iải:
 
M ỗi dãy nhị phân độ dài
 
n
 
là một bộ gồm
 
n
 
thành phần, Irong đó m ỗi thành phần
chỉ nhận m ột trong hai giá trị (1 hoặc 0). Từ đó suy ra số các dãy nhị phân độ dài
 
n
 
là

2
".

T h í d ụ 3.
 
Tính số tập con của m ột
 
/7-tập.

G iải: G iả sử
 
n-iäp
 
đã cho là X = I .V,,
 
j. Biểu diễn mỗi tập con
 
A
 
của tập đã cho

X
 
bằng m ột dãy nhị phân độ dài
 
n:

h =
 
(ò„
 
bj,
 
h„)

trong đó
 
bị
 
=
 
1 nếu phần tử
 
X
,
 
& A
 
và
 
bị
 
= 0
 
trong trường hçfp ngược lại (/ =
 
1,
 
2,...,

n).
 
Từ đó nhận được sô' tập con là 2".

1.4.2. C h ỉn h hợ p k h ô n g lặp

Đ ịn h n g h ĩa .
 
M ộ t chỉnh hợp không lặp chập k của n phần tử là một bộ có th ứ tự gồm k

thành phầ n lấy từ n phần tử đ ã cho. Các thành phần klìônẹ được lặp lại.

11

Phẩn 1. Lý thuyết tổ hợp

Để xây dựng m ột chỉnh hợp không lặp, ta xây dựng dần từ thành
 
phần đầu tiên.
Thành phần này có
 
n
 
khả nâng chọn. M ỗi thành phần tiếp theo, sô' khả năng chọn
 
giảm
đi 1 so với thành phần đứng trước.Từ đó, theo nguyên lý nhân, số chỉnh hợp không lặp
chập
 
k
 
của
 
n
 
sẽ là /ỉ(/ì-l)...(« -/:+ 1). Đ ể tồn tại cấu hình, cần phải thoả m ãn
 
k < n.

T h í dụ.
 
Tính số đơn ánh từ m ột ¿-tập vào m ột /ỉ-tập.

G iải:
 
Biểu diễn mỗi đơn ánh bằng bộ ảnh của tập nguồn như trong thí dụ 1 mục trên.
Chú ý rằng các ảnh không được lặp lại, ta nhận được số cần tìm là
 
n(n-ì)...{tĩ-k+ì).

1.4.3. Hoán vị

Định nghĩa.
 
Ta gọi một hoán vị của n phần tử là một cách xếp thứ tự các phần lử đó.

M ột hoán
 
vị của
 
n
 
phần
 
tử được xem
 
như m ột trường hựp riêng
 
của chỉnh
 
hợp
không lặp khi
 
k = n . D o
 
đó số hoán vị của
 
n
 
phần tử là
 
1.2
 
n = n\

Có thể đồng nhất một hoán vị của
 
n
 
phần tử với m ột song ánh của m ột tập
 
n
 
phần
tử lên chính nó. M ột song ánh như vậy còn được gọi là m ột
 
phép thế.
 
Các phép th ế có
nhiéu tính chất thú vị và việc nghiên cứu nó đã đóng góp m ột phần quan trọng trong
toán học.

T h í d ụ
 
1. 6 người đứng xếp thành m ột hàng ngang để chụp ảnh. Hỏi có thể bô' trí bao
nhiêu kiểu?

G iải; M ỗi kiểu ảnh là m ột hoán vị của 6 người. Từ đó nhận được sô' kiểu ảnh có thể bố
tri là 6 ! = 720.

T h í d ụ
 
2. Cần bố trí việc thực hiện
 
n
 
chương trình trên m ột máy vi tính. Hỏi có bao
nhiêu cách?

G iải: Đ ánh số các chương trình bởi 1, 2,...,
 
n.
 
M ỗi cách b ố tri việc thực hiện các chương
trình trên m áy có thể biểu diễn bởi m ột hoán vị của 1, 2
 
,
 
n.
 
Từ đó suy ra số cách bố
trí cẩn tìm là
 
n
 
!

1.4.4. Tổ hợp

Đ ịnh nghĩa.
 
M ột tổ hợp chập k của n phẩn tử
 
là một bộ không k ể thứ tự gồm k thành

phẩn khác nhau lấy từ n phần tử đã cho. N ói cách khác, ta có th ể coi một tổ họp chập k

của n phần tử là một tập con k phần tử của nó.

12

Chương I . Mở đầu

V iệc đếm các tổ hợp có khó khãn hơn chút ít so với các cấu hình đã trình bày, tuy
nhiên cách đếm dưới đây cho biết cách vận dụng các nguyên lý cùng với các kết quả
đếm đã biết trong việc đếm một cấu hình mới.

X ét tập hợp tất cả các chỉnh hợp không lặp chập
 
k
 
của
 
n
 
phần tử. Chia chúng thành
những lớp sao cho hai chỉnh hợp
 
thuộc cùng m ột lớp chỉ khác nhau về thứ tự. Rõ ràng
các lớp này là m ột phân hoạch trên tập đang xét và mỗi lớp như th ế là tưcfng ứng với
m ột tổ hợp chập
 
k
 
của
 
n.
 
Số chỉnh hợp trong mỗi lớp là bằng nhau và bằng
 
(số hoán
vịì. Sô' các lớp là bằng số tổ hỢD chap
 
k
 
của
 
n.
 
Theo nguvên lý cộng, tích của
 
k\
 
với số
này !à bằng số các chỉnh hợp Ichông lặp chập
 
k
 
của
 
n,
 
nghĩa là bằng « (« -1)...(|2-Ấ:+1). Từ
đó nhận được số tổ hợp chập
 
k
 
của
 
n
 
là

n { n - \ ) { n - 2 ) . . ị n - k + \ )
 
,
 
n\

-----------------
1

Số tổ hợp này gập khá nhiều trong toán học, nó thường được ký hiệu bởi c*
 
và được
gọi là
 
hệ s ố tổ hợp.

Khi nhận xét rằng, giá trị của phép chia trong (1) là m ột số nguyên, ta nhận được
m ột kết quả lý thú trong sô' học:
 
tích của k s ố tự nlìiền liên tiếp bao giờ cũng chia hết

cho k\.

T h í d ụ 1. Có
 
n
 
đội bóng thi đấu vòng tròn. Hỏi phải tổ chức bao nhiêu trận đấu?

G iải; Cứ 2 đội thì có m ột trận. Từ đó suy ra số trận đấu sẽ bằng số cách chọn 2 đội từ
 
n

đội, nghĩa là bằng

n j n - \ )

-
 
2
 
•

T h í d ụ 2. Hỏi có bao nhiêu giao điểm của các đường chéo của m ột đa giác
 
l ồ i n ( n > 4)

đỉnh nằm ở trong đa giác, nếu biết rằng không có ba đường chéo nào đồng quy tại điểm

ở trong đa giác?

G iải:
 
Cứ 4 đỉnh của đa giác thì có m ột giao điểm
 
của hai đường chéo nằm trong đa
giác. T ừ đó suy ra số giao điểm cần đếm là

n { n - \ ) i n - 2 ) { n ~ 3 )

'
 
24

Dưới đây là m ột vài tính chất của các hệ số tổ hợp:

a) Đ ối xứng

ơn
 
=
 
C T '
 
(2)

13

Phần ỉ . Lý thuyết tổ hỢỊ)

b) Đ iều kiện đầu

ơ :
 
^
 
c :
 
=
 
I
 
(3)

c) Công thức đệ qui

cf,
 
=
 
C : \ + c l u
 
n > k > 0
 
(4)

Các công thức (2), (3) được suy trực tiếp từ định nghĩa tổ hợp, còn công thức (4) có thể
được chứng m inh lừ ( 1).

Từ (3) và (4), ta có thể tính tất cả các hệ số tổ hợp chỉ bằng phép cộng. Các hệ số
này
 
được tính và viết lần lượt theo từng dòng (mỗi dòng ứng với m ột giá trị /;=0 , 1, ...),
trên m ỗi dòng chúng được tính và viết lần lượt theo từng cột (mỗi cột ứng với m ột giá

lĩị k = 0,
 
1,
 
n)
 
theo bảng tam giác dưới đây:

c s

Cl'
 
c l

Bảng này được gọi là
 
tam giác Pascal.

Dưới đây là tam giác Pascal kích thước 8 :

1

]
 
2
 
I

1
 
3
 
3
 
1

1
 
4
 
6
 
4
 
1

1
 
5
 
10
 
10
 
5
 
1

1
 
6
 
15
 
20
 
15
 
6
 
1

1
 
7
 
21
 
35
 
35
 
21
 
7
 
1

1
 
8
 
28
 
56
 
70
 
56
 
28
 
8
 
1

Các hệ số tổ hợp có liên quan chặt chẽ với việc khai triển
 
luỹ thừa của m ột nhị thức.
T hật vậy, trong tích

( x + J^ )" =
 
(
 
x
 
+ >^)(
j
: +
 
,
 
(
 
x
 
+ :
f
 
)

hệ số của
 
/
 
sẽ là số cách chọn
 
k
 
nhân tử (x +
 
y)
 
m à từ đó ta lấy ra
 
A'
 
và đồng thời
trong
 
n-k
 
nhân tử còn lại ta lấy ra
 
nghĩa là

14

Chươnỉỉ i . M à dầu

( x
 
+
 
y ) "
 
= c °
 
x" + c ‘ x"
 
' V + ... +
 
c
 
r
 
-V >’"“ '+
 
a
 
y ''
 
(5)

Cônc thức (5) còn được gọi là
 
klìíỉi triển nhị tlìức Ne\\'ĩon
 
và các hệ số tổ hợp còn được
gọi là các
 
lìệ số n ììị ĩììức.

Chẳng hạn, căn cứ vào dòng cuối của tam giác Pascal kích thước 8 (đã tính ở trên), ta
phện đirợc:

ú ' + V)* -
 
/
 
+ 8.v"v + 2 8 .rV
 
+ 5 6 . \ ' + 7().v‘v" + 56,rV’ -r 2 8 .r" / +
 
/

Tliông
 
thường, công thức (5) được gặp dướidạng đa thức
 
một ẩn:

( x + 1 )" =
 
c l
 
x ”
 
+ c l
 
x " -' + . . . + c r '
 
A
-
 
+ c;:
 
(6)

Rất nhiều đẳng thức về hệ số tổ hợp được suy từ (6 ). Chảng hạn, trong (6 ) chọn A
' =1 ta
được:

c : + c ! , + ... + c ; r ' + c
 
=
 
2"
 
^
 
(7)

tức là nhận
 
được kết quả đã biết (thí dụ 3, mục
 
1.4,1); số các tập con của m ột /?-tập
bằng 2",
 
còn nếu chọn ,v = -1 ta được:

cỉ:
 
- c ; , + ... + ( - i r c : :
 
-
 
0
 
(8)

tức là số các tập con chẵn (có số phần tử là số chán) bằng các số tập con lẻ và bằng

N hiều tính chất của hệ số tổ hợp có thể thu được từ (6) bằng cách lấy đạo hàm hoặc
tích phan theo A
' hai vế của đẳng thức này một số hữu hạn lần, sau đó gán cho .r những
giá trị cụ Ihể. Chẳng hạn, cốne thức sau đây thu được bằns cách
 
lấy đạo hàm hai vế

th e o
 
v à s a u
 
đ ó
 
tr o n g đ ẳ n g
 
th ứ c Ihu đ ư ợ c đ ặt
 
X -
 
\ :

/ 72"- '
 
= n c :
 
+ ( / 7 - i ) c , :
 
+
 
... + C ;;-'
 
.

Còn công thức sau đây thu được bằng cách lấy tích phân hai vế theo
 
X
 
và sau đó trong
đẳng thức thu được đặt A
' =
 
1:

(« + i)
2
 
' - ' = { « + i ) c : + < + . . . + c ; ; .

15

Phẩn 1. Lý thuyết tổ hợp

Bài tập

1. Cho biết trong các hệ thức dưới đây hệ thức nào là đúng hệ thức nào là sai

a )À Ç A n ß

b ) C Q ( A n ß ) u C

c ) Ả
 
L.'B Q À n ß

d ) A n ( ß u A )
 
=
 
A n B

e)
 
(A
 
u
 
B)\(A
 
d
 
B) =
 
A\B

2. Ký hiệu z là tập các số nguyên. Xét hai tập con của Z:

A =
 
ị x e z
 
: x = 4p-ì
 
với m ột
 
p
 
e z
 
nào đ ó }

B =
 
{ỵ e
 
z
 
: y =
 
4ợ-5 với m ột
 
q e
 
z
 
nào đó I .

Chứng minh rằng
 
A = B.

3. Xét hai tập

Aị
 
= {n
 
e z
 
: n < 0
 
]
 
và
 
.42 = {« 6 Z: /ì > 0
 
}.

Hỏi
 
Aị,
 
A
 
2
 
có
 
tạo thành phân hoạch của z hay không? Nếu đúng hãy giải thích câu trả

lời, nếu sai hãy đưa ra phân hoạch đúng của z .

4. Cho
 
/4 = {0, 1, 2, 3, 4} và xác định quan hệ
 
R
 
trên
 
A
 
bởi:

/? = ( (0, 0), (2, 1), (0, 3), (1, 1), (3, 0), (1 ,4 ), (4, 1), (2, 2), (2, 4), (3, 3),
(4 ,4 ), (1 ,2 ), (4, 2) }.

Q iỉ ra rằng quan hệ
 
R
 
là quan hệ tương đưcfng hay không? N ếu câu trả lời là khẳng định
hãy đưa ra phân hoạch của A thành các lớp tưoĩig đương theo quan hệ R đã cho.

5. X ét các tập với các phần tử là các số nguyên;

Ao
 
=
 
{ ...,- 1 0 ,- 5 , 0 ,5 , 10, 1 5 ,2 0 ,2 5 ,...} ;

=
 
{ . . ., - 9 ,- 4 ,1 ,6 ,1 1 ,1 6 ,2 1 ,2 6 , .. .}

Ả2
 
=
 
{
 
-
 
8,- 3 , 2, 7, 12,
 
1 7 ,2 2 ,2 7 ,...}

A ,
 
=
 
{
 
-7 ,-2 , 3, 8, 13,
 
1 8 ,2 3 ,2 8 ,...}

A ,
 
=
 
{ .. .,- 6 ,- 1 , 4 , 9, 14, 1 9 ,2 4 ,2 9 ,...} .

z.

a) Chỉ ra rằng các tập
 
Aq, Aị, A
 
2
 
,
 
và A4 tạo thành phân hoạch của tập số nguyên

b) Chỉ ra quan hệ
 
s
 
tương ứng với phân hoạch này.

16

Chiamg 2. Bài toán dem

2

BÀI TOÁN ĐẾM

2.1. Giới thiệu bài toán

M ột trong những vấn đề đầu tiên của việc nghiên cứu tổ hợp là đếm xem có bao nhiêu
cấu hình tổ hợp có thể được tạo ra với những quy tãc đã nêu? Những bài toán như vậy
được gọi là
 
hài toán đếm tổ hỢỊ).
 
Thông thường, lời giải của bài toán đếm phụ thuộc vào
m ột số giá Irị tham số ban đầu và người ta cô' gắng biểu diễn sự phụ thuộc này bằng
những công thức toán học. Nói chung, để đếm các cấu hình đã cho, người ta tìm cách
đưa về các cấu hình quen thuộc bằng cách thiết lập một tưcmg quan
 
1-1 giữa chúng.
N hiều khi m ột bài toán đếm được phân thành những bài toán đếm nhỏ hơn bằng cách
chia việc đếm thành từng lớp để áp dụng nguyên lý cộng hoặc phân tích cấu hình cần
đếm
 
như là việc ghép m ột số cấu hình khác để áp dụng nguyên lý nhân. Dưới đây là
m ột số thí dụ đơn giản nhằm m inh họa m ột sô' kỹ thuật đếm.

T h í dụ 1.
 
Có bao nhiêu cách xếp 5 người đứng thành một hàng ngang sao cho A không
đứng cạnh B ?

Giải:
 
Đ ể đếm số cách xếp này, ta đếm
 
phần còn lại: sô' cách xếp m à A đứng cạnh B.
X em A vồ B như m ột chỗ, ta có 4! = 24 cách xếp. Số này cần được nhân 2 vì A có thể

17

Phcin I . Lv ílnivếr ti) hợp

đứng bên trái cũng như bên phải B. N hư vậy có tất cả 48 cách xếp A đứng cạnh B. Toàn
bộ có 5! = 120 cách xếp. Từ đó nhận được sô' cách xếp m à A k/.ông đứng cạnh B là 120

- 48 = 72 cách.

T h í dụ 2. M ột đợt phát hành xổ số với các sô' vé gồm 2 phần: phần đầu gồm 2 chữ cái
lấy từ A đến z
 
(26 phần tử) và phần sau gồm 4 chữ số lấy từ 0 đến 9 ( 1 0 phần tử). Hỏi
xác suất để trúng giải độc đắc là bao nhiêu ?

Giải:
 
Trước hết ta đếm số vé được phát hành. Mỗi vé gồm 2 phần: phần chữ và phần
số. Phần chữ có 26^ khả năng, phần số có
 
10“
* khả năng. Theo nguyên
 
lý nhân, số vé
được phát hành là
 
26 ‘
 
X
 
iO"
 
=
 
6 760 000. 'ĩừ đố nhận được xác suất đế trúng giải độc
đắc là

1 / 6 760 000
 
«
 
1 ,4 8 x 1 0 '

T h í d ụ 3.
 
C ho m ột lưới gồm các ô vuông. Các nút được đánh số' từ
 
0 đến /ỉ theo
 
c h iề u

từ trái sang phải và từ 0 đến
 
m
 
theo chiều từ dưới lên trên
 
(xem hình vẽ). Hỏi có bao
nhiêu đường đi khác nhau từ nút (0 , 0 ) đến nút
 
{n, nì)
 
nếu chỉ cho phép đi trên cạnh các
ô vuông theo chiều sang phải hoặc lên trên ?

(
0
,
 
m)
 
{n, m)

(
0
,
 
0
)
 
{ n ,
 
0
)

G iải: M ột đường đi như th ế được xem gồm
 
n+m
 
đoạn (mỗi đoạn là m ột cạnh ô vuông).
Tại m ỗi đoạn chỉ được chọn một trong 2 giá trị; đi lên (m à ta m ã là
 
1) hay sang phải
(m à ta m ã là 0). Số đoạn đi lên đúng bằng
 
m
 
và sô' đoạn sang phải đúng bằng
 
n.
 
Bài toán
dẫn về việc tìm xem có bao nhiêu dãy nhị phân độ dài
 
lì + m
 
trong đó có đúng
 
m
 
thành
phần bằng
 
1. Đ ây cũng chính là số tập con m phần tử của một tập
 
n
 
+
 
m
 
phần tử, VI thế

s ố
 
đường đi cần
 
đ ế m
 
bằng
 
.

T h í dụ 4.
 
T huật toán "nổi bọt" dùng để xếp tăng dần dãy a,
 
(/ =
 
1,2,..., /ỉ) được m ô tả
bằng đoạn chương trình PASCAL dưới đây:

F or i := 2 to n do

F o r j
 
.•=
 
n clownto i do

18

Chư ơ iìg
 
2
 
. B à i toán dem

ư < ^ íj-n >
 
rlien Swapịuịj-IỊ. u ị i h :

Hãy đếm xem phải làm bao nhiêu phép so sánh ?

G iải: Ta chia số phép so sánh thành các lớp theo vòng lặp / (/ đi từ 2 đến
 
n).
 
Với m ỗi
 
i

xác định, phải thực hiện
 
ìì-i+I
 
phép so sánh. Từ đó nhận được, theo nguyên lý cộng, số
các phép so sánh là:

—
2 /+ ... + I
 
—
 
Ẩ
,

Có thể lý luận gọn hơn: thuật toán
 
"nổi bọt" viết trong đoạn chương trình đã cho
phải so sánh tất ça các cập phần tử khác nhau. Từ đó nhận được số phép so sánh là

_
 
/7(^-1)

"
 
“
 
2

M ột đặc tính của các bài toán đếm tổ hợp là số cấu hình tăng rất nhanh khi số giá
trị tham gia vào việc tạo nên cấu hình đó tăng. Điều này thường dẫn đến các con số
khổng lồ m ặc dù các con số tham gia ban đầu không lón. Hiện tượng này thường được
gọi là sự bùng nổ tổ hợp và chính nó là nguyên nhân làm cho các thuật toán dựa vào
việc duyệt toàn bộ trở nên không khả thi. Thí dụ dưới đây cho thấy rằng, dù qui cách

tạ o c ấ u
 
h ìn h
 
c ó
 
v ẻ
 
rất h ạ n c h ế n h ư n g
 
s ố c ấ u
 
h ìn h đ ư ợ c tạ o , h o á ra lạ i rất lớ n .

T h í dụ 5. Ngôn ngữ PASCAL chuẩn
 
qui định đặt tên biến không quá 8 ký tự. Các ký tự
trong tên biến chỉ được phép là các chữ cái (từ A đến Z) hoặc các chữ sô' (từ 0 đến 9) và
phải bắt đầu bằng chữ cái. Hỏi có thể định nghĩa bao nhiêu biến khác nhau ?

Giải:
 
Ta phân các biến thành các lớp:
 
1-ký tự, 2-ký tự, ... Sô' các biến thuộc lớp
 
Ả-ký tự,
theo nguyên lý nhân, bàng 26 X 36'" ' (Ấ
; = 1. 2,
 
8). Từ đó, theo nguyên lý cộng, ta

nhận được số các biến khác nhau là:

26.(1 + 36 + 36^ + ... + 36’) =
 
2 095 681 645 538.

2.2. Nguyên lý bù trừ

M ột số bài toán đếm phức tạp hơn, được dựa vào nguyên lý lổng quát của nguyên
 
lý
cộng. Nấu không có giả thiết gì vé sự rời nhau giữa 2 tập
 
A v à B
 
thì

N { A y j B )
 
=
 
N { A ) +
 
N { B ) -
 
N i A r ^ B ) .
 
(1)

Công thức (1) được m ở rộng cho trường hợp nhiều tập như sau.

Đ ịnh lý.
 
Gi ả s ửAị ,
 
/4,,... ,
 
A„, là các tập hữu hạn. Khi đó

N { A ^
 
v j
 
A
 
z
^ . . . A , „ )
 
=
 
. V, - A^ : + . . . + ( - i r > „ ,
 
,
 
(
2
 
)

19

Phắn ỉ. Lý thuyết tổ hợp

trong đó Nị. là tổng phần ĩử của tất cả các giao của k tập lấy ìừ m tập đ ã cho (nói riêng

/V, = N(A,) + ... +
 
N,„ = N{A, n A , n
 
... n
 
A J ).

Chứng m inh. Chú ý
 
rằng,
 
số các
 
giao của
 
k
 
tập
 
lấy
 
từ
 
m
 
tập
 
bằng
 
ci,
 
,
 
k = \ , 2 ,
 
m.

Để chứng m inh công thức (1), ta sẽ tính xem mỗi phần tử của tập
 
/4| u
 
y\2
 
. u
 
A,„

được đếm bao nhiêu lần trong vế phải của nó. Xét m ột phần tử tuỳ ý
 
ứ e /4| u
 
.42 u
 
. . .
u
 
y4„,. Giả sử
 
a
 
là phần tử của
 
k
 
tập trong số
 
m
 
tập đã cho. K hi đó
 
a
 
được đếm ở vế phải
của công thức ( 1)

C l - C ; + C l - . . . + ( - l ) ‘- ' c :

lần. Do

c i - c ; + c * ' - , . . + ( - i ) * ' ' c ;

=
 
1
 
- [
 
1
 
-
 
c ; + Q = - Q ' + . . . + ( - i ) * c ;
 
] =
 
1 - ( 1
 
- i y = i ,

suy ra rnỗi phần tử tí e A/ u
 
u
 
. . . o
 
A„, được tính đúng
 
1 lần ở vế phải của công
thức ( 1), điểu đó đã chứng m inh tính đúng đắn của công thức ( 1).

Bây giờ ta đồng nhất tập
 
Aị.
 
với tính chất
 
Aị.
 
cho trên m ột tập
 
X
 
nào đó và đếm xem
có bao nhiêu phần tử của
 
X
 
không thoả m ãn bất cứ m ột tính chất /4|. nào cả.

Gọi
 
N
 
là số cần đếm , /V là số phần tử của
 
X,
 
ta có:

~Ñ = N -
 
N { A , ^ A.KJ... A„)= N -
 
Ny +... + { -\Ỵ ' N ^
 
(3)

trong đó
 
là tổng các phần tử của
 
X
 
thoả m ãn
 
k
 
tính chất lấy từ
 
m
 
tính chất
 
đã cho.

Công thức (3) được gọi là
 
nguyên lý bù trừ.
 
N ó cho phép tính
 
N
 
qua các
 
Nf.
 
trong
trường hợp các số này dễ tính toán hơn.

T a sẽ xét m ột số thí dụ m inh hoạ cho việc sử dụng nguyên lý bù Irừ để giải các bài
toán đếm.

T hí dụ 1.
 
Hỏi trong tập
 
x =
 
{ 1 , 2 , 1 0 0 0 0 }
 
có bao nhiêu số không chia hết cho bất cứ
số nào trong các số 3, 4, 7?

Giải.
 
Gọi

A ị = ị
 
X
 
e
 
X :
 
X
 
c h ia h ế t c h o
 
ỉ'Ị , i =
 
3 , 4 , 7 .

Khi đó
 
là tập các số trong X chia hết cho ít nhất m ột trong
 
3
 
số 3, 4, 7,

suy ra theo công thức (3), sô' lượng các số cần đếm sẽ là

N{X)
 
- yV(A3 u
 
/^4 u
 
A^) = N , - N 2
 
+ N y

Ta có

/V, =
 
N(A,)
 
+
 
N{A,) + N{A,)

=
 
[10000/3] + [10000/4] + [10000/7]

= 3333 + 2 5 0 0 +
 
1428 =7261,

20

Chương 2. Bài toán dếm

= N{A^
 
n
 
/Ì
4
 
) +
 
N(A^
 
n
 
A^) + N(A^ n
 
A
 
t
)

=
 
[10000/(3x4)] + [10000/(3x7)] + [10000/(4x7)]

= 833 + 476 + 357 = 1666,

N , = N { A , r ^ A , r ^ A ^ ) =
 
[10000/(3x4x7) ] = 119,

ờ đây ký hiệu [
 
r
 
] để chỉ số nguyên lớn nhất không vượt quá
 
r.

Từ đó số lượng các số cần đếm là 10000 - 7261 + 1666 - 119 = 4286.

T h í dụ 2. Có bao nhiêu xâu nhị phân độ dài
 
10 hoặc là bắt đầu bởi 00 hoặc là kết thúc
bởi 11?

G iải. Dễ thấy là số xâu nhị phân độ dài 10 bắt đầu bởi 00 là 2® = 256 và sô' xâu nhị phân
độ dài 10 kết thúc bởi
 
11 là 2* = 256. Ngoài ra, số xâu nhị phân độ dài 10 bắt đầu bởi

00 và kết thúc bởi 11 là 2* = 64. Theo công thức (1) suy ra số xâu nhị phân hoặc bắt đầu
bởi 00 hoặc kết thúc bởi 11 là

256 + 256 - 64 = 448.

Kết thúc m ục này, ta xét bài toán cổ điển dưới đây trong lý thuyết xác suất:

Bài to á n bỏ th ư . Có
 
n
 
lá thư và
 
n
 
phong bì ghi sẵn địa chỉ. Bỏ ngẫu nhiên các lá thư
vào các phong bì. Hỏi xác suất đè’ xảy ra không một lá thư nào bỏ đúng địa chỉ là bao
nhiêu?

G iải; Có tất cả
 
n\
 
cách bỏ thư. Vấn đề còn lại là đếm số cách bỏ thư sao cho không có
lá thư nào đúng địa chỉ. Gọi
 
X
 
là tập hợp tất cả các cách bỏ thư và
 
là tính chất lá thư
thứ
 
k
 
bỏ đúng địa chỉ.
 
Khi đó theo công thức (3) ta có:

~N = N - N , + N
 
2
 
- . . . +

irong đó
 
N
 
là sô' cần tìm ,
 
A/ = /?!,
 
còn
 
Nị.
 
là số tất cả các cách bỏ thư sao cho có
 
k
 
lá
thư đúng địa chỉ. N hận xét rằng,
 
Nị.
 
là tổng theo mọi cách lấy
 
k
 
lá thư từ
 
n
 
lá, với mỗi
cách lấy
 
k
 
lá thư, có
 
ịn-k)\
 
cách bỏ để
 
k
 
lá này đúng địa chỉ, ta nhận được:

và

N ,
 
=
 
Ơ A n - k ) \
 
=
 
^

k\

T7
 
1
 
1
 
(-1 )”

Từ đó xác suất cần tìm là

,
 
1
 
1
 
(-
 
1
)”

1
!
 
2
!
 
n \

21

Fhân ì . Lỷ thuyết tổ ỉĩ(/p

M ột điều lý thú là xác suất này dẩn đến
 
e'^
 
(nghĩa là còn
 
lớn hơn
 
1/3) khi
 
n
 
khá
lớii. Số
 
N
 
trong bài toán trên được gọi là
 
sốmcĩt íhứ ĩựvìì
 
được ký hiệu là D,,.. Dưới đây
là m ột vài giá trị của
 
cho ta thấy
 
tăng nhanh thế nào so với
 
ìĩ\

"
 
^
 
3
 
4
 
5
 
6
 
1
 
7
 
8
 
9
 
1
 
10
 
li

!
 
1
 
2
 
9
1
_
_
_
 
44
 
265 1 1854
 
14833
 
133496 1
 
1334961
 
4890741

2.3. Quy về các bài toán đơn giản

M ộì trong nhũng phương pháp dếm là qưy bài toán đang xét về những bài toán dơn giản
hơn. Đ iều này không phải lúc nào cũng dễ vì nó thường đòi hỏi m ột sự phân tích sâu
sắc
 
cấu
 
hình
 
cần
 
đếm . T hí dụ dưới đây
 
trình
 
bày
 
m ột bài toán
 
nổi
 
tiếng
 
của Lucas
(1891). qua đó rút ra được nhiều điều bổ ích irong nghệ thuật đếm .

B ài to á n xếp k h á c h c ủ a L ucas. Có m ột bàn tròn, xung quanh có
 
2n
 
ghế. Cần sắp chỗ
cho
 
n
 
cặp vợ chồng sao cho các ông ngồi xen kẽ các bà và không có cặp vợ chồng nào
ngồi cạnh nhau. Hỏi có tất cả bao nhiêu cách xếp ?

G iải: Gọi số phải tìm là
 
M„.
 
Xếp cho các bà trước (cứ m ột g h ế xếp thì m ột g h ế để trống
dành cho các ông). Số cách xếp cho các bà là 2«!. Gọi số cách xếp các ông ứng với một
cách xếp các bà là
 
u,„
 
ta được số cách xếp là

M„
 
=
 
2n\
 
X
 
u„.

V ấn để còn lại là đếm số
 
ư„.

Đ ánh số các bà (đã xếp) từ 1 đến
 
n,
 
đánh số các ông tương ứng với các bà (ông
 
i
 
là
chồng bà
 
i),
 
sau đó đánh số các g h ế trống theo nguyên tắc: g h ế số
 
i
 
nằm giữa bà /■và bà
; + /
 
(để tiện trình bày, các phép cộng chỉ số trong phần này đểu được hiểu là thực hiện

v ò n g
 
tròn, nghĩa là «+1 =
 
1). M ỗi cách xếp các ông được biểu diễn bằng m ột phép thế

(p
 
trên tập { 7 ,2 ,
 
/ỉỊ với quy ước
 
ợịi)
 
=
 
j
 
có nghĩa là g h ế
 
i
 
được xếp cho ôngỹ. Theo
đầu bài,
 
ẹ
 
phải thoả m ãn

ẹ ự ) ĩ i i vầ. (p{i)
 
(*)

N hư vậy
 
ư„
 
là số tất cả các phép th ế 9 thoả m ãn điều kiện (*). T rong toán học,
 
ư„
 
được
gọi là
 
sô'phân hố.

X ét tập hợp tất cả các phép th ế
 
(p
 
của {1, 2,
 
n \.
 
Trên tập này, gọi
 
p,
 
là tính chất

(p{i) = i
 
và
 
Qị
 
là tính chất
 
(f{i)
 
= /+ 1. Đ ặt
 
p,,^ị = Q,
 
và ta được, theo nguyên lý bù trừ
(tương ứng với
 
2n
 
tính chất
 
p¡)\

u„
 
^
 
=
 
n \ - N ,
 
+ N ^ - ...

22

Chươníị 2. Bùi toán dem

trong đó
 
N¡.
 
là tổng số tất cả các phép thế thoả mãn
 
k
 
tính chất, lấy từ 2/ỉ tính chất đang
xét.

Chú ý rằng, không thể xảy ra đồna thời thoả mãn
 
p,
 
và
 
Q,
 
hoặc đồng thời thoả mãn

Pị^i
 
và Q,, do đó trong các cách lấy ra
 
k
 
tính chất từ
 
ĩn
 
lính chấl đang xét, cần thêm vào
điều kiện: các
 
p,
 
và
 
Q,
 
hoặc
 
Pị^ị
 
và (2,
 
không được đồng thời có mặt. G ọi số các cách
này là ẹ(2/?,
 
k)
 
(nói riêng ẹ(2/7,
 
k)
 
=
 
0
 
khi
 
k > n).
 
Với mỗi cách lấy ra
 
k
 
tính chất như
vậy
 
{k <
 
/7), ta có
 
(_n-k)\
 
phép th ế thoả mãn chúng. Từ đó nhận được
 
N
 
=
 
g{2n, k )\n -k )\

\’à

JJ, ~t ì \
 
- g(
2
n,
 
ịỊ(
2
ri,
2
 
).(n-
2
y
 
- ... + {- \ )" í ị l n , n) .

Bây giờ còn phải tính các hệ số
 
g{2n, k), k =
 
1 ,2
 
......

Xếp
 
2n
 
tính chất đang xét trên một vòng tròn theo thứ tự
 
P), Qị, P
2
 
,
 
Ö 2
......
 
P,I’ Qn<

ta thấy rằng
 
g{2n, k)
 
chính là sớ cách lấy ra
 
k
 
phần tử trong
 
2n
 
phần tử xếp thành vòng
tròn sao cho không có 2 phần tử nào kể nhau cùng được lấy ra.

Đ ể tính
 
i>{2n, k)
 
ta giải 2 bài toán con sau đây:

B ài to á n
 
1. Có bao nhiêu cách lấy ra
 
k
 
phần tử trong
 
n
 
phần tử xếp trên đường thẳng
sao cho không có 2 phần tử kề nhau cùng được lấy ra ?

G iải:
 
Khi lấy ra
 
k
 
phần tử, ta còn
 
n-k
 
phần tử. Giữa
 
n-k
 
phần tử này có
 
n-k+ \
 
khoảng
trống (kể cả 2 đầu). M ỗi cách lấy ra
 
k
 
khoảng từ các khoảng này, sẽ tưcmg ứng với m ột
cách chọn
 
k
 
phẩn tử
 
thoả m ãn yêu cầu đã nêu. Vậy số cách cần tìm là cí,-i+i.

B ài to á n 2. G iống rihư bài toán 1, nhưng với
 
n
 
phần lử xốp trên vòng tròn.

G iải: Cố định phần tử
 
a
 
trong /; phần tử. Chia các cách lấy ihùnh 2 lớp:

1. Các cách m à
 
a
 
được chọn, khi đó 2 phần tử kê
 
a
 
sẽ khỏng được chọn và ta phải
lấy Ấ;-] phần tử từ
 
/ỉ-3 phần tử còn lại. Các phần lử này đưực xem như trên đường thẳng.
T heo bài toán
 
1, số cách thuộc lớp này là Cf,rl-|.

2. Các cách m à
 
a
 
không được chọn, khi đó bỏ
 
a
 
đi, la đưa về bài toán lấy
 
k
 
phần tử
từ
 
n -ỉ
 
phần tử xếp trên đường thẳng. Theo bài toán 1, sô’
 
c á c li
 
thuộc lớp này là
 
Ờ n-k
 
.

Vậy, theo nguyên lý cộng, sô' cách cần tìm là

c Ì :l- , + C *
 
=
 
- ^ C
 
l ,
 
.

n - k

Từ kết quả của bài toán 2, ta nhận được

2n
 
.

g { 2 n , k ) ^ : ^ C L ,

2 n - k

và số phân bố ơ„ được tính bằng

2
 
2
 
2
2/7- I
 
2 /7 -2
 
n

23

Phẩn ỉ
 
.
 
Lý thuyết tổ hợp

(T ouchard J. 1934 France).

Dưới đây là m ột vài giá trị của
 
u
„,
 
m ột lần nữa m inh hoạ hiện tượng bùng nổ tổ

hợp:

/ỉ
 
2
 
3
 
4
 
5
 
6
 
7
 
8
 
9
 
ỈO

0
 
1
 
2
 
13
 
80
 
579
 
4738
 
43387
 
439792

2.4.
 
Công thức truy hồi

T hông thường, người ta quan tâm đến những bài toán đếm , trong đó kết quả đếm phụ
thuộc vào m ột tham số tại đầu vào (m à ta ký hiệu là /í),
 
thí dụ các sô'
 
ơ,„ ... Việc
biểu diễn kết quả này, như m ột hàm của
 
n,
 
bằng một số hữu hạn các phép toán, khỏng
phải là đơn giản. Người ta nhận thấy rằng, trong nhiều trường hợp, việc tìm kiếm một
công thức trực tiếp giữa kết quả đếm và giá trị
 
n
 
là rất khó khân (hoặc không thể được),
trong khi đó, công thức liên hệ giữa kết quả đếm ứng với
 
n
 
và các kết quả đếm ứng với
các giá trị
 
n
 
bé hơn lại đcfn giản và dễ tìm. N hờ công thức này và m ột vài giá trị ban
đầu, ta có thể tính mọi giá trị còn lại khác. Công thức đó gọi là công thức truy hồi hay
công thức đệ quy. Do tính k ế thừa, công thức truy hồi rất thích hợp với việc lập trình
trên m áy tính. N ó cho phép giảm đáng kể độ phức tạp cũng như gia tăng độ ổn định của
quá trình tính toán.

2.4.1. C ác thí dụ m inh họa

Trước tiên chúng ta xét m ột sỏ' thí dụ m inh hoạ việc xây dựng công thức truy hồi để giải
các bài toán đếm .

T h í d ụ 1. T ính số m ất thứ tự
 
D„.

Giải:
 
Đánh số thư và phong bì từ 1 đến
 
n
 
(thư / gửi đúng địa chỉ nếu bỏ vào phong bì 0-

M ột cách bỏ thư được đồng nhất với hoán vị ( ô
 
| ,
 
a„)
 
của ( 1 , 2
 
......
n}.
 
M ột m ất thứ tự

được định nghĩa là m ột hoán vị
 
(ữ |
 
......
 
a„)
 
sao cho
 
ứ,
 
với m ọi
 
i.
 
Thành phần ứ| có

thể nhận
 
n-ĩ
 
giá trị ngoài 1. Với m ỗi giá trị ^ (Ẩ
:
 
1) của
 
ũị,
 
xét 2 trường hợp:

1.
 
=
 
1,
 
khi đó các thành phần còn lại
 
được xác định như m ột m ất thứ tự của
 
n-2

phần tử, tức là số các m ất thứ tự thuộc loại này bằng
 
D„_
2
 
-

2.
 
a*.
 
1,
 
khi đó các thành phần từ 2 đến
 
n
 
được xác định như m ột m ất thứ tự của

n- ì
 
phần tử
 
(xem giá trị 1 như là giá trị
 
k),
 
tức là số m ất thứ tự thuộc loại này bằng D„.|.

Từ đó nhận được công thức

D„ = (n -1 )(D „ ., + D „,).
 
n > 3 .

24

Chươiìf> 2. Bãi íoán dâ'in

Các giá trị ban đầu dễ dàng được tìm trực tiếp:
 
D | = 0,
 
D

Mọi giá trị còn lại được tìm đơn giản nhờ luật kế thừa:

D , =
 
( 3 - 1 ) ( 0 + 1)
 
=
 
2

D,
 
=
 
( 4 -
 
1)(1 + 2 )
 
=
 
9

D ,
 
=
 
( 5 - l)(2 +
 
9)
 
=
 
44

=:
 
( 6 - 1K9 +
 
44) =
 
265

D ,
 
= (7-1X 265+ 44)
 
=
 
1854
D,
 
-(8 -1 X 1 8 5 4 + 2 6 5 )
 
=
 
14833

Để công thức truy hồi đúng cả đối
 
với
 
n = 2,
 
ta xem
 
như
 
D„=
 
1.

Có thể nhận được công thức trực tiếp qua công thức truy
 
hồi.Thật vậy, từ

D„ =
 
( « -
 
1)(D„.,+D„,)

suy ra

D„ - «ơ„.,
 
=
 
- (/;

Đặt
 
v„ = D„ - n
 
D„.|, ta có

=
 
v,, =
 
-v „,
 
=
 
...
 
=
 
( - i r ' v ,
 
-
 
( - i r

hay

D„ _
 
A,-I
 
^
 
(-1)"

nl
 
{ n - \ ) \
 
~
 
n\

Cộng các hệ thức trên, với /7 = / , 2,
 
ta được

A ,
 
, 1
 
1
 
(-1)"

— =
 
1 —
 
■+
 
” —...+

n\
 
1
!
 
2!
 
h!

1
 
1
 
(-1)"

và nhân lai công thức đã biêt:
 
D„
 
=
 
«!( 1 - —
 
+ —

1
!
 
2
!

m

T h í d ụ 2. Trên m ặt phẳng, kẻ
 
n
 
đường thẳng sao cho không có 2 đường nào song song
và 3 đường nào đồng quy. Hỏi mặt phẳng được chia thành m ấy phần ?

G iải: Gọi số phần m ặt phẳng được chia bởi n đường thẳng là 5„. G iả sử đã kẻ
 
n- \
 
đường
thẳng. Bây giờ kẻ thêm đường thẳng thứ
 
n
 
thì số phần được thêm sẽ bằng số giao điểm
được thêm cộng với 1. Số giao điểm được thêm là số giao điểm m à đường thẳng vừa kẻ
cắt
 
n
 
- 1 đường thẳng cũ, nghĩa là bằng
 
n -
 
1. Từ đó nhận được công thức truy hồi

s„
 
s„.| + «,
 
n > ị .

với giá trị ban
 
đ ầ u
 
5„ = 1. Từ công thức này. dễ dàng tính mọi giá trị của s„, « =
 
1, 2, ...

s,
 
1
 
+
 
1
 
= 2

= 2 + 2
 
= 4

25

Plìđn I . Lý thuyết tổ hỢỊ)

5 ,
 
=
 
4 + 3
 
= 7

5 ,
 
=
 
7 + 4
 
= 1 1

5 ,
 
=
 
11 + 5
 
= 1 6

5^ = 16 + 6
 
= 2 2

s"
 
= 22 + 7
 
= 2 9

Để tìm còng thức trực tiếp, ta cộng các hệ thức
 
Sf.
 
= 5;.| +
 
k
 
với
 
k -
 
1 ,2 ,
 
/?. Sau

khi khử các số hạng giống nhau ở hai vế, ta nhận được:

n{n + \)
 
ri^ + n + 2

s „
 
=
 
5
 
o
 
+ 1
 
+
 
2
 
+
 
. . .
 
+
 
/7
 
-
 
1 +

Á
.
 
Z
.

Công thức truy hồi được m ở rộng m ột cách tự nhiên cho trường hợp có nhiều tham
số. Khi đó cần m ột họ các giá trị ban đầu (m à chúng thường được gọi
 
là các giá trị
biên). Việc tiếp cận các hệ số tổ hợp như trình bày dưới đây là m ột thí dụ ;ìm một công
thức như vậy.

T h í dụ 3. Tính hệ số tổ hợp
 
c \
 
.

G iải: Chọn phần tử cố định
 
a
 
trong
 
n
 
phần tử đang xét. Chia số cách chọn tập con
 
k

phần tử của tập này
 
th à n h
 
2 lófp: chứa
 
a
 
và không chứa
 
a.
 
N ếu
 
a
 
được chọn thì ta phải
bổ xung
 
k-\
 
phần tử từ
 
n-\
 
phần tử còn
 
lại, từ đó lớp chứa
 
a
 
gồm
 
Ớ„z\
 
cách. N ếu
 
a

không được chọn thì ta phải chọn
 
k
 
phần tử từ «-1 phần tử còn lại, từ đó lớp không chứa

a
 
gồm
 
Cị-Ị
 
cách, llie o nguyên lý cộng, ta được công thức truy hồi:

c í
 
=
 
d : , ' + c*_,

với các giá trị biên được suy trực tiếp từ định nghĩa:

c °
 
=
 
C ” =
 
1.

Rõ ràng việc lập trình theo công thức truy hồi (xem
 
tam giác Pascal) là hiệu quả hơn
nhiều so với việc lập trình theo công thức trực tiếp.

Phương pháp tìm công thức trực tiếp từ công thức truy hồi trình bày trong các thí dụ
 
1-3
được gọi là
 
phương p h á p khử.
 
Không phải lúc nào cũng dễ dàng khử được công thức
truy hồi để đưa được về công thức trực tiếp. Tuy nhiên, trong m ột số trường hợp đặc biệt
ta có thể đưa ra phương pháp tổng quát để giải công thức truy hồi (tức là tìm công thức
trực tiếp cho số hạng tổng quát của dãy số thoả m ãn công thức đã cho).

T h í d ụ 4. (Bài toán tháp H à nội). Trò chơi tháp Hà nội được trình bày như sau: “ Cớ
 
3

cọc a, b, c. Trên cọc a có m ột chồng gồm n cái đĩa đường kính giảm dẩn lừ dưới lên

trèn. Cần phải chuyển
 
chổng đĩa từ cọc a saníị cọc c tuân
 
thủ quì tắc:
 
mỗi lần
 
chỉ

26

C lìK ơ i ìịị 2 . B à i t o ú ì i d ế ìì ì

chuyển
 
1
 
đĩa Vil chỉ được xếp đĩa có cha'rng kính nhó hơn l(hi Irên đĩa cố đường kính lớn

hơn. Troni> quá trình chuyển dược phép dùng cọc h làm cọc trung gian
 
Bài toán đặt ra
là: Tim
 
số lần di chuyển đĩa ít nhất cán thực hiện để thực hiện xong nhiệm vụ đặt ra
trong trò chơi tháp Hà nội.

G iải: Gọi
 
lĩ„
 
là sô' lần di chuyển đĩa ít nhất cần thực hiện để giải xong bài toán tháp Hà
nội. Ta xây dựng công thức đệ qui đê tính
 
h„.
 
Rõ ràng:

h, = \.

Giả sử
 
n >
 
2. V iệc di chuyển (ĩĩa gổrn các bước;

(i)
 
C huyển /7-1 đĩa từ cọc
 
a
 
đến cọc
 
b
 
sử dụng cọc
 
c
 
làm trung gian. Bước này được
thực hiện nhờ giả thiết quy nạp.

(ii) Chuyển 1 đĩa (đĩa với đường kính lớn nhất) từ cọc
 
a
 
đến cọc
 
c.

(iii)
 
C huyển /7-1 đĩa từ cọc
 
h
 
đến cọc
 
c
 
(sử dụng cọc
 
a
 
làm trung gian). Bước này
được thực hiện nhờ giả thiết quy nạp.

Bước (i) và (ii) đòi hỏi giải bài toán tháp Hà nội với /ỉ-1 đĩa, vì vậy số lần di chuyển đĩa
ít nhất cần thực hiện trong hai bước này là 2/ỉ„.|. Do đó ta có công thức đệ qui sau:

/?„=/;„.,+
 
\,n>2.

Sử dụng công thức đệ qui và điều kiện đầu vừa tìm được đối với h„ ta có thể dễ dàng
chứng m inh bằng qui nạp là

h
„=2"-ì,ii>ì.

2.4.2.
 
Giải còng thức truy hồi luyếii ỉííili thuần nhất hệ sò hằng

Xét công thức truy hồi tuyến tính thuầii nhất hệ số hằng bậc
 
k:

+ C2ữ„.2 + ...+ C'A.*.,
 
(1)

trong đó
 
C|,
 
Cj
.....
 
q
 
là các hằng số, q
 
0.

Ta cần tìm công thức trực tiếp cho sô' hạng
 
a„
 
của dãy sô'
 
\ a„]
 
thoả mãn công thức
(1) (dãy số như vậy sẽ gọi là nghiệm của cồng thức truy hổi đã cho). Rõ ràng, dãy số

ịa,,]
 
thoả m ãn công thức (1) sẽ được xác định duy nhất, nếu nh ư nó phải thoả m ãn
 
k

điều kiện đầu sau:

<
^0 —
 
C
 
q
,
 
ứ| = C|,
 
(2)

trong đó Cq,
 
C ị , C ị , _ i
 
là các hằng số. Ta tìm nghiệm dưới dạng

a„
 
= r"
 
,
 
(3)

trong đó
 
r
 
là hằng số. Dãy số
 
{a
„Ị xác định theo công thức (3) sẽ thoả m ãn (1 ) nếu /• là
nghiệm của phươnp trình:

27

Phầỉì ỉ . Lý thuyết tổ hợp

=
 
4 - C 2 r ' " ' + . . . +
 
r ,

h a y
 
là

/
 
-
 
c\
 
- C2
 
- . . .
 
- Q = 0.
 
(4)

Phương trình (4) được gọi là phương trình đặc trưng của công thức (1), và nghiệm của
nó được gọi là nghiệm
 
đặc trưng. C húng ta sẽ xét cách sử dụng nghiệm
 
đặc trưng để
xây dựng công thức nghiệm dưới dạng hiện. Trước hết chúng ta xét trường hợp riêng,
khi
 
k = 2.
 
Sau đó các kết quả sẽ được phát biểu cho trường hợp "ổng quát.

Đ ịnh lý 1.
 
Cho
 
C
‘i,
 
C
' 2
 
ìà các hằng s ố thực. Gid sử phương trình r
 
- Ti r -
 
C
' 2
 
-
 
0 có hai

n^lĩiệm phán hiệt ỉ\ và
 
K hi đó dãv s ố \a,,
 
I
 
Icì nghiệm của công thức ĩriiv hồi

ứ,., + C2
 
a,,2

khi và chỉ khi

=
 
a / l ‘
 
+
 
(5)

n = Q,
 
1
,
 
t rong đó ơị , Ơ
2
 
là các hằng số.

Chứng m ỉnh.
 
Trước hết ta chứng m inh rằng nếu
 
ì\
 
và
 
là hai nghiệm
 
phân biệt của
phương trình đặc trưng, và a ,
 
, «2
 
là các hằng số, thì dãy số
 
\a„]
 
xác định bởi công
thức (5) là nghiệm của công thức truy hồi đã cho. Thực vậy, do r,
 
và
 
ì
' 2
 
là nghiệm đặc
trưng nên

=
 
c ,
 
r,
 
+
 
C
2
 
,
 
/'
2
 
^ =
 
c ,
 
/ - 2
 
+
 
C
' 2

từ đó suy ra

Í ' |
 
+
 
¿' 2
 
« « . 2
 
=
 
C |
 
( « I
 
+
 
« 2
 
'
 
2
 
" ' )
 
+
 
+
 
« 2
 
/ V " ^ )

= or,
 
r, + C2) + «2
 
r2 '\Cị
 
/‘2 + C2)

=
 
+ «2

= a , r,"
 
+ «2 '-2"

= a „ .

Bây giờ ta sẽ chỉ ra rằng nghiệm
 
[a„\
 
của hệ thức
 
= C| a„.| + C2 ớ„.2 luôn có dạng (5)
với ữp
 
Oỵ
 
nào đó. Thực vậy, giả sử
 
{a„\
 
là nghiệm của hệ thức đã cho với điều kiện đầu

=
 
C ( ) , Ơ Ị
 
=
 
C
 
ị
 
,
 
( 6 )

ta chỉ ra rằng có thể tìm được các số
 
, a ^ ă ề
 
cho (5) là nghiệm của hệ thức với điều
kiện đầu này. Ta có

ứo = Co = a , + «
 
2
 
,

a, = c ,
 
= a,/-, +

28

Chươìií’ 2 . B ii ỉ to á n dếm

Giải hệ phương trình tuyến tính phụ thuộc hai ẩn a ,,
 
a,
 
thu được, do Tị ^
 
/*
2»
được nghiệm duy nhất

or, = (C, - C
„ / - 2
 
)/(/•, - /
 
2
 
),
«2 = (Co /•, - c , )/(r, - /■,).

(7)

Với những giá trị của a , ,
 
G
C
2
 
vừa tìm được, dãy |ứ „| xác định theo (5) là nghiêm của hệ
thức đã cho với điều kiện đầu (6). Do hệ thức đã cho cùng với điều kiện đầu (6) xác
đm h duy nhất m ột dăy số, nén nghiệm của .lệ thức cược clio bửi ccng ihCc (5). Định lý
được chứng m inh.

Thí dụ 4.
 
Dãy Pibonaci trong toán học được định
 
n g h ĩa
 
bằng
 
hệ
 
thức truy hổi:

+
 
/^„ 2.
 
n >
 
2,

=
 
F ,
 
=
 
1.

Tim công thức hiện cho

G ỉải:
 
Giải phương trình đặc trưng:

r
 
- /* - 1 ==0,

ta thu được hai nghiệm

\ + s

r.
 
=
 
/‘2
 
=
 
\- 4 l

và công thức hiện có dạng:

F„
 
=
 
+ QÍ2.(/-,)"

trong đó
 
« I ,
 
«2
 
là các hằng số cần xác định từ các giá trị ban đầu
 
Fq, Fị.
 
Từ công thức
(7), ta có:

1
 
I+V5
 
1
 
I-V 5

a,
 
=
 
Vs
 
2
 
«2
 
=
 
s
 
2

và nhận được
 
/
 
/
 
r~\

1+ V 5 \
 
rt+
1 ^

V
 
i
 
2
 
1
 
-
 
2
 
/

M ột điều lý thú là công thức này phải dùng các phép toán vô tỉ để biểu diễn m ột giá trị
nguyên.

Định lý
 
1 không áp dụng được khí phương trình đặc trưng có nghiệm kép. Trong
trường hợp đó ta cần sử dụng kết quả của định lý sau.

29

Phân ỉ . Lý íhiívểt ĩổhợp

Đ ịnh lý 2.
 
Cho

C ị ,
 
C
2
 
Ici các lĩầnq s ố thực,
 
C
'2 ^ 0.
 
Giả sử phương trình
 
- C
'|
 
r - c\ -
 
0

có nghiệm kép ì\y Khi đó dãy s ố ịa
 
„ }
 
là nghiệm của côniỊ ĩlìức dệ qui

^«-1 +
 
^n-2

khi và chỉ khi

r/ -
 
0 , 1,
 
ĩrong đó
 
,
 
0 2
 
là cức hằng sei

C h ứ n g m in h . Hoàn toàn tương tự như chứng m inh định lý 1.

T h í d ụ 5. Tim nghiệm cho công thức truy hổi
ứ„ = 6
 
- 9 ứ„.2

v ớ i đ iề u
 
k iệ n
 
đ ầ u
 
0
 
() =
 
]
 
v à
 
c/| =
 
6 .

G iải: Phương trình đặc trưng
 
- 6 r + 9 = 0 có
 
nghiệm kép
 
r =
 
3. Do đó nghiệm của
hệ thức có dạng;

a„ -
 
a, 3"
 
+ 0 2
 
11
 
3".

Để tìm
 
« |, «2 - sử dụng điều kiện đầu ta có

= 1 = ơ , ,

(7, = 6 = «I . 3 + « 2 . 3.

Giải
 
hệ này
 
ta tìm được «1 = 1
 
và
 
Ơ
2
 
= \ .
 
Từ đó nghiệm của hệ thức đã cho là;

a„
 
= 3" +
 
n
 
3".

Định lý 3 sau đây là sự tổng quát hoá kết quả của định lý 1 cho trường hợp hệ thức
đệ qui tuyến tính thuần nhất hệ số hằng
 
h ậ c k > 2.

Định lý 3.
 
Cho
 
C
’|,
 
C j , c„ là các sô'(hực. Giá sử phương trình đặc triúĩg

-
 
C
, /•*■
' -
 
- ... - c, = 0

có k ní>liiệm phân hiệt ì\, ì'
2
 
,
 
ỉ'f..
 
Khi đó dãy sô' { a j
 
là ni>hiệm của hệ thức

+ Cjfl,,., + ...+

khi và chỉ khi

a„
 
= a, /V' +
 
«2
 
/'
2
" +
 
/V'

với
 
/! =
 
0,
 
1, 2
.
trong đó
 
« I ,
 
Ơ2,
 
ơị
 
là các hằng số.

C h ứ n g m in h ;
 
Tương tự như chứng m inh định lý 1.

30

C h ư c /ỉỉí; 2. Bcii
 
t o á n d é h i

T h í dụ 6. Tim nghiệm của hệ thức

a„ =
 
6 ứ„_, - 11
 
+ 6

với điều kiện đầu

= 2 ,
 
ơ ị
 
=
 
5.
 
Ch =
 
15.

G iải; Phươpg trình đặc trưng

-
 
6 r V
 
11 /■
 
- 6 = 0
có 3
 
nghiệm
 
r, = 1,
 
ì
' 2
 
=
 
2, /•, = 3. Vì vậy,
 
nghiệm có dạng

a„
 
= a,
 
1" + «2 2" +
 
3".

Sử dụng các điều kiện đầu ta có hệ phương trình sau đây để xác định các hằng số a ,, Ơ2,

a ,;

í/d = 2 = «I + «2 + a ,

í/,
 
=
 
5 =
 
«I
 
+
 
0 ^ .2
 
+
 
ữ y 3

a ,
 
=
 
15
 
=
 
« I
 
+
 
« 2 -4
 
+
 
« , .9 .

Giải
 
hệ phương trình trên ta ihu được ữ| =
 
1,
 
= -1
 
l à
 
«3 = 2. Vậy nghiệm của hệ

thức đã cho là

a„ =
 
1 - 2" + 2. 3".

C h ú
 
ý: Việc tìm nghiệm của hệ thức (1) trong trườiig hợp tổng quát dẫn về việc giải

m ộ t
 
p h ư ơ n g
 
trìn h b ậ c
 
k\

/
 
- r , / - '
 
- ... - cv
 
=
 
0

m à việc biểu diễn nghiệm của phương trình này qua một số hữu hạn các phép toán, như
đã biết, khôn? phải lúc nào cũng làm được với
 
k > 5
 
(định lý Abel).

2.5. Phương pháp hàm sinh

2.5.1. Hàm sinh và bài toán đếm

G iả sử {/ỉ„ I /? = 0, 1 ,2 , ....Ị
 
là m ột dãy số. Ta viết dãy này như là dãy vô hạn phần tử,
tuy nhiên ta coi rằng nó bao gồm cả trường hợp dãy hữu hạn. N ếu /ỈQ,
 
/?,„ là dãy

hữu hạn, thì ta sẽ biến nó thành dãy vô hạn bằng cách đặt /;,
 
= 0, i > m .

Đ ịn h nghĩa. Hcim sinh
 
ẹ(.v)
 
của dãy s ố
 
Ị
 
h„
 
1/? = 0, 1 ,2 ,....}
 
ỉà chuổi vô hạn

31

Phần ỉ . Lý ĩhuyếi lổ hỢỊ)

00

g ự )
 
=
 
h,,
 
+
 
/ ĩ ị
 
.V
 
+
 
/Ĩ 2
 
+
 
. . .
 
=
 
.

/■=0

Như vậy hàm
 
g{x)
 
sinh ra dãy số đã cho như là dãy các hệ số của nó. N ếu dãy là hữu
hạn thì sẽ tìm được
 
m
 
sao cho
 
= 0, / >
 
m.
 
Trong trường hợp này ẹ(A') là m ột đa ihức
bậc
 
m.

Thí dụ 1.
 
M ột trong những nguồn gốc dẫn đến định nghĩa hàm sinh chính là định lý về
khai triển nhị thức; Hàm

g W
 
= (l +A-)"'
sinh ra dãy các hệ sô' tổ hợp

[h^= C{m, k),
 
Ả-0, 1,...,
 
ni]

bởi vì

(l + x)"* =
 
^ C (w ,Ấ :)x ^ .
/t=0

T h í d ụ 2. Hàm

g(A') = 1/(1-.r)

sinh ra dãy

1 , 1 ,1 , .. .

Dễ dàng chứng m inh điều đó bàng cách thực hiện phép chia:

l / ( l - x ) = 1 + x + x^ + ...

T h í d ụ 3. Với
 
^ > 0, hàm

gix)
 
= 1/(1-X)*

sinh ra dãy

{C { n + k -\,n y .n = 0,
 
1 ,2 ,...} .

Như vậy hệ số thứ
 
n
 
sẽ là số khả năng chọn
 
n
 
vật từ
 
k
 
loại đồ vật. Thực vậy, ta có

l / ( l - x / =[ l / ( l - x ) f = ( l
 
+ x + x^ + ...ý.

Nếu ta khai triển biểu thức này bằng cách thực hiện nhân phá ngoặc, thì số lần xuất hiện
số hạng
 
x"
 
sẽ bằng số nghiệm nguyên không âm của phương trình

í, +
 
¡2
 
+
 
... +
 
t, = n,

rnà ta có thể dé dàng tính được là
 
C{n+k-ỉ , n).

C ỉìiù ĩn íị 2 . B à i to á n dem

V í dụ này có thể gợi ý cho ta cách giai nhieu bãi toán đếm. Chẳng hạn xét hàm sinh

,t>(.v) = ( 1 + .V+ . r + .V
*) (1 -
 
r + . r ) ( 1 + ,v +
 
+ .r’ + x'*).

Giả sử .v",
 
x^',
 
y
 
tương ứng là các số hạng láy từ các thừa sô' thứ nhất, hai, ba của vế phải,
điều đó có nghĩa là 0 < í/ < 3, 0 < /; < 2, 0 < C
' < 4. Khi khai triển vế phải các thừa số này
sẽ cho ta số hạng y , với
 
n = u + h + c.
 
Như vậy hệ số của
 
trong ^ẹ(.v) sẽ là số nghiệm
nguyên không âm của phương trình

/ỉ =
=
 
í/ -
1
 
-
 
h
 
-I-
 
c

thoá mãn

0 < a < 3 , 0 < / ? < 2 ,
 
0 < r < 4 .

Suy ra hệ số này cũng cho ta sô' cách chọn
 
n
 
bông hoa từ 3 bông cúc, 2 bông layơn và 4
bông hổng.

Tất nhiên
 
việc sử dụng hàm
 
sinh để giải bài toán đếm sẽ đòi hỏi nhiều tính toán khi
thực hiện phép nhân các đa thức, và không thích hợp cho việc tính tay. Tuy nhiên, việc

đ ó
 
lạ i c ó
 
t h ể
 
th ự c h iệ n
 
n h a n h
 
c h ó n g
 
trên m á y t ín h , v à
 
vì t h ế h à m
 
s in h
 
s ẽ
 
là m ộ t c ô n g
 
c ụ

hữu hiệu để giải nhiều bài toán đếm trên m áy tính. Hcín nữa hàm sinh sẽ còn là cống cụ
hữu ích để nghiên cứu các bài toán đếm một cách trừu tượng.

Ta dẫn ra m ột sô' khai triển đại sô' rất hay sứ dụng trong việc sử dụng hàm sinh:

//( l- .v ) = A
-^ (1 + .V+ A' + ...) =
 
+ ...

('l-y " ')/(|-.v )=
 
1 +.v + .x' + ... +.v^.
l/(l-.r^ )=
 
1 +,v" + .v'+.v'’ + ...

x/{
 
1
 
= x{
 
I +
 
+ ..v
“
' +
 
+ ...)= .r + x ’ + x“
*+ /
 
+ ...

T h í dụ 4. Có bao nhiêu cách chọn ra
 
n
 
quả từ 4 loại quả: táo, chuối, cam và đào (mỗi
loại đều có số lượng ít ra là /;) m à trong đó
 
có một
 
số chẵn quả
 
táo, số
 
lẻ quả chuối,

không quá 4 quả cam và ít ra 2 quả đào?

G iải. H àm sinh để giải bài toán này là

( 1 +
 
+ ...) (x’ + ,r' + y
 
+ ...)( 1
 
+ ,v +
 
+
 
X*) {x^
 
+
 
+ A
'“
' + ...)

Trong công thức trên có 4 thừa số để đếm số quả táo (các số mũ chẵn), chuối (số mũ
lẻ), cam (chỉ có đến số mũ 4) và đào (số mũ bất đầu từ 2). Hàm sinh sẽ là

J?(.v) = [l/(1-A-^)]
 
[.v/d-A-^)]
 
[(I-A'’)/(l-.v)]
 
[A^/(l-,r)]

33

Phần I . Lý ìỉỉuyếĩ tổ hợp

Câu trả lời là; Số cách cần đếm là hệ số thứ /7 trong khai triển ẹ(.v) dưới dạng chuỗi luỹ
thừa. Tuy là chúng ta không có câu trả lời bằng số, nhưng hàm xây dựng được chứa dữ

liệ u
 
đ ể
 
c ó
 
th ể
 
lậ p
 
trìn h
 
tr ê n
 
m á y
 
tín h
 
đ ư a
 
ra
 
b ả n g
 
đ á p
 
s ố
 
c h o
 
c á c
 
g iá
 
trị
 
c ủ a
 
n
 
m à
 
ta

m ong m uốn.

T rong nhiều trường hợp, việc khai triển hàm sinh dưới dạng chuỗi luỹ thừa có thế’ thực
hiện được bằng tay, chúng ta có thể thu được công thức đếm dưới dạng hiện.

T h í d ụ 5. Tim hàm sinh cho số nghiệm nguvên dương lẻ của phươnp, trình

tị + Í2+
 
... +
 
=
 
lì.

G iải. H àm sinh cần tìm là

Ắ
»
(.ĩ) = u + .r’ + ,r + X + ...)*

= [.
y
(1 + .
v
^+
 
a
-
‘’ + / ’ + ...)]*

= [.V(l-A-^)]‘ = , / ( l - y ỵ .

T h í d ụ 6. Tim hàm sinh cho /?„ là số cách chọn ra /7 quả từ 4 loại quả; táo, chuối, cam
và đào
 
(m ỗi loại đều có số lượng
 
ít ra là
 
n)
 
m à trong đó có m ột số chẩn quả táo, sô'
lượng chuối chia hết cho 5, không quá 4 quả cam và không quá 1 quả đào?

G iải. H àm sinh có dạng

g(x)
 
= ( 1 +
 
+ /
 
+ /
 
+ . . . ) ( ! + A'' + -v"’ + A
-'-’ + ...) ( 1 + .V+
 
+
 
X*)
 
( 1 + A
-)

= [1/(1-A-^)]
 
[l/(l-x ^)]
 
[(l-x V (l-^ )]
 
(1+A-)

= [l/((l-x )(l+ .r)]
 
[l/(l-.v)]
 
(l+.v)

= l/(l-.v)'

Từ đó ta có thể tìm công thức hiện cho lời giải, bởi vì

00
 
00
 
00

n=
ồ
 
Ỉ7
=
0
 
/7=0

V ậy
 
= n +
 
1.

T hí dụ
 
7. Tim hàm sinh cho số cách đổi
 
n
 
(nghìn đồng) sử dụng các loại giấy bạc mệnh
giá
 
1 nghìn đồng, 5 nghìn đồng, 10 nghìn đồng, 50 nghìn đổng (giả thiết là ta có m ột số
lượng không hạn chế mỗi loại giấy bạc).

34

2. Bai toün dem

G iäi. So lugng den cän döi ra loai giäy bac 5 nghm döng phai chia het cho 5, so Itrong
ti^n cän doi ra loai giä'y bac
 
10 nghm dong phäi chia het cho 10, so lugng ti6n cän döi
ra loai giäy bac 50 nghin dong phäi chia het cho 50. VI väy

-
 
( 1
 
+
 
.V +
 
A-^ + . . . )
 
( 1 +
 
A-^ +
 
A- " ’ + . . . )
 
( 1 +
 
A-"'
 
+
 
A - '
 
+
 
. . . )
 
( 1
 
+
 
x ’ "
 
+
 
x ' “ ’ +
 
. . . )

=
 
[ 1 / ( 1 - A - ) ]
 
[ l / ( l . r ) ]
 
[ l / ( l - A - ' " ) ] [ l / ( i - A ' " ’) ] .

2.5.2. H am sinh vä cöng thüc de qui

MiJC näy se trinh bäy phufong phäp häm sinh de tirn cöng tniic dudi dang hien cho so
hang tdng quät ciia däy sö' xäc dinh bai cöng thiic de qui. Nöi dung cüa phuong phäp cö
ihe' trinh bäy nhu sau. G ia sir ta cö
 
|/ ; J
 
lä däy sö dugc xäc dinh theo cöng thüfc de qui.
Xäy dung häm sinh
 
cüa däy sö näy theo cöng thiic

g { x )
 
-
 
//o -f //, A
- + /?2
 
4- ... -
 
.

/=0

Su dung cäc tinh chät cüa däy sö (suy tir cöng thiic de qui xäc dinh nö) ta cö the tim
duac cöng thiic giäi tich cho häm sinh
 
Tir cöng thiic tim duöc ta se khai trien häm
^i*(a') duöi dang chuöi luy ihira, vä tir do tim duöc cöng ihiic cho
 
h„.

Truöc het ta dua ra mot sö phep toän döi vai häm sinh. Giä sCr

O.
 
X '

/(.v)=
 
,M .v)=

/-0
 
/=0

lä hai häm sinh cön a iä sö thuc. khi do

/=0

X
i

/=0

Tich Cösi cüa hai häm sinh
 
g{.x) va
 
/ (
 
a
 
) :

trong dö

f(x\i'{x)=
 
,

/=0

k

"k =
 
ö(i
 
b,
 
+
 
a,
 
+ ... +
 
a, h, =
 
.

/=0

35

Phần ỉ . Lý ìhuyếí ìổ hợp

00

Từ giải tích ta biết rằng nếu chuỗi
 
^ẹ(A') =
 
hội tụ ở lân cận điểm 0 thì lổng của nó

/=0

g { x )
 
lu ô n
 
là h à m
 
g iả i tíc h
 
tr o n g lâ n c ậ n
 
n à y v à

h, = f \ 0 ) / k \ , k = 0,
 
1,...

co

Khi đó chuỗi
 
y ’
 
hịX^
 
chính
 
là khai Iriển
 
M acloren
 
của hàm
 
^(x).
 
Như vậy có
 
một

¡^0

tương ứng 1-1 giữa m ột hàm giải tích và m ột chuỗi hội tụ trong lân cận 0.

Trong việc áp dụng hàm sinh ta thường sư dụng cống thức sau:

1 /(1 -« )" =
 
ỵ c i , _ ,

k=0

m à trường hợp riêng của nó là

1/(1 -
 
rx) =
 
\ + r x + r^x^ +
 
x ’ + ....

T h í dụ 1. Giải công thức đệ qui

/ì« = 4 /.'„.2,

h, = 0 ,h , = \.

G iải.
 
Gọi
 
ịỉix)
 
=
 
/í(, + /ỉ| .r +
 
hj
 
+ ... là hàm sinh của
 
dãy số cần
 
tìm.
 
Ta có

g(x) =
 
+
 
/ỉ| .ĩ + /Ỉ
2
 
+ ... + /ỉ„ y
 
+ ...

-4
 
g{x) = -A h¡^ -
 
4/ỉ| r* - ... - 4/ỉ„_2 y
 
- ...

Do /ỉ„ = 4 /ỉ„.2 và
 
= Q, h ị =
 
1, nên cộng hai đẳng thức trên ta thu được

^(x) - 4
 
g(x)
 
= /ỉo + /ỉ, X = X.

hay

g ự ) = xH
 
1- 4x") = l/( 1 -
 
2x){
 
1 +
 
2x).

Sử dụng phép tách phân thức, ta viết g(x) dưới dạng

g{x)
 
= a/( 1 -
 
2x) + b/(\ + 2x),

trong
 
đó a \ à h
 
]à các hằng số cần xấc định. Dễ dàng tính được
 
a = ỉ/4 và h =
 
-1/4. Từ
đó ta có

36

C l ì U ơ i ì Ị ’
 
2

. H à i
 
t o á n
 
d ê h i

.í?(.v)= -^[1/(1 - 2 .r ) - l / ( l +2,v)l
4

Vì vậy

"^k =
 
0

h , =
 
- [ 2 ^ - ( - 2 ) %
 
k = 0 ,
 
1 , . . . .

4

Thí dụ 2.
 
Dãy số
 
Fibonaci
 
(Leonardo di Fisa hav Fibonaci (quáng ì 170 - 1226) là nhà
toán học Ý). Dãy sô' Fibonaci là dãy sô được xác định bởi công thức đệ qui

L
 
+ L - 2 , n >
 
2,

Ta sẽ tìm công thức cho số hạng tổng quát của dãy số nhờ phưoìig pháp hàm sinh.

Xét hàm sinh

Ta có

Vậy
suy ra

fu )=
 
Ì / , . » " -

/7=
 
0

£ / „ * " = / ; , + / . .V +
 
£ / „ . r "

n = 0
 
r i ^ l

/7
 
= 2

= /o + /|- '^
 
+ 4
 
/^(-V) - 1) +

F { x ) .

+ U ' (
 
+
 
Ă F {
 
x
 
) - \ )
 
+ .
x
 
^ F {
 
x
 
),

1

Fix)
 
-

-
 
x
 
-
 
a
-2

Ta có (1- A
‘ -
 
= (1 -
 
a x )
 
(1 + /?.v), với
 
a =
 
^
 
Ị3=
 
'
 
^

V iết lại
 
F{x)
 
dưới dạng

\ - a x
 
] - / k

37

Plữin I . Lý thuyết tô'hợp

ta tìm được
 
A = a /{ a - /ỉ), B = -J3/(a- p).
 
Do đó

1

Từ đó

F{x) =
 
a - p

______
 
l

\ - a x
 
\ - /3x

=
0

J
 
ẫ

a - p
 
“
 
V5

1 1 . ^ 1

2
\
 
/

Ẩ
r+1
 
/
 
/—\ ^ +

! - V 5 "

T h í dụ 3.
 
S ố C a ta la n (Charles Catalan (1814-1894) là nhà toán học Bỉ)

Sô' Catalan )à một con sô' quan trọng trong lổ hợp, là lời giải của nhiều bài toán đếm tổ
hợp quan trọng.
 
Ta dần ra ở đây m ột trong những bài toán như vậy. Xét việc tính tích
của các rna trận:

A
 
=
 
AfẠị ... A„.

Do tích m a trận có tính chất kết hợp nên có nhiều cách
 
để thực hiện việc
 
tính tích trên.

Ví dụ khi
 
n =
 
3, ta có thể thực hiện việc tính tích

A -
 
AịẠịẢ2Aj

theo 5 cách sau

/l =
 
= AẬ (A ,A ,)A ,)

=
 
{ A M A A
 
ĩ
) = {A,{A,A,))Ả,
 
=

Gọi
 
c„
 
là số cách thực hiện việc tính
 
A.
 
D ễ thấy

Ca =
 
1,
 
c, = I,

Nếu ta đặt dấu ngoặc phân tách đầu tiên vào sau thừa số
 
Af.:

A = (A ,4 ,

thì do có q
 
cách thực hiện việc tính /4oA| ...
 
Aị.
 
và
 
cách thực hiện việc tính
 
Ai.^ịAf
. ^ 2

...A„ ,
 
suy ra có q
 
cách tính
 
A
 
trong trường hợp này. Do dấu
 
ngoặc phân tách
 
đáu

tiên có thể đặt sau
 
Aị, i = 0,
 
1,
 
/7-1, nên ta thu được

/ 7 - 1

^
■
1
1~
 
^ ^ ^ k ^ n - k ~ ị
 
■

k=0

Xét hàm sinh của dãy số {c„}:
 
C(jf) =
 
^ C ị x '
 
.
 
Ta có

/=0

38

C h ư ơ n íỊ 2. B à i t o á n d c m

C V )---
 
z
 
+

m- ữ
 
/7=0
 
/-^Ovíỉ^O
 
)
 
/'=0

Vì thế

C (.v ) - .v e ( ,v ) + ỉ.

Giải phương trình này theo C(.v) ta thu được

c t v , .
 
.V

Ta phân tích
 
J \ x ) -
 
Vl - 4x
 
thành chuỗi dựa vào công thức Taylor

/ ( x ) = / ( 0 ) + X

Ta có

dx

( 1 - 4
 
x
)
 
2 = ị

k\

X
 
.

- ~ k ^ \
 
. . .

( l - 4 x ) 2
 
( - 4 ) ^

vì th ế

i - / t
 
1-A

= - 2 ^ 1 .3 ...(2yt - 3)(1 - 4 x )2
 
=
 
- 2 ( k - l V - C ị - ^ 2
 
^

A ' - ) = > - ^ Ễ 1
 
c
 
2
‘; V
 
-

k-^r

Thay vào công thức tính
 
C(
a
'),
 
trong dó rõ ràng cán chọn nghiệm
 
-ỉ
--------------
 
để phù

X

hợp với điều kiện C'„> 0, ta thu được

^
 
/-A
 
. k

co
 
,
 
00
 
i

e w
 
= Ễ
 
j q V
 
' 2 - ‘ = Ễ
 
~
 
c

k = r
 
2k

Từ đó ta tìm được

k ^ \

Đ ể ý đến công thức Stirling tính gần đúng
 
n\

n \^ ^íĩmỉ

2k

39

Phầỉì ỉ. Lý ĩhuvểĩ tổ hợp

ta có thể tính gần đúng
 
theo công thức:

2.6. Liệt kê

Việc tìm m ột công thức cho kết quả đếm , ngay cả trong trường hợp công Ihức truy hổi,
không phải là dễ thực hiện. Cho đến nay, còn rất nhiều bài toán đếm
 
chưa có lời giải
dưới dạng một cỏnổ thức. Đối với những bài toán như vậv, người ta chỉ còn cách chỉ ra
m ột phương pháp liệt kê, theo đó có thể đi qua tất cả các cấu hình cần đếm. Rõ ràng
bản thân phưcfng pháp liệt kê không chỉ ra được m ột kết q uả cụ thể nào, nhưng qua nó,
người ta có ihể lập trình cho máy tính điện tử để nhờ m áy tính ”đếm " hộ.

Đế thí dụ, ta xét một cấu hình tổ hợp nổi tiếng do hàng loạt những công trình xunR
quanh nó và cho đến nay còn nhiều vấn đề cần giải quyết, đó là các hình chữ nhật la
tinh.

Giả sử
 
s
 
là m ột
 
K hông m ất tính tổng quát, la có thể giả thiết
 
s
 
là tập ị 1, 2,

n } .
 
M ộ ĩ h ì n h
 
c h ữ n h ậ t la
 
t i n h
 
trên 5
 
là m ộ t b ả n g / ; d ò n g ,
 
C
Ị
 
c ộ t , s a o
 
c h o
 
m ỗ i d ò n g
 
c ủ a

nó là m ột chỉnh hợp không lặp chập
 
q
 
của
 
s
 
và mỗi cột của nó là m ột chỉnh hợp không
lặp chập
 
p
 
của
 
s.

Theo định nghĩa, la có
 
p < n, q < n.
 
Đ ặc biệt, trong trường hợp
 
q
 
= /1, m ỗi dòng
của hình chữ nhật la tinh
 
là m ột hoán vị của s , sao cho không có m ột cột nào được chứa
phần từ lặp lại. Hình chữ nhặl la tinh dạng này được gọi là
 
chuẩn
 
nếu dòng đầu của nó
là hoán vị 1
 
, 2
 
,
 
n.

T hí dụ

1 2
 
3 4
 
5 6
 
7

2
 
3
 
4 5
 
6 7
 
1

3
 
4
 
5 6
 
7 1
 
2

là m ột hình chữ nhật la tinh chuẩn trên tập 5 = {1, 2, 3, 4, 5, 6, 7 Ị.

Gọi
 
L(p, n)
 
là số hình chữ nhật la tinh p x /7, còn
 
Kịp, n)
 
là số hình chữ nhật la tinh
chuẩn p x /7. Ta có

L(y;,/ỉ)
 
=
 
n \ K { j h n )

Dễ dàng thấy rằng, số m ất thứ tự
 
là số các hình chữ nhật la tinh chuẩn 2x /7,
còn số phân bố
 
là số các hình chữ nhật la tinh chuẩn 3 x /1, với 2 dòng đầu là

40

Chương 2. Bcỉì toán đếm

n~ì

n

R iordan J. (1946) đã chứng minh công thức

K O , n )
 
=
 
Ỳ C - Đ n - , . D k . U „ - 2 K

k=
0

trong đó
 
m
 
=
 
[n!2], U g -
 
1.

Bài toán đếm số hình chữ nhật la tinh với sô' dòng nhiều hơn cho đến nay chưa được
giải quyết. N gười ta m ới chỉ đưa ra được m ột vài dạng tiệm cận của
 
L(p, n)
 
(Erdos p.
(1946), Y am am oto K. (1951)).

Nếu
 
p = q -
 
n,
 
thì hình chữ nhật la tinh được gọi là hình vuông la tinh. M ột hình
vuông la tinh cấp
 
n
 
được gọi là chuẩn nếu có dòng đầu và cột đầu là hoán vị 1
 
2 ... n.

Thí dụ m ột hình vuông la tinh chuẩn cấp 7

6
 
7

7
 
1

Gọi /„ là số hình vuông la tinh như
 
thế, IH C(3

L { n , n ) ^ n \ [ n - \ ) \ ị „ .

Việc tìm m ột công thức cho /„ đến nay còn để ngỏ. Nhữiig công thức tính
 
K{p, n)
 
cho
thấy rằng điều này không phải dễ. Tuy nhiên ta có thể lập m ột chương trình cho m áy
tính, liệt kê tất cả các hình vuông la tinh chuẩn cấp
 
n.
 
Dưới đây là m ột vài giá trị tính
được:

n
 
1
 
2
 
3
 
4
 
5
 
6
 
7

1
 
1
 
1
 
4
 
56
 
9408
 
16942080

41

Phcin Ị . L \ íhuyết ĩổ ỉiợp

Bài tập

N guyên lý cộng và N guyên lý nhán

1. Cho 5 ký tự A, B, c , D, E.

(a) Có bao nhiêu xâu ký tự độ dài 4 có thể lập được từ các ký tư đã cho. nếu không
cho phép lặp lại ký tự?

(b) Có bao nhiêu xâu ký tự trong (a) bắt đầu từ B?

(c) Có bao nhiêu xâu ký tự trong (a) không bắt đầu từ B?

2. Cho
 
X
 
là tập
 
n
 
phần tử. Có bao nhiêu bộ có thứ lự
 
{A, B)
 
thoả mãn A
 
Ç
 
ß C X ?

3. Đoàn chủ tịch của m ột cuộc họp gỏm 6 người A, B, c , D, E, F cần bầu ra Ban lãnh
đạo gồm
 
1 chủ tịch, 1 phó chủ tịch và 1 thư ký.

(a) Hỏi có
 
nhiêu cách khác nhau?

(b) Có bao nhiêu cách m à trong đó m ột trong hai người A, B
 
là chủ tịch?

(c) Có bao nhiêu cách m à trong đó E là thành viên của Ban lãnh đạo?

(d) Có bao nhiêu cách m à trong đó D và F là thành viên của Ban lãnh đạo?

4.
 
Có bao nhiêu xâu nhị phân độ dài 10 bắt đầu bởi hoặc là 101 hoặc là 111?

5. Có 10 cuốn sách khác nhau, trong đó có 5 cuốn sách thuộc lĩnh vực T in học, 3 cuốn

sách
 
thuộc lĩnh vực toán học và 2 cuốn sách về lĩnh vực nghệ
 
thuật.
 
Hỏi có bao
 
nhiêu

cách chọn ra 2 cuốn sách có nội dung thuộc các lĩnh vực khác nhau từ
 
10 cuốn sách
 
nói

trên?

6. Có 10 cuốn sách khác nhau, trong đó có 5 cuốn sách thuộc lĩnh vực T in học, 3 cuốn
sách
 
thuộc lĩnh vực toán học và 2 cuốn sách về lĩnh vực nghệ thuật.

(a) Hỏi có bao nhiêu cách xếp 10 cuốn sách này lên 1 giá sách?

(b) Hỏi có bao nhiêu cách xếp
 
10 cuốn sách này lên
 
1 giá sách sao cho tất cả các
cuốn sách Tin học được xếp ở phía trái giá sách còn hai cuốn sách về nghệ thuật được
xếp bên phải?

(c) Hỏi có bao nhiêu cách xếp
 
10 cuốn sách này lên
 
1 giá sách sao cho tất cả các
cuốn sách thuộc cùng lĩnh vực được xếp cạnh nhau?

(d) Hỏi có bao nhiêu cách xếp
 
10 cuốn sách này lên
 
1 giá sách sao cho hai cuốn
sách nghệ thuật không được xếp cạnh nhau?

7. Có bao nhiêu số có bốn chữ số có thể tạo thành từ các chữ số 0, 1, 2, 3 , 4, 5 thoả mãn

(a) không có chữ số nào được lặp lại,

(b) các chữ số được lặp lại,

(c) các số chẩn trong (b).

42

ChươnỊị 2. Bài toán cUín

8. Trên cạnh bên của một tam giác ta lấy
 
n
 
điểm, trên cạnh bên thứ hai lấy
 
m
 
điểm. M ỗi
m ột trong hai đỉnh của cạnh đáy được nối với các điểm được chọn trên cạnh bên đối
diện bởi các đường thẳng. Hỏi

(a) Có bao nhiêu giao điểm của các đường thẳng nằm trong đa giác?

(b) Các đường thẳng chia tam giác ra làm bao nhiêu phần?

9. M ột cán bộ tin học do đãng trí nên đã quên mật khẩu của phần m ềm m áy tính của
m ình. M ay m án là anh ta CÒ.I nhớ mật khẩu có dạng NNN-X>C, trong đó MỈ\N lá các
chữ số, còn X X ỉà các chữ cái lấy trona bảng chữ cái có 26 chữ. H ỏi trong trường hiỢp
xấu nhất cần phải thử bao nhiêu mật khấu để có thể tìm iại mật khẩu đã đật?

10. Hỏi có bao nhiêu bộ có thứ tự gồm 3 tập Xị, X2, X,
 
thoả mãn

X,
 
=
 
( 1 ,2 ,3 ,4 , 5 ,6 ,7 . 8 I
 
và
 
X, 0 X3 0 X3 = 0 .

V í dụ: Hai bộ

x , =
 
{ 1 ,2 ,3 1 ,
 
|1 , 4 ,8 Ị , X , =
 
1 2 ,5 ,6 ,7 )

và

x, = { 1 ,4 ,8 1 ,
 
( 1 ,2 ,3 1 ,
 
{ 2 ,5 ,6 ,7 1

được coi là khác nhau.

Chỉnh hợp, H oán vị, Tổ họrp

11. Có bao nhiêu hoán vị của các chữ cái trong XÛU ABCDEF m à trong đó có chứa xâu
con D EF?

12. Có bao nhiêu hoán vị của các chữ cái trong xâu ABCDEF m à trong đó có chứa ba
chữ cái D, E, F đứng cạnh nhau?

13. Có bao nhiêu cách xếp 6 người vào ngồi quanh cái bàn tròn (hai cách xếp không coi
là khác nhau nếu chúng có thể thu được từ nhau bởi phép quay bàn tròn)?

14. Có bao nhiêu cách xếp 7 học sinh nam và 5 học sinh nữ ra thành m ột hàng ngang
sao cho không có hai nữ sinh nào đứng cạnh nhau?

15. Có bao nhiêu xâu nhị phân độ dài 32 mà trong đó có đúng 6 số 1?

16. Có bao nhiẽu xâu ký tự có thể tạo được từ các chữ cái

MISSISSIPPI

17. Có 8 cuốn sách khác nhau. Hỏi có bao nhiêu cách phân các cuốn sách này cho 3
học sinh: M ơ, M ai, M ận sao cho M ơ nhận được 4 cuốn còn M ai và M ận mỗi người
nhân hai cuốn?

43

Phần 1. Lý thuyết tổ hợp

18. Giả sử
 
X
 
là tập
 
t
 
phần tử. Ta gọi
 
tổ hợp lặp
 
chập
 
k
 
từ
 
t
 
phần tử của X là m ột bộ không
có thứ tự gồm
 
k
 
thành phần lấy từ các phần tử của X

Ví dụ:
 
b,
 
c Ị, các tổ hợp lặp chập 2 từ các phần tử c ủ a X là

{a a), (a b), (a c), {b b), (b c),
 
( c c ) .

Chứng m inh rằng số tổ hợp lặp chập
 
k
 
từ
 
t
 
là:

C ( Ắ : ^ - M ,M ) =
 
C { Ấ :f ^ l,Ẩ : ).

19. Có 3 rỏ đựng các quả cầu xanh, đỏ, tím . M ỗi giỏ chỉ chứa các quả cầu cùng m ầu và
mỗi giỏ chứa ú ra là 8 quả cầu.

(a) Có bao nhiêu cách chọn ra 8 quả cầu?

(b) Có bao nhiêu cách chọn ra 8 quả cầu m à trong đó có ít nhất niộĩ quả cầu đỏ,
m ột quả cầu xanh, 1 quả cầu tím ?

20. Xét phircmg trình:

X|
 
+ X
2
 
+
 
X3 + X4
 
= 29.

(a)
 
Hỏi phương trình đã cho có bao nhiêu nghiệm nguyên dưcmg?

(b)
 
H ỏi phương trình đã cho có bao nhiêu nghiệm nguyên không âm ?

N guyên lý bù trừ

1.
 
Hỏi trong đoạn từ 1 đến 1000 có bao nhiêu số hoặc là số lẻ hoặc là số chính phương

2. Có bao nhiêu xâu nhị phân độ dài 8 không chứa 6 sô' 0 liền nhau?

3. Có bao nhiêu số có 10 chữ số với các chữ số chỉ là 1, 2, 3 m à trong đó m ỗi chữ số 1,

2, 3 có m ặt ít nhất 1 lần?

4. Có bao nhiêu xâu nhị phân độ dài 10 hoặc là bắt đầu bởi 3 số 1, hoặc là kết thúc bởi 4
số 0 ?

5. Có bao nhiêu sô' nguyên dương nhỏ hơn
 
10000 chia hết cho 7 nhưng không chia hết
cho 5 và 2?

6 . Có bao nhiêu hoán vị của các số tự nhiên
 
1,2,...,10 m à trong đó 3 số
 
1, 2, 3 không
đứng cạnh nhau theo thứ tự tâng dần?

7. H ỏi phương trình

44

Clìiíơní’ 2. Bài toán đếm

Xị
 
+
 
X
2
 
+ X, + X4 = 29
có bao nhiêu nghiệm nguyên không âm thoả mãn

X| < 3 ,
 
X
2
 
< 12,
 
,
1 : 3
 
<
 
5, X
4
 
< ỈO .

8. M ột lớp gồm 50 học sinh làm bài kiểm tra gồm
 
3câu hỏi. Biết rằng
 
m ỗi học
 
sinh làm

được ít nhất 1 câu và số học sinh làm được câu 1
 
là
 
40, câu 2 là 35,
 
câu 3
 
là 30. Chứng

m in h r l n g
 
s ố h ọ c
 
s in h là m
 
đ ư ơ c c ẻ
 
3 c â u k h ô n g V'jợt quá 2 7

Hệ thức truy hồi

1. Giải các hệ thức truy hồi sau

(a)
 
a„ = 2a„.ị , n >
 
ỉ,

ơo^-3.

(b)
 
a„
 
= 5 ứ„., - 6
 
a
 
, „ 2
 
, n > 2 ,

ứo= l , a , = 0 .

(c)
 
a„ =
 
4 a„_, - 4
 
, n > 2 ,

Ũ
Q
 
= 6, a, = 8.

(d)
 
a„
 
=
 
4 a,„2 , « > 2,
ứo = 0, ứ| = 4.

(e)
 
a„ = a J A
 
, n > 2 ,

a o = l , ứ, = 0 .

2. Lập công thức truy hồi cho
 
s„
 
là số cách chia m ột hình chữ nhật kích thước 2 X « ra
thành các hình chữ nhật con có cạilh sủĩlg song với cạnh của hình chữ nhật đã cho và
với kích thước là 1 X 2, 2 X 1, 2 X 2. Giải hệ thức thu được.

3. Lập công thức truy hồi để đếm
 
F„
 
là số xâu nhị phân độ dài n không chứa ba số 0 liên
tiếp. Từ đó tính
 
F
 
ịq
.

4.
 
Lập công thức truy hồi để đếm
 
Q„
 
là sô' chỉnh hợp lặp chập
 
n
 
từ ba chữ sô' 0,
 
1, 2
không chứa hoặc là hai số 0 liên tiếp
 
h o ặ c
 
là hai số 1 liên tiếp. Từ đó tính
 
Qf,.
 
Giải hệ
thức thu đươc.

5. Xét m a trận vuông

(Q
 
1]

A =

a) Chứng m inh rằng

45

Phần I. Lý thuvết tổ hợp

A'’ =
 
F
 
F ^
^
 
«-1

F
 
F
n
 
^
 
/7fl y

trong đó
 
F,,
 
là số hạng thứ
 
n
 
của dày số Fibonaci.

b) Tính det(/i"). Từ đó suy ra công thức:
 
F„.ịF„ -
 
( F , f =
 
(-1)".

H àm sinh

1. V iết công thức dưới dạng giải tích cho hàm sinh của
 
c á c
 
dãy số sau

a )
 
a„ = y \
 
/ 2
 
= 0 ,
 
1 , 2 , . . .

b )
 
Ịí^o, ¿/¡,02^
 
^
 
ÍO,
 
1 , 0 ,
 
1 , . . . ’
}

2. Tim công thức cho số hạng tổng quát
 
của dãy số j a^l có hàm sinh là

a)
 
G{x)
 
= 1/(1 - 2x);

b) ơ(A-)= 1/(1 - x ) ^

c )ơ (.v )=
 
1/(1
 
+ x - 2 x ^ ) .

3. Sử dụng hàm sinh để tìm công thức dưới dạng hiện cho dãy số cho bởi công thức đệ
qui sau đây:

a)
 
=
 
a„ + 2,Oo =
 
-3;

b) 2 a „ „ = a „
 
+ a „ .„ũ o = 0 , a , = 1;

c)
 
a
„^2
 
=
 
- 2a„ + 2(3)", ứo = 1;
 
^
 
1
 
= 2.

46

ChươíỊí^ 3. B ai ỉoún ton ỉui

3

BÀI TOÁN TỒN TẠI

3.1. Giới thiệu bài toán

Trong m ục trước, ta đã tập Irung chú ý vào việc đếm sộ các cấu hình tổ hợp (số phần tử
của cấc đối tượng tố hợp)
 
thoa màn nhừng tính chấí nào đó, chẳng hạn đếm số tổ hợp,
chỉnh hợp,
 
hoán vị, ... Trong nhữim bài loan
 
đó sự lổn
 
tại của các cấu hình
 
là hiển
nhiên và công việc chính là đếm số phán tứ ihoả mãn tính chất đặt ra, Tuy nhiên, trong
rất nhiều bài toán tổ hợp, việc chí ra
 
sự
 
lồn tại của m ột cấu hình thoả niãn các tính chất
cho trước là hết sức khó khăn. Cháng hạn, khi một kỳ thủ cán phải tính toán các nước đi
của m ình để giải
 
đáp xem
 
liệu có khả nãim thắng hay không, hoặc là một người giải

m ậ t m ã c ầ n
 
tìm
 
k iế m
 
c h ìa
 
k h o á
 
giải
 
c h o m ộ t b ứ c m ậ t in ã
 
m à a n h
 
ta k h ô n g
 
b iế t liệ u
 
đ â y

có đúng là bức điện thật được mã hoá của đối phương hay không, hay chỉ là bức m ật mã
giả của đối phương tung ra nhằm đảm bảo an toàn cho bức điện thật
 
N hư vậy, trong
tổ hợp xuất hiện một vấn đề thứ hai rất quan trọng là: xét sự tồn tại của các cấu hình tổ
hợp với các tính chất cho trước. Các bài toán thuộc dạng này được gọi là các
 
bài toán

ĩổn tại tổ hợp.

47

M ột bài toán tồn tại tổ hợp xem như giải xong nếu hoặc chỉ ra một cách xây dựng
cấu hình, hoặc chứng m inh rằng chúng không có. Tuy nhiên cả hai khả năng đều không
phải dễ. Đ ể thấy rõ sự phức tạp của vấn đề, dưới đây ta sẽ xét một sô' bài toán tổn tại tổ
hợp cổ điển nổi tiếng.

3.1.1. B ài to á n về 36 sĩ q u a n

Bài toán này được Euler đế nghị, nội dung của nó như sau: có m ột lẩn người ta triệu tập
từ
 
6 trung đoàn m ỗi trung đoàn 6 sĩ quan thuộc 6 cấp bậc khác nhau; thiếu úy, trung
uý, thượng uý, đại uý, thiếu tá, trung tá về tham gia duyệt binh ở sư đoàn bộ. Hỏi rằng
có thể xếp 36 sĩ quan này thành m ột đội ngũ hình vuông sao cho trong mỗi m ột hàng
ngang
 
cũng như m ỗi m ột hàng dọc đều có đại diện của cả 6 trung đoàn và của cả 6 cấp
bậc.

Để đơn giản ta sẽ dùng các chữ cái in hoa A, B, c , D, E, F để chỉ các phiên hiệu
trung đoàn
 
còn các chữ cái thường a, b, c, d, e, f
 
để chỉ các cấp bậc. Bài toán này có
thể tổng quát hoá nếu thay con số
 
6 bởi
 
n.
 
Trong trường hợp
 
n
 
= 4, m ột lời giải của bài
toán 16 sỹ quan là

Ab
 
Dd Ba Cc

Bc
 
Ca Ad Db

Cd
 
Bb Dc Aa

Da
 
Ac Cb Bd

M ột lời giải trong trường hợp
 
« = 5 là

A a
 
Bb Cc Dd
 
Ee

Cd
 
De Ea Ab
 
Bc

Eb
 
Ac Bd Ce
 
D a

Be
 
Ca Db Ec
 
Ad

Dc
 
Ed Ae Ba
 
Cb

D o lời giải của bài toán có thể biểu diễn bởi 2 hình vuông với các chữ cái la tinh
hoa và thường chồng cạnh nhau nên bài toán tổng quát đặt ra còn được biết dưới tên gọi
bài toán về
 
hình vuông la tinh trực giao.
 
Trong hai thí dụ trên ta có hình vuông la tinh
trực giao cấp 4 và 5.

E uler đã m ất rất nhiều công sức để tìm lời giải cho bài toán 36 sĩ quan thế nhưng
ông đã không thành công. Vì vậy ông đã đề ra giả thuyết là cách xếp như vậy không tồn
tại.
 
G iả thuyết này
 
được nhà toán học
 
Pháp Tarri chứng m inh năm
 
1901
 
bằng cách
duyệt tất cả m ọi khả năng xếp.
 
Euler căn cứ vào sự không tồn tại lời giải khi
 
n=2
 
và
/2=6 còn đề ra m ột giả thuyết tổng quát hcm là: không tồn tại hình vuông la tinh trực
giao cấp
 
n = Ak + 2.
 
G iả thuyết này đã tồn tại suốt hai th ế kỷ, mãi đến năm
 
1960 ba
nhà toán học M ỹ là Boce, Parker, Srikanda mới chỉ ra được m ột lời giải với
 
n =
 
10
 
và

Phẩn I . Lý thuyết tổ hợp

48

Chương 3. Bài toún tổn tại

sau đó chỉ ra phương pháp xây dựng
 
hình vuông la tinh trực giao cho m ọi
 
n = 4 k + 2,

với
 
Ả
' > 1.

Tưởng chừng bài toán đặt ra chỉ có ý nghĩa thuần tuý của m ột bài toán đố hóc búa
thử trí tuệ con người. T hế nhưng gần đây người ta đã phát hiện những ứng dụng quan
trọng của vấn đề trên vào quy hoạch thực nghiệm , sắp xếp các lịch thi đấu trong các
giải cờ quốc tế, hình học xạ ả n h ,...

3.1.2. Bài toán 4 mầu

Có những bài toán m à nội dung của nó có thể giải thích cho bất kỳ ai, tuy nhiên lời giải
của nó thì ai cũng có thể thử tìm, nhưng m à khó có thể tìm được. N goài định lý Ferm at
thì bài toán 4 m àu là một bài toán như vậy, Bài toán có thể phát biểu trực quan như sau:
chứng m inh rằng m ọi bản đồ trên m ặt phẳng đều có thể tô bằng 4 m àu sao cho không
có hai nước láng giềng nào lại bị tô bởi cùng một màu. Chú ý rằng, ta xem như m ỗi
nước là m ột vùng liên thông và hai nước được gọi là láng giềng nếu chúng có chung
biên giới là m ột đường liên tục.

H ình 1.
 
Bản đồ không tô được bởi ít hcm 4 m ầu

Con số 4 không phải là ngẫu nhiên. Người ta đã chứng m inh được rằng m ọi bản đồ
đều được tô với số m ầu lớn hơn 4, còn với sô' mầu ít hơn 4 thì không tô được, chẳng hạn
bản đồ gồm 4 nước trên hình 1 không thể tô được với số
 
m ầu ít hcm 4.

Bài toán này xuất hiện vào khoảng những năm
 
1850-1852 từ m ột nhà buôn người
A nh là Gazri khi tô bản đồ hành chính nước Anh đã cố gắng chứng m inh rằng nó có thể
tô bằng 4 m àu. Sau đó, năm 1852 ông ta đã viết thư cho De M organ để thông báo về giả
thuyết này. N ăm
 
1878, K eli trong m ột bài báo đăng ở Tuyển tập các công trình của Hội
toán học A nh có hỏi rằng bài toán này đã được giải quyết hay chưa? T ừ đó bài toán trở
thành
 
nổi
 
tiếng, và trong
 
suốt hơn
 
m ột th ế kỷ qua đã có
 
rất nhiều
 
người làm
 
toán,
nghiệp dư cũng như chuyên nghiệp, đã cố gắng chứng minh giả thuyết này. Tuy nhiên

49

Phơn ỉ . Lý ỉhuyếí tổ hợp

mãi đến năm
 
1976 hai nhà toán học Mỹ là K.Appel và W .H aken mới chứiìg m inh được
giả thuyết này bàng lĩiáy lính điện tử. Tất nhiên m ột chứng minh với sự giúp đỡ của
m áy tính điện tử không thực sự thoả mãn được nhu cầu của công chúng muốn kiểm tra
tính đúng đắn của cách chứng mình. Vì vạy, chính hai tác giả trên vào cuối những năm
1990 đã cho công bố m ột cuốn sách trình bằy về phương pháp chứng minh của mình
(cuốn sách dày trên 800 trang). C ũns vào những nầm cuối của thế kỷ 20, một nhóm các
nhà toán học Mv đã đưa ra m ột chứng minh
 
cỏ ĩh ể k iế m ĩra hằỉìíỉ (ay\
 
Rất tiếc là chứng
m inh này cũng khòng phải là đơn giản. Cho đến nay các nhà toán học vẫn đang nổ lực
nghiên cứu để tìm ra m ột cách chứng minh dể hiểu như bản thân nội dune của bài toán.

3,1.3. H ình lục giác thần bí

Nãm
 
1910 Clifford A dam s đề ra bài toán hình
 
lục GÌác thần bí sau: trên
 
19 ó lục eiác
(xem hình vẽ ở dưới) hãy điền vào các số từ 1 đến 19 sao cho tổng theo 6 hướng của lục

giác ỉà bằng nhau (và đều bằng 38).

Hình
 
2. Hình lục giác thần bí

Sau 47 năm trời kiên nhẫn cuối cùng ông ta đã tìm được lời giải. Sau đó vì sơ ý
đánh mất bản thảo ông ta đã tốn thêm 5 nãm
 
để khôi phục lại. N ãm
 
1962 A dam s đã
công bố lời giải đó (xem hình 2 ).

Thật không thể ngờ là đó là lời giải duy nhất (nếu không lính đên các lời giải sai
khác nhau bởi phép biến hình dơn giản),

3.1.4. Bài toán chọn
 
2n
 
điểm trén lưới
 
n x n
 
điểm

Cho một lưới ô vuông gồm
 
n xn
 
điểm , Hỏi có thể chọn trong số chúng
 
2n
 
điểm , sao cho
không có 3 điểm được chọn nào là thẳng hàng hay không?
 
Hiện nay người ta mới biết
được rấl ít về lời giải của bài toán trong những lình huống không tầm thường. Câu hỏi

50

ChU(//i}>
 
3
 
. B à i Ị
 
oán ỉỏn lạ i

về sự tổn tại của lời giải của bài toán với những giá trị lớn của
 
ỉì
 
vẫn còn để ngỏ. Hình 3
cho
 
một lời giải với
 
n =
 
12:

Ị

Hình 3.
 
M ột lời giải bài toán của bài toán với /7 = 1 2

3.2. Phương pháp phản chứng

M ột trong những cách giải bài toán tồn tại là dùng lập luận phản chứng: giả thiết điều

đ ịn h
 
c h ứ n g
 
m in h
 
là s a i,
 
t ừ
 
đ ó d á n đ ế n
 
m áu th u ẫn .

T hí dụ
 
1.
 
Cho 7 đoạn thẳng có dộ dài lớn hơn
 
10 và nhỏ hơn
 
100. Chứng minh rằng
luôn tìm được 3 đoạn để có thể ghép lliànli inột tam giác.

G iải: Chú ý rằng, cần và đủ để 3 đoạn có thế ghép thành m ột tam giác là tổng độ
 
dài

của 2 đoạn nhỏ phải lớn hơn độ dài của doạn lớn, ta sắp các đoạn đã cho theo thứ tự

t ă n g
 
d ầ n
 
c ủ a
 
đ ộ
 
d à i rt|,
 
Ü
2
 
,
 
a-i
 
v à c h ứ n g
 
m i n h
 
rằ n g
 
tro n g
 
d ã y
 
đ ã
 
x ế p
 
lu ô n
 
tìm
 
đ ư ợ c
 
3

đoạn liên tiếp sao cho tổng của 2 đoạn đầu lớn hơn đoạn cuối, G iả thiết điều này không
xảy ra, nghĩa là đồng thời xảy ra các bấl đang thức:

< 7 |
 
+
 
Ü 2
 
<
 
í / ; , .

Ü
2 +
 
í/,
 
<
 
«4,

(fZ
, + ¿Í4 <
 
í/,,

04
 
+ a,
 
<

ớ, + Ö6 <
 
ÚT

Từ giả thiết ữ|,
 
Ũ
2
 
có giá trị lớn hơn
 
10. ta nhận được í/, > 20. Từ
 
Ü
2
 
> 10
 
và ữ, > 20, ta
nhận được
 
«
 
4
 
> 30,
 
cứ như vậy ta nhận được í/, > 50,
 
> 80 và
 
a-i >
 
130. Bất đẳng

thức cuối cùng m âu thuẫn với giả thiết các độ dài nhỏ hcfn 100 và điều đó chứng minh
kết luân của bài toán.

51

Phần 1. Lý thuyết tổ hợp

Thí dụ
 
2. Các đỉnh của m ột thập giác đều được đánh số bởi các số nguyên 0,
 
1,
 
, 9

một cách tuỳ ý. Chứng m inh rằng luôn tìm được ba đỉnh liên tiếp có tổng các số là lớn
hơn 13.

G iải: Gọi ,r,,
 
X
2
 
, .
 
.V
|0 là các số gán cho các đỉnh của 1, 2, . .
 
10 của thập giác. Giả

sử ngược lại là không tìm được ba đỉnh nào thoả m ãn khẳng định của thí dụ. Khi đó ta

có

Ấ
:, = X| +
 
X
2
 
+ X3 <
 
13,

=
 
X
 
2
 
+
 
X
3
 
+
 
^
 
4
 
<
 
1 3 ,

=
 
X , +
 
X|fj +
 
X |
 
<
 
1 3 ,

Ấ
.'|Q =
 
X|0
 
+
 
Xị
 
+
 
X
 
2
 
ú
 
1 3 ,

Từ đó suy ra

kị + k2 + . . . +
 
< 1 3 0 .

M ặt khác do

k ị
 
+
 
k j
 
+
 
.
 
. .
 
+
 
k^o
 
=
 
3 (X /
 
+ X
 
2
 
+
 
. . . +
 
.r,o)

= 3 (0 + 1 + 2 + . . . + 9)

=
 
1 3 5 ,

suy ra

135
 
= kị + k2 + . . .
 
+ kịQ
 
< 130.

M âu thuẫn thu được đã chứng tỏ khẳng định trong ví dụ là đúng.

Thí dụ
 
3. Chứng m inh rằng không thể nối 31 m áy vi tính thành m ột m ạng sao cho mỗi
m áy được nối vối đúng 5 m áy khác.

Giải:
 
Giả sử ngược lại là tìm được cách nối 31 m áy sao cho m ỗi m áy được nối với đúng

5 m áy khác. Khi đó số Iưọmg kênh nối là 5x31/2 = 75,5
 
?! M âu thuẫn thu được đã
chứng m inh khẳng định trong thí dụ là đúng.

3.3. Nguyên lý Dirichlet

Trong rất nhiều bài toán tổ hợp, để chứng minh sự tồn tại của m ột cấu hình với những
tính chất cho trước, người ta sử dụng nguyên lý đơn giản sau, gọi là nguyên lý Dirichlet;

Nguyên lý D irichlet.
 
N ế u đem xếp nhều hơn n đối tượng vào n cái hộp, thì luôn tìm

được một cái hộp chứa không ít hơn 2 đối tượng.

52

Chương 3.
 
Liài
 
toán tòn
 
tại

Chứng
 
m inh.
 
Việc chứng minh nguyên
 
lý trên chì
 
là một lập luận
 
phản chứng đơn
giản. G iả sử ngược lại là không tìm được cái hộp nào chứa không ít hơn 2 đối tượng.
Đ iều đó có nghĩa là mỗi cái hộp chứa không quá một đối tượng. Từ đó suy ra tổng số
đối tượng xếp trong
 
n
 
cái hộp là không vượt quá
 
n,
 
trái với giả thiết là có nhiều hơn
 
n

đối tượng được xếp trong chúng.

Lập luận hoàn toàn tương tự, có thể chứng minh Nguyên lý D irichlet tổng quát sau.

N guyên lý D irich leí tổ n g q u át.
 
Nếu đem xếp n đối tượìự xào k cái hộp, thì luôn !ìm

được một cái hộp chứa không ít hơn n/k dối tượng.

N guyên lý trên được nhà toán học nổi tiếng người Đức là Dirichlet đề xuất từ thế kỷ
 
19
và ồng đã áp dụng nó để giải nhiều bài toán tồn tại tổ hợp. Các thí dụ dưới đây cho ta
thấy nguyên lý được sử dụng như thế nào.

T hí dụ 1.
 
Trong số 367 người bao giờ cũng tìm được hai người có ngày sinh nhật giống
nhau bởi vì chỉ có tất cả 366 ngày sinh nhật khác nhau.

T hí dụ 2.
 
Trong kỳ thi học sinh giỏi điểm
 
bài thi được đánh giá bởi một số nguyên
trong khoảng từ 0 đến
 
100. Hỏi rằng ít nhất phải có bao nhiêu học sinh dự thi để cho
chắc chấn tìm được hai học sinh có kết quả thi như nhau?

G iải. Theo nguyên lý Dirichlet, số học sinh cần tìm ià 102, vì ta có
 
101 kết quả điểm
thi khác nhau.

T hí dụ
 
3. Trong sô' những người có
 
m ặt trên trái đất luôn tìm được hai
 
người có hàm

răng giống nhau, bởi vì chỉ có tất cả

2 ''
 
=
 
4 294 967 296
hàm răng khác nhau m à sô' người trên
 
hành tinh chúng ta hiện nay đã vượt quá
 
5
 
tỷ.

T hí dụ 4.
 
Trong 100 người có ít nhất
 
9 người sinh cùng một tháng.

G iải: X ếp những người cùng sinh một tháng vào một nhóm. Có
 
12 tháng tất cả. V ậy
theo nguyên lý D irichlet, tồn tại ít nhất m ột nhóm có không ít hơn 100/12 = 8,3... nghĩa
là 9 người.

Thí dụ
 
5. Có năm
 
loại học bổng khác nhau. Hỏi rằng phải có ít nhất bao nhiêu sinh
viên để chắc chắn rằng có ít ra là sáu người cùng nhận học bổng như nhau?

53

PììLÌn I . Lỷ ílìuvết tổ hợp

G iải: Số sinh viên ít
 
nhất cần có để đảm bảo chắc chắn có 6 sinh viên cùng nhận học
bổng như nhau là số nguyên nhò nhất
 
n
 
sao cho /ì/5 > 5. Số nguyên nhỏ nhất đó là
 
ỉì -

5x5+1
 
= 26.
 
Vậy 26 là số lượng sinh viên nhỏ nhất đảm bảo chắc chán là có sáu sinh
viên cùng hưởng một loại học bổng.

T h í d ụ 6. Biển sô' xe
 
m áy phàn khối lớn gồm 7 ký tự:

^4N - NNN - XX,

trong đó hai ký tự đầu là m ã số địa danh, ba ký tự tiếp theo là số hiệu xe, m ỗi ký tự là
m ột số từ
 
0 đến
 
9, hai ký tự cuối là mã đăng ký gồm hai chữ cái lấy trong bảng chữ cái
la tinh gồm 26 chữ cái. Hỏi rằng, để có 2 triệu biển số xe m áy khác nhau thì cần phải có
ít nhất bao nhiêu mã địa danh khác nhau?

G iải; Với mỗi m ột mã địa danh ta có
 
10\26^ = 676.10'^ biển số xe m áy
 
khác nhau. Vì
vậy để có 2 triệu biển số xe m áy khác nhau, cần có ít nhất

2.107(676.10^),
nghĩa là 3 m ã địa danh khác nhau.

Trong nhiều ứng dụng thú vị của nguyên lý D irichlet, khái niệm đối tượng và cái
hộp cần phải được lựa chọn m ột cách khôn khéo hơn. Tiếp theo, ta sẽ dẫn ra m ột vài thí
dụ như vậy.

T h í d ụ
 
7. T rong m ột phòng họp bao giờ cũng tìm
 
được hai người có số người quen
trong số những người dự họp là bằng nhau.

G iải; Gọi số người dự họp là
 
n,
 
khi đó số người quen của một người nào đó trong phòng
họp chỉ có thể nhận các giá trị từ 0 đến /ỉ-1. Rõ ràng trong phòng không thể đồng thời
có người có số người quen là 0 (tức là không quen ai cả) và có người có số người quen
là
 
n -ì
 
(tức là quen tất cả). Vì vậy, theo sô' lượng người quen ta chỉ có thể phân
 
n
 
người
ra thành /7-1 nhóm . Theo nguyên lý D irichlet suy ra có ít nhất m ột nhóm phải có không
ít hcfn hai người, tức là luôn tìm được ít ra là hai người có số người quen là bằng nhau.

Bài toán này có thể phát biểu dưới dạng ngôn ngữ hình học như sau: trên m ặt phẳng
cho
 
n
 
điểm , giữa chúng có m ột số điểm được nối với nhau bởi các đoạn thẳng. Khi đó
bao giờ cũng tìm được hai điểm có cùng một số cạnh nối phát ra từ chúng.

T h í d ụ 8. T rong m ột tháng gồm 30 ngày m ột đội bóng chuyển thi đấu mỗi ngày í: nhất
m ột trận, nhưng không chơi quá 45 trận. Hãy chứng m inh rằng phải tìm được m ột giai
đoạn gồm m ột số ngày liên tục nào đó trong tháng sao cho trong giai đoạn đó đội chơi
đúng 14 trận.

G iải: G iả sử
 
Qj
 
là tổng số trận thi đấu cho đến hết ngày thứ
 
j
 
của đội. Khi đó

54

C liif(/ni>
 
B ở i to á n
 
tí/ii lạ i

ũị, ÜJ
......
 
í/,,,

là dãy tăng các số nguyên dương và đồng thời ] < í/ < 45. Suy ra dãy

í/1
 
+14,
 
+
 
14,
 
, í/Ị|J
 
+
 
14

cũng là dãy
 
tăne các số nguyên dươna
 
và 15 < í/, +14 < 59.

Tất cả có 60 số nguyên dương

ơ|. ơ ,
 
a („ í/| + '4
 
6'2+14, ...
 
í/,,,-^14,

tro n s đó tất cả
 
đều nhỏ hơn hoặc bang 59. Vì vậv iheo nguvên lý D irichlet, hai trong số

các số nguyên này phải là bằng nhau. Vì các số í/|
 
......
 
là đôi m ột khác nhau và các

số ơ| + 14
 
......
 
« 3,,+ 14 cũng là đôi một khác nhau, nén suy ra phải tìm được chỉ số ; và
 
j

sao cho
 
a¡ =
 
14. Đ iều đó có nghĩa là có đúng 14 trận đấu trong giai đoạn từ ngày ý+1

đến ngày /.

'/ h í dụ 9. Chứng m inh rằng, trong số
 
ÌÌ
+ 1 số nguyên dương, mỗi số không lớn hơn 2/7,
bao giờ cũng tìm được hai số sao cho số này chia hết cho sô' kia.

Giải:
 
Gọi các số đã cho là

V iết m ỗi một số
 
üj
 
trong /ỉ+1 số trên dưới dạng:

a¡
 
=
 
,
 
./ = 1, 2
 
,
 
n
 
+1

trong đó
 
là nguyên không âin.
 
í / ,
 
là số lẻ. Các số í/|, Í/,. .... í/„^| là các số nguyên lẻ
mồi số không lớn hơn
 
2n.
 
Do trong
 
đoạn từ 1 đến
 
2n
 
chỉ có
 
n
 
số lẻ, nên từ nguyên lý
D irichlet suy ra là hai trong số các số í/|,
 
q^.
 
í/„+i là bằng nhau, tức là tìm được hai

chỉ sô'
 
i
 
và
 
j
 
sao cho
 
q¡ = (¡J = q.
 
Khi đó
 
a¡
 
= 2 ^ 'f /,
 
tij = 2 ^ iq .
 
Suy ra nếu
 
kị < kj
 
thì
 
Ü
J

chia hết cho a,, còn nếu
 
kị > kj
 
thì í/, chia hết cho
 
Uj.

T h í dụ
 
10. Trong m ật phẳng cho 6 điểm được nối với nhau từng đôi m ột bởi các cung
m àu xanh hoặc m àu đỏ. Chứng minh rằng luôn tìm được 3 điểm sao cho các cung nối
chúng có cùng m ột màu
 
(ta sẽ nói là chúng tạo thành tam giác xanh hoặc đỏ).

Giải:
 
Chọn điểm
 
p nào đó. Từ nó có 5 cung nối với 5 điểm còn
 
lại. Theo nguyên
 
lý
D irichlet, có 3 trong số 5 cung đó phải có cùng một m àu, chẳng hạn
 
là
 
m àu xanh. G iả
sử
 
đó
 
là
 
các cung PA, PB, PC. Nếu như m ột trong số 3 cung AB, AC, BC có m àu xanh
thì nó cùng
 
với hai trong sô'ba cung
 
PA, PB,PC
 
tạo thành m ột tam
 
giác xanh.
 
Nếu

ngược lại thì tam giác ABC là một tam giác đỏ.

55

Phẩn 1. Lý thuyết tổ hợp

T h í d ụ 11. Trên m ặt phẳng cho 9 điểm được nối với nhau đôi m ột bởi các đoạn nối có
m ầu xanh hoặc đỏ sao cho trong số 3 điểm bất kỳ bao giờ cũng tìm được hai điểm được
nối với nhau bởi đoạn nối m àu đỏ. Chứng m inh rằng trong số các điểm đã cho luôn tìm
được 4 điểm m à các đoạn thẳng nối chúng đều có m àu đỏ.

Giải:
 
Gọi
 
9
 
điểm
 
đã
 
cho
 
là
 
A,
 
B,
 
c , D,
 
E, F,
 
G, H,
 
I.
 
Xét
 
2
 
trường hợp:

a) Tim đuợc m ột điểm là đầu m út của ít nhất 4 đoạn nối màu xanh chẳng hạn điểm
đó là A và các đoạn m àu xanh đó là AB, AC, AD, AE. Theo giả thiết, trong số các đoạn
nối bất kỳ 3 điểm nào cũng có ít nhất m ột đoạn m àu đỏ, suy ra các đoạn BC, BE, BD,
CD, CE, ED là màu đỏ. Vậy B, c , D, E là bốn điểm cần tìm.

b) Mỗ! điểm đều là đầu m út của nhiều nhất !à 3 đoạn nối m àu xanh. Trong trường
hợp này, không thể tất cả 9 điểm đều là đầu m út của đúng 3 đoạn nối m àu xanh (chứng
m inh tương tự như trong thí dụ 3, mục 3.2), từ đó suy ra phải tìm được điểm (I chẳng
hạn) là đầu m út của nhiều nhất là 2 đoạn nối m àu xanh.
 
Khi đó I là đầu m út cửa ít nhất
6 đoạn m àu đỏ, chẳng hạn lA , IB, IC, ID, lE , IF. Theo kết quả của thí dụ 10, trong số 6
điểm A, B,
 
c,
 
D, E, F phải có ít nhất 3 điểm , chẳng hạn A, B,
 
c,
 
sao cho các đoạn nối
chúng có cùng m àu, và từ giả thiết suy ra m àu đó phải là m àu đỏ. V ậy I, A, B, c
 
là bốn
điểm cần tìm.

3.4. Hệ đại diện phân biệt

Trong nhiều tình huống, sự tồn tại của cấu hình tổ hợp phụ thuộc vào m ột số điều kiện
ràng buộc các tham số ban đầu. M ột trong những hướng giải quyết là người ta cô' gắng
phát hiện ra các điều kiện đó. Bài toán
 
hệ đại diện phán biệt
 
trình bày dưới đầy là m ột
m inh hoạ cho hướng tìm kiếm này.

G iả sử 5 |, S2,
 
s„
,
 
là m ột họ các tập con của m ột tập hợp
 
s
 
(các s, không nhất thiết
khác nhau), Ta gọi m ột bộ có thứ tự
 
Q/, Ü
2
 
,
 
a„,
 
là m ột
 
hệ đại diện phán hiệt
 
của họ

này
 
nếu
 
a,
 
6
 
5,
 
và
 
a,
 
(/
 
TÍ
 
j).
 
H ệ
 
đại diện
 
phân
 
biệt được
 
viết
 
tắt
 
là T R A N
(transversal) và thành phần ữ, của hệ được gọi là
 
đại diện
 
của tập con
 
Sị {i =
 
1
 
,
 
m).

T h í dụ.
 
5 = 1 1 ,2 , 3 ,4 ,5 } , S ;=
 
{2, 5}, 5 , =
 
12, 5 ), 5 , =
 
{ 1 , 2 , 3 , 4 1 , 5 , =
 
1 1 ,2 ,5 }
 
có
TRA N là (2, 5, 3, 1). M ột TR A N khác của họ này là (5, 2 ,4 , I).

K hông phải lúc nào cũng tìm được TRA N . M ột điều dễ nhận thấy là nếu họ đang
xét có TR A N , thì mọi hợp của
 
k
 
tập bất kỳ trong họ phải có ít nhất
 
k
 
phần tử (vì luôn
tìm dược
 
k
 
đại diện khác nhau của
 
k
 
tập đó). N ói khác đi, nếu tìm được
 
k
 
tập nào đó của
họ, m à hợp của chúng
 
có
 
ít hơn
 
k
 
phần
 
tử, thì chắc
 
chắn
 
họ đang
 
xét sẽ không
 
có

56

Chươiìíĩ J. B ai
 
fOiin
 
tổn ỉợi

TRA N . Chẳng hạn
 
trong Ihí dụ trcn, nếu thay tập 5, cùa họ đang xét bởi tập (2, 5}, thì
họ này sẽ không tổn tại TRAN, vì .S
'| u
 
u
 
S4 = 12, 5 Ị có ít hơn 3 phần tử.

p. Hall đã chứng minh được điều kiện cần vừa nêu, cũng đồng thời là đủ cho sự tồn
tại TRA N , qua định lý đánh giá cận dưới của số TRAN dưới đây:

Đ ịn h lý H all.
 
Gid sử các tập con S/.
 
......
s,„ tììoâ mãn điéit kiện:

A '( .S / u 5 , - ^ u . .. u 5 / )
 
>
 
Ấ
:
 
f l)

vời mọi
 
1 <
 
k < m.
 
1 < /, <
 
¡ 2
 
<
 
... < /; 1
 
m
 
vìi mồi íãp con này chứa u nhất t phẩn tử.

Khi dó:

. nếu t < m thì họ dang xét cỏ ít nlìđr
 
r\
 
TRAN

.
 
nếu t > m thì họ đan^ xét có ít nhất
 
t\l{t-m)\
 
T R A N
 
.

Đ iều kiện (1) được gọi là
 
điều kiện Hall
 
và ta gọi m ột họ con của họ 5 |,
 
S
2
 
,
 
....
 
s,„
 
là
 
tới

hạn
 
nếu đối với nó bất đẳng thức ( 1) trở thành đẳng thức.

C hứ nịỊ
 
m inh.
 
Quy nạp theo
 
m.
 
Với
 
m = ỉ , Vd cỏ t = r\/{t-\)ì
 
TRAN ,
 
định
 
lý đúng.
 
Giả

sứ định
 
lý đúng cho mọi họ tập con của s có ít hơn
 
m
 
tập. ta cần
 
chứng
 
m inh
 
định
 
lý

đúng cho họ tập con gồm
 
m
 
tập. Chia làm 2 trường hợp:

. K hông có họ con tới hạn.
 
Chọn
 
ÍV
| là m ột phần tử của 5|. Loại nó ra khỏi
 
$
2
 
, Sị,

s,„
 
(nếu có m ặt) và gọi họ nhận được là
 
S
2
 
',
 
5 ,'
 
.....
s,„'.
 
Dễ dàng thử lại họ này thoả

m ãn điều kiện Hall và mỗi tạp thuộc họ có ít nhất
 
Í-I
 
phán tử. ITieo giả thiết quy nạp họ
này có ít nhất (r-1)! TRA N khi /-1 <
 
m -\
 
hay
 
í < m
 
và có ít nhất (í-l)!/(/-m )! khi r-1 >

m - l
 
hay
 
í > rn.
 
M ặt khác,
 
mỗi TRAN
 
của Ắ
'2', 5 ,'
 
.....
s,„'
 
cùng
 
với ứ |,
 
xác định
 
một

T R A N cúa
 
Sị,
 
5 ;
 
......
 
s„
,
 
(dị
 
đai diện cho
 
Điểu nàv tlúng cho m ỗi cách chọn
 
ứ|

trong sô' ít nhất / cách chọn nó từ
 
Từ đó
 
nhận được đánh giá cần chứng minh.

. Có m ột họ con tới hạn.
 
Không íĩuit tính tổng quát, có thể giả thiết họ đó là S|,
 
Sj,

S).
 
[k < m).
 
Từ sự tồn tại của họ con tới hạn suy ra
 
t < k,
 
vì vây theo giả thiết quy

nạp, họ S|,
 
S
2
 
......
 
5*. có ít nhất
 
r! TRAN. Gọi
 
T'=
 
(rt|.
 
......
ctị)
 
là m ột TR A N như thế.

Bỏ các phần tử của
 
T \
 
nếu có mặt, ra khỏi các tập
 
5
*
^
,1
,
 
s„
,
 
và gọi các tập thu được là

S \^ .ị
......
 
S ’„,.
 
Khi đó họ
 
5
 
........
S ’
„
,
 
sẽ tlioả mãn điều kiện Hall. Thật vậy, nếu có một

họ con gồm
 
k'
 
tập của họ đang xét, mà hợp của chúng ít hơn
 
k'
 
phần tử, thì họ con gồm

k+ k'
 
tập của họ 5 |.
 
......
 
s„„
 
nhận được bằng cách ghép họ con này với họ 5|,
 
S
2
 
,
 
5*.

sẽ có hợp ít hơn
 
k+k'
 
phần tử và điều này là mâu thuẫn với giả th iế tc u a đ ịn h lý. Như
vậy họ 5
 
s
 
có ít nhất một TRAN. Lấy ít nhất /! TRAN của họ S |. s
 
. g
 
h
 
é p
với T R A N này, ta được ít nhất
 
t\
 
TRAN của họ S|, S
 
j ,
 
s,„.
 
Đ ịnh lý được chứng minh.

Việc xét sự tồn tại cũng như xây dựng TR A N có nhiều ứng dụng trong thực tế.
Dưới đây là m ột số bài toán m à việc giải quyết nó được đưa về việc xây dựng TRAN.

57

Phần I . Lý thuyết tổ hợp

Bài to á n người th i h àn h . Có
 
m
 
người thi hành và
 
n
 
công việc. G iả sử với m ỗi người thứ

i,
 
ta biết được tập
 
Sị
 
là tập hợp các công việc m à người đó có thể làm. H ỏi có thể phân
công mỗi người làm m ột việc không?

Lời giải của bài toán được dẫn về việc xét sự tổn tại TR A N của họ ỊS ,} và việc xây
dựng m ột T R A N chính là xây dựng m ột sự phân công như thế.

Bài to á n c h u y ển m ạch . X ét m ột hệ thống chuyển m ạch đơn giản gồm 2 nhóm các cực;
đầu vào và đầu ra. Tại đầu vào sẽ xuất hiện đòi hỏi về nối mạch, Đòi hỏi này có thể
được thoả mãn bằng cách nối nó với m ột đầu ra nào đó. Tập hợp các đầu vào có đòi hỏi
nối mạch
 
được gọi là danh m ục đòi hỏi. Đ ầu vào nối với đầu ra qua m ột m ạch nối và
m ạch nối này cần phải không được bặn nghĩa là nó chưa phục vụ cho đầu vào nào. Các
inạch nối như vậy gọi là danh m ục tự do. K hông giảm tồng quát, ta có thể coi rằng danh
mục đòi hỏi gồm
 
m
 
đầu vào đầu tiên và 5, là tập các chỉ số các m ạch nối tự do m à theo
đó, đòi hỏi từ đầu vào / có thể được chuyển
 
tới m ột đầu ra. N ếu họ 5 |,
 
5„, có

TRAN thì dòng vào gồm
 
m
 
đòi hỏi có thể được phục vụ bởi thiết bị chỉnh mạch. Trong
trường hợp không tồn tại T R A N
 
thì cần phải điều chỉnh lại
 
các m ạch nối để chọn cách
nối khác.

Bài to á n đ á m cưới v ù n g qu ê. Tại m ột làng quê nọ có
 
m
 
chàng trai đến tuổi iấy vợ. Với
mỗi chàng trai /, ta biết tập 5, các cô gái m à chàng ta thích. Hỏi rằng có thể ghép mỗi cô
cho mỗi chàng m à chàng nào cũng vừa ý hay không? Rõ ràng bài toán được dẫn về việc
xét sự tồn tại T R A N của họ {S, }. Trong trường hợp tồn tại, m ỗi TR A N sẽ tưcfng ứng với
m ột cách ghép m ong muốn.

Trong những trường hợp sự tồn tại của T R A N
 
là hiển nhiên thì người ta quan tâm
đến việc đếm hoặc liệt kê chúng. Dưới đây là hai thí dụ đếm T R A N m à kết quả đếm
được dẫn về các cấu hình đã biết.

T h í d ụ 1. Xét tập { 1 , 2 ,
 
n].
 
Đ ếm số T R A N của họ tập con

s, =
 
s-{i},
 
1
 
</<«.

G iải: M ỗi T R A N là m ột hoán vị (ứ|,
 
Ü
2
 
,
 
a„)
 
của {1, 2
 
,
 
«} sao cho a,
 
pii
 
với m ọi
 
i,

do vậy có thể đồng nhất m ỗi T R A N với m ột m ất thứ tự trên tập đang xét. Từ đó nhận
được số T R A N cần đếm là
 
D„
 
(số m ất thứ tự - xem chương 2).

T h í d ụ 2. Đếm số TR A N của họ tập con của tập {1, 2
 
,
 
/z); S| = {1, 2 1,
 
= Ị 1, 2, 3},

5 j =
 
( 2 , 3 , 4 Ị
 
.......
 
s„.,= { n - 2 , n - ị , n ì , s „ = { n- l , n] .

G iải:
 
Đ ể bài toán xác định cả với
 
n = ì,
 
ta xem
 
trong trường hợp này 5| = {1 Ị. Gọi F„
là số T R A N
 
cần đếm (ứng với « > 1). C hia các T R A N này thành 2 loại:

58

C hư ơ ni’ 3. Bài toán tón lại

•
 
1 là đại diện cho
 
Sị.
 
Khi đó các thành phần
 
còn lại sẽ là m ột hệ đại diện của họ

{2, 3}, {2, 3, 4 |,
 
(«-1, //}. Do vậy loại này có f„.| TRA N .

•
 
2 là đại diện cho
 
s,.
 
Khi đó bắt buộc 1 phải
 
là đại diện cho
 
S
2
 
và các thành phần

còn iại sẽ !à m ột hệ đại diện của họ {3, 4Ị.
 
{3, 4, 5},
 
{rt-1, /2}.Vậy lo

có F „.2 t r a n .

Từ đó nhận được hệ thức
 
= F,,.! + F„,2. Các giá trị
 
Fị =
 
1,
 
p
 
2
 
= 2
 
được tính trực
tiếp. Đây cũng là hệ thức truy hồi xác định các số Fibonaci (xem chưoìig 2).

3.5. Định lý Ramsey

3.5.1.
 
Bài to á n m ở đ ầ u

Trong m ục 3.3 ta đã xét bài toán: Trong mặt phẳng cho 6 điểm được nối với nhau từng
đôi m ột bởi các đoạn nối màu xanh hoặc m àu đỏ. Chứng m inh rằng luôn tìm được 3
điểm sao cho các đoạn nối chúng có cùng một màu
 
(ta sẽ nói là
 
chúng tạo thành tam
giác xanh hoặc đỏ).

Lập luận để giải bài toán được dựa trên nguyên lý Dirichlet.

M ột cách phát biểu khác của kết quả vừa chứng minh là: Trong số 6 người tại m ột
bàn tiệc luôn tìm được hoặc ba người đôi một quen nhau hoặc ba người đôi một không
quen nhau.

Trong m ục này chúng ta sẽ còn khảo sát các vấn đề: Hỏi ít nhất phải có bao nhiêu
người để chắc chắn tìm được hoặc 4 người đôi một quen nhau hoặc 4 người đôi m ột
không quen nhau? Hỏi ít nhất phải có bao nhiêu ngiíưi clể chắc chắn tìm được hoặc 5
người đôi m ột quen nhau hoặc 5 người đôi một không quen nhau?

Con số nhỏ nhất vừa nói đến trong các câu hỏi vừa nêu được gọi là các sô' R am sey,
m ang tên nhà toán học người Anh đã chứng minh được định lý nổi tiếng trong lý thuyết
tập hợp là sự tổng quát hoá nguyên lý Dirichlet.

3.5.2.
 
C ác số R am sey

Để có thể phát biểu những kết quả tổng quát hơn chúng ta cần đến m ột số khái niệm.

Đ ịnh n g h ĩa 1.
 
Gọi K„ là bộ ^ồm hai tập V, E, íron^ đố V là tập gồm n điểm còn E là tập

các đoạn nối giữa tất cá các cặp điểm trong E. Ta sẽ ký hiệu K„
 
=
 
{V, E). Ta s ẽ gọi các

phẩn tử của V là các đỉnh, và
 
V’
 
là tập đỉnh của K^,. Mỗi đoạn nối hai đỉnh u,
 
V
 
e
 
V s ẽ

được gọi là m ột cạnh của K„ và ký hiệu là {u, v), và tập E được gọi là tập cạnh của K„.

59

Phần I . Lý thuyết tổ hợp

Ta có thể phát biểu lại kết quả nêu trong mục trước như sau: Giả sử mỗi cạnh của Ẫ'„
được tô bởi m ột trong hai m àu xanh hoặc đỏ. K hi đó A
"(, luôn chứa hoặc
 
với tất cả các
cạnh được tô m àu xanh (gọi tắt là
 
xanh) hoặc
 
với tất cả các cạnh được tô m àu đỏ
(gọi tắt ià
 
K
 
ị
 
đỏ). Chúng ta sẽ nói rằng số 6 có tính chất (3,3)-R am sey. T ổng quát hơn
ta có định nghĩa sau.

Đ ịnh n g h ĩa 2.
 
Giá sử i và j là hai s ố nguyên sao cho ị > 2 , j >
 
2,
 
S ố nguvên dươiìíỊ m có

tính chất {i,j)-Ramsey nếu K„, với mỗi cạnh được tô hởi một trong hai màu xanh, đỏ

luôn chứa hoặc là Kị đỏ hoặc là Kj xanh.

Từ kết quả ở m ục irước ta thấy 6 có tính chất (3,3)-K am sey. Nhưng liệu 6 có phải là số
nhó nhất có tính chất này hay không? Giả sử các cạnh của
 
K
 
ị
 
được tô m àu như chỉ ra
trong hình vẽ dưới đây (đỏ - đậm , xanh - nhạt).

Rõ ràng không thể tìm được
 
đỏ (đậm ) cũng như không thể tìm được
 
K
 
ị
 
xanh (nhạt).
N hư vậy
 
số 5 không có
 
tính chất (3,3)-R am sey.
 
D ễ dàng
 
thấy rằng
 
mọi
 
số
 
nguyên
dương nhỏ hơn 5 cũng không có tính chất (3,3)-R am sey. V ậy 6 là số nhỏ nhất có tính
chất này.

Đ ịnh n g h ĩa 3.
 
S ố Ramsey R(i,j) là s ố nguyên dương nhỏ nhất có tính chất ụ j)-R a m se y .

Chẳng hạn, từ kết quả vừa trình
 
bày ở trên, ta có
 
R(3,3) =
 
6, vì 6 có tính chất (3,3)-
R am sey, và những số nguyên dương nhỏ hcfn nó không có tính chất này.

T h í d ụ 1. Tim
 
R (2 ,l) -
 
số nguyên dương nhỏ nhất có tính chất (2,7)-R am sey.

Giải:
 
Trước hết ta tìm số nguyên dưcíng
 
n
 
sao cho với m ọi cách tô các cạnh của
 
K„
 
bởi
hai m àu xanh, đỏ luôn tìm được hoặc
 
K
 
2
 
đỏ hoặc
 
xanh.
 
R { 2 J )
 
là sô' nhỏ nhất có tính
chất này. X ét m ột cách tô m àu (tuỳ ý) các cạnh của
 
K-Ị.
 
Rõ ràng hoặc là tìm được ít nhất

60

C
 
l i i f i i ' i i i ;
 
Bài
 
tu á n ¡ồn lạ i

m ột cạnh của
 
K-,
 
được tô màu đỏ. hoặc là lất cả các cạnh của nó đều được tô bởi màu
xanh. N ếu có cạnh tô màu đỏ thì rõ ràng ta có
 
đỏ. Còn nếu tất cả các cạnh đều tô bởi
màu xanh thì ta có
 
xanh. Vậy số 7 có tính chất (2,7)-R am sey, và vì thế/?(2,7) < 7.

N hưng
 
R { 2 J )
 
không thể nhỏ hơn 7, bởi vì nếu tô tất cả các cạnh của
 
K(,
 
bởi màu

xanh ta sẽ không tìm được
 
K
 
2
 
đỏ và cũng khống tìm được
 
K-,
 
xanh.

Vậy
 
R (2 ,l) = 1.

Sử dụng ỉập luận trong ví dụ vừa ìrình bày ta có thổ chỉ ra rằng:

R{2,k) = k,
 
với mọi
 
k > 2.

Các tính chất cơ bản sau đây cúa số Ram sey
 
R i ij)
 
có thể
 
chứng m inh bằng
 
các lập
 
luận

tương tự như trong các ví dụ đã trình bày:

1.
 
RiiJ) = R(j,iỵ

2.
 
Nếu
 
m
 
có tính chất (/j)-R anisey, thì mọi sô'
 
n > m
 
cũng có tính chất này;

3.
 
Nếu
 
m
 
không có tính chất (/,y)-Ramsey, thì mọi
 
số n < m
 
cũng không có tính
chấr này;

4.
 
Nếu /, > /2 thì
 
R ự J ) > R ự ĩS -

Đ ể ý rằng khi tìm số /?(/,;) ta cần xét sự tồn tại của
 
Kị
 
đỏ hoặc
 
Kj
 
xanh; nghĩa là
màu đỏ liên quan đến biến /, còn màu xanh liên quan đến biến
 
j.
 
Tương tự như vậy, khi
tìm
 
RỢ.i),
 
m àu đỏ liên quan đến
 
j
 
còn màu xanh liên quan đến /. Do
 
Rự,/) = R(J,i)
 
nên ta
chỉ cần quan tâm đến hoặc là
 
R,
 
có các cạnh được tô bởi cùng m ột m àu (gọi tắt là /?,
cùng m àu), hoặc
 
Rj
 
cùng màu.

V iệc xác định sô' Ranisey
 
R{ị,j)
 
đòi hỏi chúng ta phải tìm
 
số nguyên ducfng nhỏ
nhất có tính chất (/j)-R am sey. Một câu hỏi đặt ra là: Liệu số này có tồn tại với m ọi
 
i >

2 , j > 2
 
hay không? Bổ đề và định lý dưới đây sẽ trả lời câu hỏi đặt ra.

Bổ đề 1.
 
Nếu i > 3 và j > 3 thì

R{i,j)
 
< / ? ( / > ! ) +
 
/?(/-!,i),
 
(1)

C h ứ n g m in h . G iả sử m =
 
R { i j - \ )
 
+
 
R { i-\j).
 
Ta sẽ chứng m inh vằng
 
m
 
có tính chất (/,/)-

Ram sey. Giả sử các cạnh của
 
K,„
 
được tô bởi hai màu xanh,
 
đỏ, và V
là m ột
 
đỉnh của
 
K„,.

Ta phân tập đỉnh
 
V
 
của
 
K„,
 
ra làm hai tập;

A
 
-
 
t ậ p
 
t ấ t c ả c á c đ ỉ n h
 
n ố i v ớ i V b ở i c ạ n h
 
đ ỏ ;

B
 
-
 
t ậ p t ấ t c ả c á c
 
đ ỉ n h
 
n ố i v ớ i V b ở i c ạ n h
 
x a n h .

Do

lAI + ISI = lAuSI
 
= m - ì
 
= RHJ-1) + R{i-ỈJ)
 
-1

61

Phần J . Lỷ thuyết tổ hợp

nên hoặc là
 
\A\ > R (i-ÌJ )
 
hoặc là
 
\B\ >
 
Thực vậy, nếu trái lại ta có Iy4l <
 
R Ụ -\J )

và Ißl <
 
R{i,j-
1), từ đó suy ra điều phi lý sau

m - \ = \AkjB\ < R{i,i-
1) + /?(/-1 j ) -1 =
 
/? 7
 
-1
.

X ét trưòíig hợp 1/4
1 > /?(/-l j) . Gọi
 
là bộ gồm tập đỉnh
 
A
 
và
 
tập cạnh là các cạnh
nối các đỉnh trong
 
A
 
của
 
K,„.
 
Ta sẽ chỉ ra rằng
 
Kị^ị
 
hoặc chứa
 
K,
 
đỏ hoặc chứa
 
xanh.
Do MI > /?(/-!,/■), nên
 
hoặc chứa Ả
T,.| đỏ hoặc chứa
 
Kj
 
xanh. Nếu
 
K,^
 
chứa /?,.| đỏ thì
bổ sung vào nó đỉnh
 
V
 
và các cạnh nối y với các đỉnh trong
 
A
 
ta thư được
 
R.
 
đỏ. Vậy
 
/^
 
1( 1

v à d o
 
đ ó
 
K„
 
luôn chứa hoặc
 
đ ỏ
 
hoặc
 
Kj
 
xanh.

Trường hợp
 
\B\ > R{ỉ,j-\)
 
được xét tương tự.

N hư vậy
 
m
 
có tính chấi (/,ý)-Ramsey, lừ đó suy ra bất đẳng thức ( i )
 
đuợc chứng
m inh.

Từ kết quả của bổ đề sử dụng phép qui nạp toán học ta có thể chứng m inh kết quả sau
đây;

Đ ịn h lý 1 (Đ ịn h lý R am sey ).
 
N ế u i > 2 , j > 2
 
là các s ố nguyên dươnẹ thì luôn tìm dược

s ố nguyên dươnq với tính chất {Ì,j)-Ramsey {từ đó suy ra sô'R{iJ) là tồn tại).

C h ứ n g m in h . G iả sử
 
P(n)
 
là m ệnh đề sau:

P{n): N ế u i + j = n thì luôn tìm được sô'nguyên với tính chất (iJ)-Ramsey.

Khi /ỉ = 4,
 
ta có
 
i = j =
 
2, từ kết quả của ví dụ 1 suy ra
 
P{4)
 
là đúng. G iả sử
 
P(n)
 
đúng,
ta phải chứng m inh
 
P (n+ l)
 
cũng đúng. Giả sử
 
i + j =
 
/ỉ+1. Suy ra / + (/-!) =
 
n
 
và (/-1) +

j
 
=

n .
 
T heo giả thiết qui nạp, luôn tìm được số nguyên có tính chất (i,
 
j
 
- 1)-R am sey và số
nguyên với tính chất (/-1, ý)-Ram sey. Từ đó suy ra các số
 
R{i,j-\)
 
và
 
là tồn
 
tại.

Từ đó và từ bất đẳng thức (1) suy ra số
 
Rii,j)
 
cũng tổn tại. Vậy / ’(/?+1) là đúng.

T heo nguyên lý qui nạp
 
P(n)
 
đúng với m ọi / > 2 ,y > 2.
 
Từ đó suy ra
 
R { ij)
 
luôn tồn
tại với m ọi
 
i > 2 , j > 2.

Chúng ta đã có các kết quả sau:

R{2,k) = R{k,2) = t ,

/?(3,3) = 6.

Khi
 
i > 2 , j >
 
2, việc tìm các số
 
R(i,j)
 
càng khó khi
 
i, j
 
càng lớn. H iện
 
nay mới chỉ biết

rất ít các số R am sey. Chúng ta sẽ tính thêm m ột vài số Ram sey.

T h í d ụ 2.
 
T im /?(3,4).

G iải:
 
Từ bổ đề 1 ta có

62

Chiừrìỉíị J. Ịìà i toán tồn tại

R {3A ) < R { 3 3 )
 
+ ^(2,4) =
 
6
 
+ 4 = 1 0 .

Để xác định xem có phải /?(3,4) <
 
10, la phải xét tất cả các cách
 
tô m àu cạnh
 
của
 
Kq.

Nếu
 
không chứa
 
K¡
 
đỏ cũng như khôrm chứa
 
K,
 
xanh với m ột cách
 
tô m àu cạnh
 
của

nó nào đó, thì
 
R{3A ) =
 
10. Còn nếu như ứng với mọi cách tô m àu,
 
Kg
 
có hoặc /<
^3 đỏ
hoặc
 
xanh thì ta lại phải xét vấn đề đó cho
 
K^.
 
Việc xét tất cả các cách tô m àu cạnh
của
 
không phải là dễ dàng, do
 
có 36 cạnh nén có tất cả 2^* > 6 0 x 1 0 ’ cách tô m àu
khác nhau.

R ất m ay là ta không cần khao sát các cách tô màu Ảụ, vì có thể sử dụng kết quả sau

đây:

Nếu / > 3, y > 3 và nếu
 
R Ụ j
- 1) và
 
R{i-
 
i
 
j )
 
là các số chán thì

R {ij)
 
< R { i j - ị ) + R {i-ì,ị)-ị
 
(2)

Chứng m inh bất đẳng thức (2) dựa vào chứng minh của Bổ đề 1.

Sử dụng (2), khi
 
i - Ĩ J
 
=
 
4, ta thu được

/?(3,4) < ^ (3 ,3 ) +
 
R{2A)
 
- 1 =
 
6 + 4 -1 -
 
9,

và như vậy /?(3,4) < 9 .

Để chỉ ra 8 không có tính chất (3.4)-Ramsey, xét cách tô m àu
 
Kg
 
m ô tả trong hình
vẽ 2, trong
 
đó các
 
cạnh liền nét được tô màu đỏ, còn các cạnh đứt nét được tô m àu
xanh.

Rõ ràng không thể tìm được
 
Kj
 
đỏ cũns như
 
Kị
 
xanh. Vậy /?(3,4) = 9.
Ví dụ 3. Tim /?(3,5).

63

Phấn I. L \ thuyết tổ hợp

G iả i: Từ (1) ta có

/?(3,5) < /?(3,4) + /?(2,5)
 
= 9 + 5 = 14.

Ta sẽ chứng minh
 
R O ,5)
 
-
 
14,
 
bằng
 
cách chỉra rằng
 
số
 
13 không có
 
tính chất

(3,5)-R am sey. Vẽ Ả'i3, các đỉnh của nó đánh số từ 1
 
đến 13. Tô màu đỏ cho cạnh
 
(i,j)

nếu I / - ý I =1, 5, 8 hay
 
12. Tô màu
 
xanh cho các
 
cạnh còn ỉại.
 
Có thể kiểrn tra được

rằng với cách tô màu đó Ả
"|3 không chứa A
T, đỏ cũng không chứa
 
Kị
 
xanh.

Bảng dưới đây cho ta những giá trị đã biết của
 
R{ij)

i \ j
 
2
 
3
 
4
 
5
 
6

2
 
2

3
 
3
 
6

4
 
4
 
9
 
18

5
 
5
 
14
 
2 5 - 2 7
 
4 3 - 5 2

6
 
6
 
18
 
3 4 - 4 3
 
5 7 - 9 4
 
1 0 2 -1 6 9

7
 
7
 
23
 
> 4 9
 
> 7 6

8
 
8
 
28
 
> 5 3
 
> 9 4

9
 
9
 
36
 
> 6 9

Các số
 
R(3,3),
 
/?(4,3), /?(5,3) và ^ (4 ,4 ) được tìm thấy từ năm 1955 bởi A.M. G leason và
R .E G leenw ood, R(6,3) - J.G. K albfleisch
 
năm
 
1966,
 
R Ợ ,3) -
 
J.E. Graver, J. Yackel
năm
 
1968, /?(8,3) - B. M cK ay và Z.Ke M in mới gần đây,
 
R{9,3) -
 
C.M . G rinstead và

S.M. R obets năm 1982.

3.5.3. T ổ n g q u á t hoá

Các số R am sey giới thiệu trong m ục trước chỉ là m ột trong họ các số R am sey. Trong
m ục này chúng ta sẽ xét m ột họ các số R am sey tổng quát hơn.

C hẳng hạn, nếu ta tô m àu các cạnh của
 
K„
 
bởi ba m àu xanh, đỏ, tím , thì số n ít nhất
phải là bao nhiêu để chắc chắn tìm được hoặc
 
K
 
ị
 
đỏ, hoặc
 
xanh hoặc
 
tím ? Số /7
nhỏ nhất có tính chất như vậy ta sẽ ký hiệu ỉà i?(3,3,3;2). Con sô' 2 được viết niiư là một
thành phần của /?(3,3,3; 2) bởi vì các cạnh (đối tượng được tô m àu) được xác dịnh bởi 2
đỉnh. Con số 2 này cũng có thể thay bởi m ột số nguyên dương bất kỳ. Ba số 3 cũng có
thể thay bởi các số nguyên dương tuỳ ý để có thể thu được m ột họ mới các số Ram sey.
V í dụ: /?(5,4,7; 2) là số nguyên dưcmg nhỏ nhất
 
n
 
sao cho với mọi cách tô m àu các cạnh
của
 
bởi 3 m àu xanh, đỏ, tím
 
K„
 
luôn chứa hoặc
 
Kị
 
đỏ hoặc
 
xanh hoặc
 
K-I
 
tím.

64

C ỉu (ơ n ^ 3. B ủ i to à ỉì tổ n ỉạ ị

Đ ịn h n g h ĩa 4,
 
Gỉa sử ¡¡,
 
....
 
lâ các so ni’uyen dỉừTiv^, ĩrong đó ij >
 
2.
 
vcri m ọi j. s ố

ỉìiỊuyên dươỉì^ m được nói lìỉ có tính clìcíí
 
(/;,
 
....
 
2)'Rarnsey nếu với m ọi cách tô

mc)iỉ c á c cọỉìh củ a K,, hởi n ỉììàu
 
1, 2, ....
 
n luôn ĩìm được íroỉìíỉ nó
 
K ị
 
m àu ij v ớ i ít n hất

m ột j nào đó.

Số
 
n g u y êr
 
dương nhỏ nhrứ với
 
t’
'nh ch'it (/ , S, .. ,
 
2)-R am sey
 
được gọi
 
là số
Ram sey /?(/|.
 
/■
„
;
 
2).

Chú ý rằng, nếu
 
n =
 
2, sô' Ram sey /?(/].
 
¡ 2
 
; 2) chính ià các số R am sey /?(/,, /2) trong
m ục trước.

Chúng ta lại có thể đặt ra câu hỏi là: Tồn tại hav chăng các số R am sey vừa được
định nghĩa? Câu trả lời là khẳng định. Đ ể chứng minh sự tồn tại của các số R am sey có
thể sử dụng phươiig pháp chứng m inh bang quy nạp.

C húng ta biết rất ít về các số R am sey /?(/|,
 
¡ 2
 
......
 
2) khi
 
n >
 
3. Tuy nhiên, nếu
 
ij =

2
 
với mọi j, thì có thể chứng m inh được rằng: /?(2,...,2; 2) = 2. Khi m ỗi
 
>
 
3, cho đến
thời điểm hiện tại mới biết duy nhất m ột giá trị /?(3,3,3; 2)
 
17.

T h í d ụ 4. (R.E. G reenw ood, A.M. G leason, 1955) Chứng minh rằng R (3,3,3; 2) = 17.

G iải. X ét m ột cách tô màu nào đó các cạnh của Ấ'i7 bởi ba màu xanh, đỏ, tím. Chọn V là
một đỉnh nào đó của
 
Kị-Ị.
 
Trong số 16 đoạn nối V với các đỉnh còn lại, theo nguyên lý
D irichlet luôn tìm được 6 đoạn có cùng một màu. Không giảm tổng quát có thể coi các
cạnh nối V với các đỉnh
 
u
 
2, 3, 4, 5, 6 cỏ cùng màu dỏ. Nếu có m ột trong số các cạnh
nối giữa các đỉnh 1 , 2 , 6
 
có màu đỏ thì cạnh này cùng với dỉnh V
 
lập thành
 
đỏ. Nếu
trái lại, 6 đỉnh
 
1, 2,
 
6 chỉ nối với nhau bởi các cạnh có hai màu xanh hoặc tím , thì

theo ví dụ m ở đầu trong số chúng luôn tìm được hoặc
 
xanh hoặc
 
tím. V ậy,
 
Kị-Ị

luôn chứa
 
đỏ, xanh hoặc tím. Do đó, y?(3,3,3; 2) < 17.

Để chỉ ra /?(3,3,3; 2)
 
>
 
16 cần xây dựng m ột cách tô màu
 
sao cho không tìm
được Ẳ^
3 cùng m àu (xem trong cuốn sách của c . Berge).

Có m ột cách khác để tiếp tục phát triển các số Ram sey và tiếp tục tổng quát hoá các ý
tưởng m à ta vừa xét. Xét bài toán m ở đầu. trong đó ta xét sự tồn tại
 
đỏ hoặc xanh
trong
 
Bắt đầu với
 
với tập đỉnh
 
V , T ã
 
xét tất cả các íập con 2 phần tử của
 
V
 
(tức là
các cạnh của
 
và chia các tập con này ra làm hai họ Cj và
 
Cj.
 
Số 6 có tính chất (3,3)-
R am sey nếu và chỉ nếu:

i)
 
Tim được tập con 3 phần
 
tứ của V sao cho mọi tập con 2 phần tử của nó đểu
thuộc vào Cj hoặc

65

Phân I . Lý thuyết tổ hợp

ii)
 
Tim
 
được tập con 3 phần tử của V sao cho mọi tập con 2 phần tử của nó đều
thuộc vào C ,.

N ếu coi C | là tập các cạnh được tô m àu đỏ và C 2 là tập các cạnh được tô m àu xanh,
thì rõ ràng ta có tam giác đỏ khi và chỉ khi điều kiện i) được thực hiện và có tam giác
xanh khi và chỉ khi điều kiện ii) được thực hiện. Tuy nhiên trong cách m ô tả này chúng
ta không cần dùng đến khái niệm cạnh. Các tính chât được phát biểu trong ngôn ngữ tập
hợp và các tính chất của ưiộl họ các tập con của nó. Cách mô tả này cho phép \é t việc
phân các tập con có kích thước
 
r
 
tuỳ ý (không phải chỉ có 2) ra thành m ột số các họ con
(không nhất thiết chỉ phân làm hai họ C |, C 2 như trong ví dụ vừa nêu). Ta đi đến định
nghĩa tổng quát sau của số R am sey

Đ ịn h n g h ĩa 5.
 
Giả sử
 
/|,
 
¡ 2
 
......
 
r
 
là các sốniịiiyên dươnq, troniỊ dó n >
 
2,
 
\'à
 
/, > /•
 
\ỚI

m ọi j. S ô 'n ụ ty é n dươììĩị m được nói ìà có rinh chất
 
(/,,
 
/„ ;
 
r)-Ramsey nếu như mệnh

đ ề sau dâ y lù đúng:

N ếu s Ici tập m plìẩn lử và các tập con V phần ỉử củơ s được phán chia

vào n họ
 
C|, C
2
,
 
c„,
 
thì với m ột j nào đ ó tìm được tập con của
 
s
 
có

lực lượng ij sao cho m ỗi tập con r p h ầ n lử của nó đều thuộc vào Cj.

Số nguyên dương nhỏ nhất có tính chất (?|,
 
/„ ; /-)-Ramsey được gọi là số Ram sey

/?(/,,
 
/„ ; r).

Đ ịn h lý 3 (R a m se y , 1930).
 
N ếu
 
/ |
 
......
 
/•
 
là các s ố nguyên dương, ỉrong đó n > 2 vả

ij> r với m ỗi j, thì s ố Ramsey
 
/?(/|,
 
,■r)
 
luôn tồn tại.

K hi r = 1, số R (i|,
 
i„ ; 1) có thể xác định khá dễ dàng, bởi vì chúng ta chỉ phải xét các
tập con
 
1 phần tử của
 
s.
 
Đ ịnh lý dưới đây cho công thức tính số này.

Đ in h lý 4.
 
R(ii,
 
i„; 1) = i,
 
+ ...+
 
i„ - (n -1 ).

C h ứ n g m in h . Đ ặt

m
 
= /, +...+ /„ -

Trước hết ta chỉ ra rằng m có tính chất (/|, .... /„; r)-R am sey. Lấy
 
s
 
là tập
 
m
 
phần tử và

chia các tập con
 
1 phần tử của nó ra làm
 
n
 
lớp
 
c
 
....
 
.
 
c„.
 
Trước hết nhận thấy rằng phải

tìm được chỉ sốýO sao cho
 
\Cp\ > ijo
 
(N ếu trái lại,
 
\CỊ < ỉị
 
với mọi
 
j,
 
thì IC^I < / - 1 . Suy ra

m =
 
IC|I + ... +IC„I < (/,-1) +...+ (/,,-1) =
 
- n = m - \
 
?!). N ếu ta lấy /^0 phần tử của

thì ta có tập con của
 
s
 
với lực lượng
 
sao cho m ọi tập con
 
1 phần tử của nó đều
thuộc Cp. Đ iều đó chứng tỏ rằng / ? ( / | , /„;
 
1) < /, +...+ /„ - (/2-1).

Bây
 
giờ
 
ta sẽ chỉ ra rằng
 
m -\
 
= ;'j +...+
 
/„ -
 
n
 
không có tính chất
 
/„ ; /-)-

R am sey. Lấy tập
 
s
 
gồm /| + ...+
 
-
 
n
 
phần tử. Phân các tập con
 
1 phần tử của nó vào
 
n

66

C h ư ơ ìì^ ĩ .
 
B ù i ĩo á n tồ n ĩọ i

lớp C],
 
c„
 
sao cho
 
lC) = ij -
 
1. Rõ ràng với cách phân chia này không thể tìm được
tệp con của
 
s
 
có
 
lực lượng
 
sao cho mọi tập con
 
1 phẩn lử của nó thuộc cùng một lổfp

c'
 
■

Khi /| = ... =
 
= 2, ta có

/?(2,...,2; D - / Ỉ +
 
1,

Sự kiện này cho thấy định lý Ramsey là sự tổng quát hoá của nguyên lý D irichlet. Bởi

vì tron.e ngôn ngữ của số Ram sey,
 
R{2.
.....
 
2;
 
]) = // +
 
1 có ngnĩa là « +
 
1 là số nguyên

dương nhỏ nhất có íính chất sau; Nếư lập
 
s
 
có lực lưọag // + 1 và nếu phân các phần tử
của nó vào /7 tập C |,
 
c„
 
thì phải tìm được tập con 2 phần tử của
 
s
 
sao cho các phần lử
của nó thuộc vào cùng m ột tập
 
nào đó. Nói cách khác luôn tìm được chỉ số
 
j
 
sao cho
tập
 
Cj
 
có ít ra là 2 phần tử. Đó chính là nội dung của rmuyên lý D irichlet.

67

Phần L Lý thuyếĩ tổ hợp

Bài tập

1. Trên m ặt phẳng cho
 
n > 6
 
điểm , khoảng cách giữa các cặp điểm là khác nhau từng
đôi. Mỗi điểm được nối với điểm gần nó nhất. Chứng minh rằng m ỗi điểm được nối với
không quá 5 điểm.

2. M ột trung tâm máy tính có 151 m áy vi tính. Các m áy của trung tâm được đặt tên bởi
một số nguyên dương trong khoảng từ 1 đến 300 sao cho không có hai m áy nào được
đặt tên trùng nhau. Chứng m inh rằng Ịuôn tìm được 2 m áv có tên )à các số nguyên liên
tiếp.

3. Các học sinh của m ột lổfp học gồm 45 nam
 
và 35 nữ được xếp ra thành m ột hàng
ngang. Chứng m inh rằng, trong hàng đó luôn tìm được hai học sinh nam m à ở giữa họ
có 8 người đứng xen vào.

4. 12 cầu thủ bóng rổ đeo áo với số từ 1 đến 12 đứng tập trung thành một vòng tròn giữa
sân. Chứng m inh rằng luôn tìm được 3 người liên tiếp có tổng các số trên áo là lớn hơn
hoặc bằng 20

5. Chứng m inh rằng trong sô' 10 người bất kỳ bao giờ cũng tìm được hoặc là hai người
có tổng số tuổi là chia hết cho 16, hoặc là hai người m à hiệu số tuổi của họ là chia hết
cho 16.

6. Cần có ít nhất bao nhiêu bộ có thứ tự gồm 2 số nguyên (ứ,
 
h)
 
sao cho chắc chắn tìm
được trong số đó hai bộ (c,
 
d)
 
và
 
{e ,f)
 
sao cho
 
c - e vằ
 
d - f \ ằ
 
các số có chữ sô' tận cùng
bằng 0?

7. 17 nhà bác học đôi m ột viết thư trao đổi với nhau về 3 chủ đề, mỗi cặp chỉ trao đổi
với nhau về
 
1 chủ đề. Chứng m inh rằng luôn tìrii được 3 nhà bác học đôi m ột viết thư
trao đổi với nhau về cùng m ột chủ đề.

8. Trong không gian cho 9 điểm có toạ độ nguyên. Chứng m inh rầng trong số 9 điểm đã
cho
 
luôn
 
tìm
 
được
 
hai
 
điểm
 
sao
 
cho
 
đoạn
 
thẳng
 
nối
 
chúng
 
đi
 
qua điểm
 
có
 
toạ độ
nguyên.

9. Chứng m inh rằng trong số
 
10 người bất kỳ luôn tìm được hoặc là 4 người đôi một
quen nhau và 3 người đôi m ột không quen nhau hoặc là 4 người đôi m ột không quen
nhau và 4 người đôi m ột quen nhau.

68

C ỉìK ơ n i^ 4 . B í'ii ĩ o ú n
 
l iẹ ỉ k é

4

BÀI TOÁN LIỆT KẼ

4.1. Giới thiệu bài toán

Nếu như trong bài toán đếm (xein chưcĩng 2), ta chỉ đòi hỏi đếm sỏ' cấu hình tổ hợp là
bao nhiêu thì trong nhiều tình huống, ta còn phải cần chỉ rõ những cấu hình tổ hợp đó là
những cấu hình nào. Bài toán đưa ra danh sách tất cá càu hình tổ hợp có thể có, được
gọi là
 
hài toán liệt kê tổ hợp.
 
Vì thố, khác với bài toán đếm tìm kiếm m ột công thức cho
lời giải, bài toán liệt kê lại cần
 
xác dịnìì một thuật toctn
 
để theo đó có thể lần lượt xây
dựng được tất cả các cấu hình đang quan tâm. Rõ ràng có nhiều cách liệt kê, tuy nhiên
chúng phải đảm bảo 2 nguyên tắc:

•
 
không được lặp lại m ột cấu hình,

•
 
không được bỏ sót m ột cấu hình.

Có thể nói rằng phương pháp liệt kê là cách cuối cùng để có thể giải được m ột số
bài toán tổ hợp hiện nay. Khó khăn chính của phương pháp này là sự "bùng nổ tổ hợp".
Để xây dựng chừng 1 tỷ cấu hình (con số này không phải là lớn đối với các bài toán tổ
hợp - xem lại các số m ất thứ tự D,„ số phân bố í/„, số hình vuông la tinh /,„ ...) và giả
thiết rằng
 
mỗi thao tác
 
xây dựng m ất khoảng
 
1
eiây,
 
ta
 
phải bỏ ra
 
quãng 31năm mới

giải xong.
 
Tuy nhiên với sự phái triển của máy tính điện tử,bằng
 
phương
 
pháp liệt
 
kê,

nhiều bài toán tổ hợp đã tìm thấy lời giải. M ặt khác, chính sự nỗ lực tìm kiếm những
giải pháp hữu hiệu cho những bài toán khó thuộc lĩnh vực này, đã thúc đẩy mạnh m ẽ sự
phát triển của nhiều ngành toán học. Trong chương này, sau phần giới thiệu khái niệm

69

Phần
 
7
.
 
Lý thuyết tổ hợp

thuật toán, chúng ta sẽ trình bày hai phương pháp liệt kê thường sử dụng nhất, đó là
Thuật toán sinh và đặc biệt là thuật toán quay lui, m ột thuật toán có tính phổ dụng cao.

4.2. Thuật toán và độ phức tạp tính toán

N hư đã giới thiệu ở trên, ta hiểu việc giải bài toán liệt kê là xây dựng m ột thuật toán để
theo đó có thể lần lượt xây dựng được tất cả các cấu hình cần quan tâm. V ậy cần hiểu
thuật toán là gì?
 
Mục này dành để giới thiệu khái niệm thuật toán và m ột số vấn đề liên

q u a n c ầ n
 
th iế t c h o
 
v iệ c tr ìn h b à y
 
c á c c h ư ư n g sa u .

4.2.1. Khái niệin thuật toán

Thuật toán đã được biết đến từ rất lâu. Bản thân thuật ngữ T huật toán (A lgorithm ) là
viết
 
tắt
 
tên
 
của
 
nhà
 
toán
 
học
 
th ế
 
kỷ
 
thứ
 
IX:
 
A bu
 
Ja'fa
 
M oham m ed
 
ibn
 
M usa
 
al-
K howarizm i. Đ ầu tiên, thuật toán được hiểu như là các qui tắc thực hiện các phép tính
số học với các con số được viết trong hệ cơ đếm thập phân. Cùng với sự phát triển của
m áy tính, khái niệm thuật toán càng được hiểu theo nghĩa rộng hơn và chính xác hơn.
K hái niệm
 
thuật toán được định nghĩa m ột cách hình thức chính
 
xác thông qua máy
Turing. Tuy nhiên, trong giáo trình này chúng ta chưa cần đến định nghĩa chính
 
xác
này, m à có thể hiểu thuật toán m ột cách trực quan hơn qua định nghĩa sau.

Đ ịn h n g h ĩa .
 
Ta hiểu thuật toán giải bài toán đặt ra là một thủ tục xác định hao gồm

mộ! dãy hữu hạn các hước cán thực hiện đ ể thu được lời giải của bài toán.

Thuật toán có các đặc trưng sau đây:

•
 
Đẩu vào (Inpul):
 
Thuật toán nhận dữ liệu vào từ một tập nào đó.

•
 
Đ ầu ra (Output):
 
Với mỗi tập các dữ liệu đầu vào, thuật toán đưa ra các dữ liệu
tương ứng với lời giải của bài toán.

•
 
Chính xá c (Precision):
 
C ác bước của thuật toán được m ô tả chính xác.

•
 
Hữu hạn (Finileness):
 
Thuật toán cần phải dưa được đầu sau m ột số hữu hạn
(có thể rất lón) bước với m ọi đầu vào.

•
 
Đơn
 
tri (Uniqueness):
 
Các kết quả trung gian của từng bước thực hiện thuật
toán được xác định một cách đơn trị và chỉ phụ thuộc vào đầu vào và các kết
quả của các bước trước.

•
 
Tổng quát (Generality):
 
T huật toán có thể áp dụng để giải m ọi bài toán có dạng
đã cho.

T h í d ụ 1., Cho 3 số nguyên
 
a, h, c.
 
M ô tả thuật toán tìm số lớn nhất trong ba sô' đã cho.

70

C hươnịĩ 4. Bcii ío¿m ỉiệĩ kê

(lia i. Tuy rang bài toán đặt ra là rất đơn giản nhưrm mục đích của chúng ta là dùng nó
để giải thích khái niệm thuật toán. Thuật toán gổm các bước sau:

Bước 1. Đ ặt
 
:=
 
a\

Bước 2. Nếu
 
h >
 
X
 
thì đặt
 
x\=b\

Bước 3. Nếu
 
c >X,
 
thì đạt
 
x:~c.

Tư tưởng cửa thuật toán là duyệt lần lượt giá trị của từng số và giữ lại giá trị lớn
nhất vào biến ,v. K ết thúc thuật toán X cho số nguvên lớn nhất trong 3 số đã cho.

Ký hiệu
 
y
 
z
 
trong mô lả thuật toán ờ trên có nghía là thay thê giá tri đang có của

V
 
b ở i
 
giá trị
 
c ủ a z.
 
Khi phép toán
 
V
 
:= 2
 
được thực hiện xong,
 
g iá
 
trị của
 
z
 
không
 
b ị
 
thay
đổi. Ta gọi := là
 
ĩoán tử gán.

Bây giờ ta sẽ theo dõi quá trình thực hiện thuật toán với những giá trị cụ thể của
 
a,

b, c.
 
Truớc hết giả sử

a
 
=
 
l ,
 
b
 
= 5,
 
c
 
- 3 .

Tại bước 1, ta đặt giá trị của
 
-V
 
là a ( 1). Tại bước 2, do /? >
 
A'
 
(5 > 1 ), nên
 
.V
 
được đặt bằng
b (5). Tại bước 3, do điểu kiện
 
c >
 
X
 
(3 > 5) không được thực hiện, nên ta không phải
làm đông tác gán. Kết thúc thuật toán, A
' có giá trị 5 là giá Irị lớn nhất trong 3 số a,
 
h, c.

Giả sử

a
 
=
 
b = 2 ,
 
r
 
=
 
3 1 .

Tại bước
 
1, ta đặt giá trị của
 
A'
 
là
 
a
 
(7). Tại bước 2, do điều kiện
 
b >
 
X
 
{2 > 7)
 
không
thoả m ãn, nên ta khỏng làm gì cả.. Tại bước 3, do
 
c >
 
X
 
(31 > 7), nên ta gán
 
X
 
bằng 31.
Kết thúc thuật toán,
 
-V
 
có giá trị
 
31
 
là
 
giá trị
 
lóĩi
 
nhất trong
 
3
 
số
 
a, b, c.

Bây giờ ta sẽ thấy rằng thuật toán vừa mô tả có các tính chất nêu ở trên.

T huật toán nhận
 
đẩu vào
 
là ba số a, b, c và đưa kết quả ư
 
dáu ra
 
là X.

Các bước của thuật toán được mô tả
 
chính xcíc
 
đốn mức ta có thể viết chưcmg trình
theo thuật toán trên ngôn ngừ lập trình và thực hiện tren máy tính.

Nếu dầu vào là đã xác định, kết quả tại mỗi bước của thuật toán được xác định duy
nhất. Chẳng hạn, với đầu vào

ứ = 7,
 
b = 2,
 
c
 
= 31,

tại bước 3 của thuật toán, X luôn được đặt bằng 31,
 
không phụ thuộc vào
 
việc thuật toán

được thực hiện bằng tay hay
 
bởi máy tính.

Thuật toán kết thúc sau
 
ba bước và đưa ra lời giải của bài toán, vì vậy, thuật toán là

hữu hạn.

Thuật toán trình bày trong ví dụ luổn đưa ra giá trị của số lófn nhất trong ba số
 
hất

kỳ,
 
như vậy, thuật toán có tính tổng quát.

71

P h ẩ n
 
I . L ý th u y ế t t ổ hợ p

4.2.2. M ỏ tả thuật toán bàng ngôn ngữ phỏng PA SC A L

Cách mô tả thuật toán bằng lời như trình bày trong thí dụ ở m ục trên không thật thuận
tiện
 
cho
 
việc
 
cài
 
đặt
 
thuật
 
toán
 
trên
 
những
 
ngôn
 
ngữ
 
lập
 
trình
 
cụ
 
thể,
 
chẳng
 
hạn
PASCAL, c ,
 
BASIC,... Tất nhiên có thể m ô tả thuật toán sử dụng m ột ngôn
 
ngữ lập
trình nào đó. Khi đó ta chỉ có thể sử dụng những cấu trúc lệnh của ngôn ngữ đã chọn.
Đ iều đó có thể làm cho việc m ỏ lả thuật toán trở nên phức tạp đồng thời cũng rất khó
hiểu. Vì thế, để m ô tả thuật toán ta sử dụng ngôn ngữ phỏng PASCAL, trong đó cho
phép vừa mô tả thuật toán bằng ngôn ngữ đời thường vừa sử dụng những cấu trúc lệnh
tương tự như của ngôn ngữ lập trình PASCAL (tất nhiên, các qui tắc cú pháp của ngôn
ngữ lập trình PASCAL không nhất thiẽt phải tuân thủ). Dưới đây ta liệt kê m ột sô' câu
lệnh chính được sử dụng để mô tả thuật toán.

Câu lệnh p ro cedureự unction).
 
M ô tả thuật toán trong ngôn ngữ phỏng PASCAL được
bắt đâu từ câu lệnh p r o c e d u r e (function), trong đó ta đặt tên cho thuật toán và mô tả
danh sách biến của thuật toán. Chẳng hạn, câu lệnh
fu n c tio n
 
ma.ximum(a,b,c):

cho biết tên thuật toán được m ô tả là
 
maximum,
 
có 3 biến
 
ơ, b, c;

p ro c e d u re
 
Hoanvi(n);

cho biết tên thuật toán được m ô tả là
 
Hoanvi
 
với biến là
 
n.

Các bước của thuật toán được m ô tả trong
 
thân thủ tục (hàm)
 
được bắt đầu
 
bởi
begin và kết thúc bởi end.

Thí dụ:

function
 
maximum{a,h,c):

begin

(Thân hàm).

end;

p ro c e d u re
 
Hoanviịn);

begin

(Thân thủ tục).

end;

C h ú ý: Khi mò tả thuật toán bắt đầu bằng fu n c tio n , khi kết thúc làm việc, thuật toán sẽ
dưa ra giá trị được ghi nhận trong tên hàm . Vì vậy trong thân
 
hàm phải có m ặt câu lệnh
gán giá trị cho hàm. Trong ví dụ trên
 
maxim um
 
sẽ ghi nhận giá trị lớn nhất trong ba
biến
 
a, b, c.

72

C hương 4. B ù i to á n
 
liệ t ké

C áu lệnh gán.
 
Câu lệnh gán được sử dụng để gán giá trị cho các biến. V ế trái của câu
lệnh là tên của biến, còn vế phải là biểu thức của các hằng, biến đã gán giá trị hoặc các
hàm đã được định nghĩa. Ký hiệu := được sử dụng để biểu diễn phép gán.

T h í dụ:

•
 
variable := expression:

•
 
m ax
 
a;

•
 
X
 
số 'ớn n h ít trong các sô'
 
rii,
 
ứ,,.
 
a„\

K h ố i c á u lệnh.
 
Các câu lệnh có thê nhóm lại thành một khối. Đ ể m ô tả khối lệnh ta sử
dụng
 
begin
 
và
 
end.

Thí dụ:

begin

Câu lệnh 1:

Câu lênh 2;

C áu lệnh n;

en d ;

Các câu lệnh trong khối được thực hiện tuần tự. Dưới đây, thuật ngữ
 
câu lệnh
 
được
dùng để chỉ chung m ột câu lệnh cũng như m ột khối câu lệnh.

C h ú giải.
 
Đ ể diễn giải thêm nội dung của các đoạn lệnh có thể sử dụng các câu chú
giải. Các dòng chú giải được đạt trong dấu hai dấu {) hoặc (*
 
*).

T h í d ụ :

(*
 
X
 
là phần tử lớn nhất trong danh sách L *)

{
 
d
 
là số phần tử của danh sách L }

C âu lệ n h điề u kiện.
 
Câu lệnh đơn giản là

if
 
điều kiện
 
th en
 
cáu lệnìr,

Khi thực hiện câu lệnh,
 
điều kiện
 
sẽ được kiểm tra, nếu nó được thoả m ãn thì
 
càu

lệnh
 
sẽ được thực hiện.

N hiều khi ta cần phải thực hiện m ột thao tác nào đó khi điều kiện được thực hiện,
còn nếu ngược lại ta lại phải thực hiện m ột thao tác khác. Khi đó, có thể sử dụng câu
lệnh phức tạp hơn sau đây

73

Phần 1. Lý thuyết tổ hợp

if
 
điều kiện
 
th e n
 
câu lệnh 1

else
 
câu lệnh
 
2;

C ác cáu lệnh lặp.
 
Ta sẽ sử dụng các câu lệnh sau đây

fo r
 
biến := g iá J rị_ đ ầ u
 
to
 
g iá _ tr ị_ c u ố i
 
do
 
Câu
 
lệiìh;

Tại đầu vòng lặp,
 
biến
 
sẽ được gán cho
 
giá_ trị_ đẩu,
 
nếu giá trị đầu nhỏ hơn hơn hoặc
bằng giá trị cuối và
 
câu lệnh
 
sẽ được thực hiện với giá trị này của
 
hiến.
 
Tiếp đến, giá trị
của
 
biêh
 
sẽ tăng lên 1 và
 
câu lệnh
 
sẽ được thực hiện với giá trị mới của
 
hiến.
 
Q uá trình
sẽ được tiếp tục cho đến khi
 
biến
 
bằng
 
giá_ trị_ cuối.
 
Sau khi thực hiện xong
 
cáu lệnh

với giá trị của
 
biến
 
bằng
 
giá_ trị_ cuối,
 
sẽ chuyển sang thực hiện câu lệnh tiếp íheo.
N ếu
 
giá_ trị_ đầu
 
lớn hưn
 
giá_ trị_ cuối
 
ihì không có câu lệnh nào được thục hiện.

Câu lệnh lặp thứ hai được sử dụng là câu lệnh "while" sau đây

w hile
 
điều kiện
 
do
 
câu lệnh',

K hi câu lệnh này được sử dụng, điều kiện sẽ được kiểm tra, nếu nó là đúng thì
 
câu lệnh

được thực hiện, điều đó có thể dẫn tới sự thay đổi giá trị của các biến trong
 
điều kiện.

N ếu điều kiện vẫn là đúng sau khi thực hiện
 
cáu lệnh
 
thì
 
câu lệnh
 
lại được thực hiện.
Đ iều đó
 
sẽ
 
tiếp diễn cho đến khi
 
điều kiện
 
là sai.

Câu lệnh lặp thứ ba được sử dụng là câu lệnh "repeat" sau đây

re p e a t
 
câu lệnh
 
u n til
 
điều kiện',

Khi câu lệnh n ày đ ư ợ c sử dụng,
 
cáu lệnh
 
được thực hiện, điều đó có thể dẫn tới sự thay
đổi giá trị của các biến trong
 
điều kiện.
 
N ếu điểu kiện vẫn là đúng, thì
 
câu lệnh
 
lại
được thực hiện. Đ iều đó sẽ tiếp diễn cho đến khi
 
điều kiện
 
là đúng.

T h í d ụ 2. T huật toán tìm số lớn nhất trong 3 số trong thí dụ 1 có thể m ô tả như sau
fu n c tio n
 
maximum{a,b,c)\

begin

x:=a;

i f

b
 
>
 
X
 
t h e n

x : = h \
 
( *
 
N ế u

b
 
lổ n h ơ n

X
 
th i g á n
 
lạ i X
 
* )

if
 
o
 
x
 
th e n
 
x:=c,
 
(*
 
N ếu c lớn hơn X thì gán
 
lại Jt
 
*)

maximum:= x;

end;

74

ChươiiíỊ 4. Bài toán liệt ké

T h í dụ 3.
 
Thuật toán tìm sô' lớn nhất trong dãy hữu hạn số.

Đ ầu vào: Dãy gồm
 
n
 
số ữ,,
 
Ú
2
 
, ■■
 
a„.

Đầu ra:
 
large -
 
số lớn
 
n h ấ t
 
trong dãy đã cho.

procedure
 
Find_Large(a, n, large);

begin

large:=ai;

for
 
i:= 2
 
to
 
n
 
do

(*
 
Nếu
 
a
 
lớn bơn
 
laríỊe
 
thì gán lại
 
lar^e
 
*)

if
 
(3, >
 
l a r g e
 
th en large,
 
-a ,.;

end;

Trong việc giải các bài toán phức tạp, ta thường phải phân rã nó ra thành các bài
toán con. Ta sẽ xây dựng các thủ tục để giải các bài toán con, sau đó các thủ tục này sẽ
được tập hợp để giải bài toán đặt ra. Thí dụ dưới đây minh hoạ cho tư tưởng này.

T hí dụ 4.
 
Tim sô' nguyên tố lớn hơn số nguyên dương
 
n.

G iải.
 
Trước hết ta xây dựng thủ tục kiểm tra xem một sô' nguyên dương
 
m
 
có phải là số
nguyên tố hay không (Thủ tục
 
Nguyên J ô ) .
 
Sử dụng thủ tục này ta xây dựng thuật toán
giải bài toán đặt ra. Do ước số nguyên tố của số nguyên dương
 
m
 
bao giờ cũng không

vượt quá
 
4 m
 
, nên
 
m
 
sẽ là số nguyên tô' nếu như nó không có ước số nào trong các số

nguyên dương từ 2 đến
 
[
 
'ím
 
].

•
 
Thuật toán kiểm tra một s ố nguyên dương có phải là nguyên t ổ hay không.

Đầu vào: Số nguyên dương
 
m.

Đầu ra:
 
tr u e nếu m là số nguyên tố, false nếu ngược lại.

function
 
N guyen_to(w );

begin

i:=2;

w hile
 
(i <=
 
4 m )
 
and
 
(m m od i = 0) do i:= i+ l;

N guyen_to := i >
 
;

end;

Thuật toán tìm s ố nguyên tô'lớn hơn sô' nguyên dương n.

Thuật toán này sử dụng thuật toán N guyen_to ở trên như thủ tục con.
Đầu vào: Sô' nguyên dưcmg
 
n.

Đầu ra
 
;
 
m -
 
số nguyên tố lớn hon 7
7
.
p ro c e d u re
 
Lagre_fVime(/ỉ);
begin

75

P h ầ n
 
1. L ý th u y ế t t ổ h ợ p

m : - n + ỉ ;

w hile
 
n o t
 
N guyen_to(w )
 
d o
 
m := m + I;

e n d ;

Do tập các sô' nguyên tô' là vô hạn, nên thuật toán L agre_Prim e là hữu hạn.

4.2.3. Độ p h ứ c tạ p c ủ a th u ậ t to á n .

M ột chương
 
trình
 
m áy
 
tính, m ặc
 
dù
 
được
 
cài đặt theo
 
m ột thuật
 
toán
 
đúng,
 
có
 
thể
không cho kết quả mong m uốn đối với m ột bộ dữ liệu nào đó vì hoặc là nó đòi hỏi quá
nhiều thời gian, hoặc là không có đủ bộ nhớ để lưu giữ dữ liệu và các biến của chương
trình. Vì vậy, để có thể đánh giá khả năng ứng dụng của chương trình la cần phải phân
tích hiệu quả của thuật toán.
 
Phán tích thuật toán
 
là quá trình tìm ra những đánh giá về

thời gian tính
 
cũng như
 
dung lượng hộ n h ớ
 
cần thiết để thực hiện th u ật toán.
 
Đ ộ phức

tạp tính toán
 
của m ột thuật toán là lượng thời gian và bộ nhớ cần thiết để thực hiện
thuật toán. Trong m ục này ta quan tâm đến việc đánh giá thời gian cần thiết đê thực
hiện thuật toán (ta sẽ gọi là
 
thời gian tính
 
của thuật toán).

Rõ
 
ràng, thời gian
 
tính
 
của m ột thuật toán
 
là hàm
 
của
 
dữ liệu
 
đầu
 
vào.
 
Thông
thường khó có thể xây dựng công thức dưới dạng hiện cho hàm này, vì th ế ta đăt vấn đẻ
đơn giản hơn. Thay vì làm việc với dữ liệu đầu vào, ta sẽ làm việc với m ột đặc trưng
quan trọng của dữ liệu đầu vào, đó là
 
kích thước
 
của nó. C húng ta sẽ quan tâm đến

•
 
Thời gian tối thiểu cần thiết để thực hiện thuật toán với m ọi bộ dữ liệu đầu vào
kích thước
 
n.
 
Thời gian như vậy sẽ được gọi là
 
thời gian tính tốt nhất
 
của thuật
toán với đầu vào kích thước
 
n.

•
 
Thời gian nhiều nhất cần thiết để thực hiện thuật toán với m ọi bộ dữ liệu đầu
vào kích thước
 
n.
 
Thời gian như vậy sẽ được gọi là
 
thời gian tinh tồi nliãt
 
của
thuật toán với đầu vào kích thước
 
n.

•
 
Thời gian trung bình cần thiết để thực hiện thuật toán trên tập hữu hạn các đầu
vào kích thước
 
n.
 
Thời gian như vậy sẽ được gọi là
 
thời gian tính trung hình
 
của
thuật toán.

Đ ể tính toán thời gian tính của thuật toán ta sẽ đếm
 
s ố cáu lệnh
 
m à nó phải thực
hiện, hoặc trong m ột số trường hợp có thể đếm
 
cụ thể số phép tính
 
số học, so sánh,
gán,.... m à thuật toán đòi hỏi thực hiện. Rõ ràng từ thông số này ta có thể tính được thời
gian thực sự m à thuật toán đòi hỏi nếu như nó được cài đặt trên m ột ngôn ngữ lập trình
và chạy trên m ột m áy tính cụ thể. M ặt khác thông số này không phụ thuộc vào người
lập trình và ngôn ngữ lập trình được chọn để cài đặt thuật toán cũng như m áy tính m à
trên đó nó được thực hiện. Vì th ế nó là tiêu chuẩn khách quan để đánh giá hiệu quả của
thuât toán.

76

C h ư ơ n g 4. B à i to á n ỉiệ t kẽ

T h í dụ 5. X ét thuật toán tìm số lớn nhất trong dãy hữu hạn số ở thí dụ 3. Trong thuật
toán này, số lượng phần tử của dãy số
 
n
 
là đại lượng hợp lý nhất có thể dùng để đánh
giá kích thước đầu vào. Rõ ràng vòng lặp trong thuật toán luôn thực hiện đúng
 
n -\
 
lần
nên tất cả thời gian tính tôì nhất, tồi nhất cũng như trung bình của thuật toán đều bằng
//-1.

Thông thường, trong các ứng dụng thực tế thời gian chính xác m à thuật toán đòi
hỏi để thực hiên nó được quan tâm ít hơn so với việc xác định tốc độ tăng của thông số
này khi tăng kích thước của đầu vào. Thí dụ., giả sử thời gian tính tồi nhất của m ột thuật
toán là

t{n) =
 
60
 
tr
 
+ 9« + 9

với đầu vào kích thước
 
n.
 
Khi
 
n
 
lớn số hạng 60/ỉ^ xấp xỉ bằng
 
t{n)
 
(xem bảng 1). Trong
trường hợp này
 
t{n)
 
có tốc độ tăng giống như 60/7^

n
 
t{n)
 
= 60/ỉ^
 
+ 9n + 9
 
60«^

10
 
9099
 
6000

100
 
600909
 
600000

1000
 
60009009
 
60000000

10000
 
6000090009
 
6000000000

N ếu như
 
t(n)
 
được tính bằng giây, thì

T ị n ) ^
 
/ỉ^ + 0 J 5 «
 
+ 0.15
sẽ cho ta thời gian tính đo bằng phút của thuật toán. Rõ ràng sự thay đổi này không ảnh
hưởng đến tốc độ tăng của thời gian tính khi kích thước đầu vào
 
n
 
tăng, mà chỉ thay đổi
đơn vị tính thời gian.
 
Như vậy khi mô tả tốc độ tãng của thời gian tính của thuật toán
khi kích thước đầu vào tăng, không những chúng ta chỉ cần quan tâm đến số hạng trội
(60
 
n^),
 
m à có thể bỏ qua các hằng số. Với giả thiết như vậy, thời gian tính
 
t{n)
 
tăng
giống như
 
khi
 
n
 
tăng. Ta sẽ nói
 
t{n)
 
có bậc là
 
và viết

t{n)
 
=
 
Q(n^).

Tư tưởng cơ bản ở đây là thay th ế biểu thức /(«) = 60«^ + 9/1 + 9 bởi biểu đơn giản hem
c ó
 
c ù n g
 
t ố c
 
đ ộ
 
t ă n g
 
v ớ i

t { n ) .
 
T a đ i đ ế n
 
đ ị n h n g h ĩ a s a u

Đ ịnh n g h ĩa .
 
Giả s ử f
 
và g là các hàm đối sô'nguyên dương. Ta viết

f{n )
 
= 0 (^(« ))

và
 
n ó if{n ) có bậc không quá
 
nếu tổn tại hằníỊ s ố dương
 
C|
 
và sô' nguyên dương Nị

sao cho

\f{ n )\
 
< c , \ g { n ) \

với mọi n > N ị.

Ta viết

77

Phẩn ỉ. Lý thuyết tổlụ/Ị?

f{n) = D.{g{n))

và nói f{n) có bậc ít nhất là
 
nếu tồn tại hằng s ố dương C
 
2
 
và s ố nguyên dươnq Nj

sao cho

\f(n)
 
I <
 
c , I ,ẹ(/7) I

với m ọi n > N
 
2
 
-

Ta viết

f(n ) = @{g(n))

và nói f{n) có bậc là g(n) n ếu f{n )
 
=
 
0(g{nỴ) và f{n ) = Q(g(rj)).

Đ ịnh nghĩa trên có thể phát biểu bằng lời như sau: /(« ) =
 
0 (g(n)),
 
nếu ngoại trừ
hằng sô' và m ột số hũti hạn ngọai lệ
 
f
 
bị chặn dưới bởi
 
g. f(n ) = Cl(g(n)),
 
nếu ngoại trừ
hằng số và m ột số hữu hạn ngoại l ệ /
 
bị chặn trên bởi
 
g.
 
f{n) =
 
0(^ẹ(«)), nếu ngoại trừ
hằng số và m ột số hữu hạn ngoại l ệ / bị chặn dưới và chận trên bởi
 
g.

Các biểu th ứ c/(n ) =
 
0{g{n)),f{n) = Q(g(n)) và /(n ) = 0(g(/í))
 
thường được gọi là ký
hiệu ô lớn, ôm êga, têta đối với h à m /.

T h í d ụ 5. Do

60n^
 
+ 9« + 9 < 60
 
+
 
9n^ +
 
=70
 
với m ọi
 
n >
 
ì,

chọn C | = 70 trong định nghĩa trên ta có
60«^
 
+ 9n + 9 = O(n^).

Do

60/7^ + 9« + 9 > 60
 
với m ọi
 
/í >
 
1,

chọn C 2 = 70 trong định nghĩa trên ta có
60/j' + 9« + 9 = n
 
(n^).

Do
 
60n^ +9n + 9 = O(n^)
 
và
 
60n^ + 9n + 9 = Q (n^)
 
nên

60n^ + 9n + 9 ^
 
e ( n \

Phưcmg pháp chứng m inh trong thí dụ 5 có thể sử dụng để chỉ ra rằng mọi đa thức bậc
 
k

với hệ số dương:

P ị , ( n )
 
=
 
ứị.
 
+
 
. . . +
 
a ,
 
/ 7
 
+
 
ữ()

có bậc là 0(/z*):
 
Pi.(n) -
 
0(/i*).

T h í d ụ 6.
 
G iả sử
 
k
 
là số nguyên dương. Ta có

+ 2* + . . . + /?
'■
' <
 
A
ỉ* + «^ + . . . + A
7
*
 
=
 
n.
 
/?*'
 
=

khi « > 1; suy ra

1* + 2 ' + . . . + /í'
 
= 0 ( /1'" ') .

M ặt khác, vì

1* + 2* + . . . +
 
>
 
[nl2f + . . .
 
+(«-!/■ +

78

Chươníĩ 4. ßüi loan ỉiệt ké

> [n!2Ỵ
 
+ . . . 4-
 
[ nHỸ

> {n/2).(n/2f =

nên

1' + 2 ' + . . . + /ì* = n (
 
),

do đó

1* + 2 * +
 
= © (/;* "').

T h i dụ 7. Ta sẽ chứng minh

Ig/ì!
 
= © (/7 lg « ).

Ta có

Ig/ỉ!
 
= Ig « + Ig (n-1) + . . . + !g 2 + Ig 1.

Do hàm Iglà hàm tăng,
 
nên

I g
 
n +
 
I g
 
(n
- 1 )
 
+ ..
 
.
 
+
 
I g
 
2
 
+ I g
 
1
 
<
 
I g
 
«
 
+
 
I g
 
n
 
+
 
.
 
.
 
.+
 
I g
 
/7
 
=
 
/7
 
I g
 
/7 .

Vì vậy

Ig
 
n\
 
-
 
0
(«
 
Ig
 
n).

Bây giờ, do

Ig
 
n
 
+
 
Ig (/ỉ-1)
 
+
 
..
 
. + Ig2 +
 
Ig1
 
>
 
Ig /ỉ + Ig
 
(n-1) +
 
. . . + Ig [/ỉ/2]

> Ig [«/2J + Ig [n/2] + . . . + Ig [/7/2]

>
 
(n/2)
 
lg(/ỉ/2)
 
>
 
(n Ig /z)/4,

suy ra

Ig/ỉ!
 
= Q ( n \ g n ) .

Vậy

\ g n \
 
= ©(« Ig «).

Bây giờ ta có thể định nghĩa bậc của thời gian tính tốt nhất, tồi nhất, và trung bình của
thuật toán như sau

Đ ịn h n g h ĩa.
 
N ếu thuật toán đòi hỏi ihời í>ian tính tốt nhất là t(n) với độ dài đẩu vào n

t{n) = OigỌi))

thời gian tính ìốì nhất của thuật toán có bậc không quá ^{n) hay tkờỉ gian tính tốt nhất

của tlìuật toán là 0{g{n)).

N ếu thuật toán đòi hỏi (hời gian íính tồi nhấì là t(n)
 
VỚI
 
độ dài đcìu vào n và

ì{n)
 
=
 
0{g{n))

thời gian tính ìồi nhất của tlĩuật toán có bậc khôn^ quá ^{n) hay thời gian tính tồi nhất

của thuật (oán là Oig(rĩ)).

N ếu thuật toán đòi hỏi thời gian tính trung bình là
 
/(/?)
 
với độ dài đầu vào n và

ĩ{n) = 0{g{n))

79

Phần I . Lý thuyết tổ hợp

thời gian tính trung hình của thuật toán có bậc không quá g{n) hay thời gian tính trung

binh của thuật toán là 0(g(n)).

Nếu thay o
 
bởi í ì và
 
"không quá"
 
bởi
 
"ít nhất"
 
trong định nghĩa trên ta thu được định
nghĩa bậc ít nhất của thời gian tính tốt nhất, tồi nhất, trung bình của thuật toán. Nếu thời
gian tính tốt nhất của thuật toán vừa là
 
0{g(n))
 
vừa là
 
Q.{g{n)),
 
ta sẽ nói thời gian tính
tốt nhất của thuật toán là
 
Q{g(n)).
 
Tương tự như vậy, ta cũng định nghĩa thời gian tính
tồi nhất và trung bình của thuật toán là
 
Q(g(n)).

T h í d ụ 8. Đ ánh giá số lần thưc hiện câu lệnh jr. = .r+ l
 
trong
 
đoạn
 
chưOTg
 
trình
 
sau như

là hàm của đầu vào
 
n:

for
 
i:=l to n do

for j;= l to i do

x := x + 1
 
,■

Đấu tiên / được đặt bằng
 
1, và ý sẽ chạy từ 1 đến
 
1, lệnh
 
x:= x + ỉ
 
được thực hiện
 
1 lần,
tiếp đến
 
i
 
được đật bằng 2, và
 
j sẽ
 
chạy từ 1 đến 2, lệnh
 
x:= x + ỉ
 
được
 
thực
 
hiện 2 lần,...

Do đó tổng số lần thực hiện câu lệnh
 
x:=x-¥
 
1 là

1 + 2 + . . . + « =
 
0(/í^).

T h í dụ 9. Đ ánh giá
 
t{n) -
 
số lần thực hiện câu lệnh
 
x := x + l
 
với độ dài đầu vào là
 
n
 
trong
đoạn chương trình sau:

j:= n;

w hile ỹ > =
 
1 do

begin

for
 
i : = l t o j d o
 
x : = x + l ;

j: = j
 
div 2;

end;

Lần thực hiện đầu tiên trong vòng lặp w hile câu lệnh
 
x:=x+l
 
được thực hiện
 
n
 
lần. Vì
vậy,
 
t{n) = D.{n).
 
Sau lần thực hiện đầu tiên giá trị của
 
j
 
được thay bởi [//2], vì th ế
 
i <

tiỊl.
 
N ếu ý > 1, thì câu lệnh X ;=
 
x+1
 
được thực hiện không quá
 
n H
 
lần trong lần lặp thứ
hai,... Nếu ký hiệu
 
k
 
là số
 
lần thực hiện các lệnh trong thân của câu lệnh w hile, thì sô'
lần thực hiện câu lệnh
 
X := x+ l
 
là không quá

n +
 
n/2 + n/4 + . . . +
 
/í/2*-' = « ( l- l/2 ') /( 1-1/2).

80

Chương 4. Bài loan ỉỉệĩ kê

Bây giờ, do

m
 
<
 
A
Z
(1 - 1/2') / (1 - 1/2) = 2//(l
 
- 1/2') < 2/í,

nên
 
t{n)
 
=
 
0{n).

Cuối cùng, do ở trên ta đã có /(/;) =
 
0.(n),
 
nên
 
t{n) -
 
©(/7).

T h í d ụ 10.
 
Để giải bài toán; Tìm trong dãy số

s , S
2
 
■
■
 
’

m ột phần tử có giá trị bàng
 
key
 
chơ trước, có ỉhể áp dụng thuật toán sau
Đ ầu vào;
 
n
 
và dãy số 5|,
 
Ì 2
...........

Đ ầu ra: Vị tri phần tử có giá trị
 
key
 
hoặc là n+1 nếu không tìm thấy,

function
 
Linear_Search(s,n,key);

begin

i:=0;

repeat

i:= i+ l;

until
 
(i>n) or (key = Sị);

Linear_Search := i;

end;

Cần đánh giá thời gian tính tốt nhất, tồi nhất, trung bình của thuật toán với độ dài đầu
vào là
 
n.
 
Rõ ràng thời gian tính củà thuật toán có thể đánh giá bởi số lần thực hiện câu
lệnh /. =/+ 1 trong vòng lặp repeat.

N ếu
 
s¡
 
=
 
key
 
thì câu lệnh
 
ứ.-i
 
f 1 Irong thân vòng lặp repeat thực hiện 1 lân. Do đó
thời gian tính tốt nhất của thuật toán là ©( 1). f
 
.

Nếu
 
key
 
không có m ặt trong dãy đã cho, thì câu lệnh /:= Í
 
+ 1 thực hiện
 
n
 
lần. Vì th ế
thời gian tính tồi nhất của thuật toán là
 
Q(n).

Cuối cùng, ta tính thời gian tính trung bình của thuật toán. N ếu
 
key
 
tìm thấy ở vị tri
thứ i của dãy
 
(key = s¡)
 
thì câu lệnh
 
i
 
:= /+1 phải thực hiện
 
i
 
lần (/' = 1, 2
 
,
 
n),
 
còn nếu

key
 
không có m ặt trong dãy đã cho thì câu lệnh
 
i
 
:= ;+ l phải thực hiện
 
n
 
lần. Từ đó suy
ra số lần trung bình phải thực hiện câu lệnh
 
i
 
:= /+1 là

[ ( 1 + 2 + . . . + n) + n ]/(n + \).

Ta có

[ ( 1
 
+
 
2
 
+
 
. . . +
 
/ỉ) +
 
^?] / ( « +
 
1
 
) <
 
(n^ + n )
 
/ ( « + ! )
 
=
 
n.

Vậy thời gian tính trung bình của thuật toán là
 
0{n).

M ặt khấc, do

81

P h ầ n
 
1. L ý th u y ế t t ổ h ợ p

[(1 + 2 + . . . + /7
) + /ỉ] /(/!+!)> («V4 +
 
n
)
 
l{n+\)

>{t?IA + nlA) l{n+ \) = nlA,

nên thời gian tính trung bình của thuật toán ià
 
Q.{n).
 
Vì vậy, thời gian tính trung bình

c ủ a th u ậ t to á n
 
là © (/?).

Đối với thuật toán trong thí dụ
 
này. cả thời gian tính tồi nhất lẫn thời gian tính
trung bình đều bằng 0(/i).

T h í d ụ
 
11. Phân tích thuật toán
 
Euclide tìm
 
ước chung
 
lớn
 
nhất của hai số nguyên
dương
 
a, b
 
trình bày dưới đây

T huật toán Euclỉde.

Đầu vào:
 
a v à h l à
 
hai số nguyên dương.

Đầu ra: ư ớ c chung lớn nhất của
 
a
 
và
 
b.

fu n ctio n
 
Gcd(a,h)\

begin

(*
 
Đổi chỗ nếu cần để đạt được
 
a > b *)

ỉf
 
a < h
 
th e n
 
<Đổi chỗ a và b>;
w hile ồ
 
0 do

begin

Lấy
 
a
 
chia
 
b
 
thu được
 
a = bq + r , 0
 
< r < b ]

a:=b;

h:=r;

end;

Gcd:= a;

end;

Đ ể đánh giá độ phức tạp của thuật toán, ta sẽ đếm
 
số phép chia phải thực hiện theo
thuật toán.

Trước hết ta chứng minh bằng qui nạp m ệnh đề sau.

M ệnh đề 1.
 
Giả sử cặp s ố a , h, a > b, đòi hỏi n >
 
1
 
ph ép chia trong thuật toán Euclỉde.

Khi đó a >
 
h
 
> /„ ,
 
tron^ đố
 
[f„
 
}
 
là dãy s ố Fibonaci ịxác định bởi công thức truy

+ /,.2 ,/7 > 2 ,/o = / , = u .

C h ứ n g m in h . Dễ dàng kiểm tra m ệnh đề đúng với /7=1. G iả sử m ệnh đề đứng với /ỉ > 1.
Ta chứng m inh khẳng định của m ệnh đề đúng với /7+1. G iả sử cặp
 
a, b, a > b
 
đòi hỏi

n+ị
 
phép chia. Sau khi thực hiện phép chia a cho b:

a
 
=
 
b
 
q
 
+
 
r ,
0
 
<
 
r
 
< h ,

82

C h ư ơ n g 4 . B ù i to á n liệ t kẽ

thuật toán tiếp tục làm việc với cặp số
 
h
 
và
 
r, b > r.
 
Cập sô' này đòi hỏi
 
n
 
phép chia. Do
đó theo giả thiết qui nạp

r>f„.

Từ đó suy ra

a = h q
 
+ r > h
 
+ r
 
>
 
/,^1 + / , = /„,2 ,

tức là ta có

và theo qui nạp m ệnh đề được chứng minh.

Sử dụng m ệnh đề vừa chứng m inh ta có thể đánh giá được số phép chia nhiểu nhất
cần phải thực hiện trong thuật toán Euclide.

M ệnh đ ề 2.
 
Gid sử các s ố nguyên ỏ đầu vào của thuật íoáỉĩ Euclide là không vượt quá

m, m >8. Khi đó tlìuậí toán đòi lỉỏi klìỏng quá logĩị^ (2m/3) phép chia.

C h ứ n g m ìn h . Thực vậy giả sử
 
n
 
là số phép chia lớn nhất cần thực hiện theo thuật toán
với đáu vào thoả m ãn điều kiện đạt ra trong mệnh đề. Giả sử cặp số
 
a , b , m > a >
 
b
 
đòi
hỏi
 
n
 
phép chia. Do n? > s , nên, bằng cách thử trực tiếp các khả năng, có thể kiểm tra
được là /7 > 4. Theo khẳng định của mệnh đề 1, ta có
 
a >
/^^1
. Suy
 
<
 
m.
 
Do /7 + 1

> 5, nên có thể chứng m inh được là

(3/2)'"'

Vi th ế suy ra

(3/2)"^' <
 
m,

hay là

n + 1 < log,/2
 
m.

Suy ra

/7 < log3;2
 
rn - l
 
=
 
log,/2
 
m -
 
log,/2 3/2 = log3/2 (2m/3).

M ệnh đề được chứng m inh.

N ếu như các th í dụ 8-10 có thể tạo ra cảm giác là
 
đánh giá độ phức tạp của một
thuật toán là m ột vấn đề giản đơn, thì thí dụ
 
11 đã cho thấy vấn đề không hẳn là như
vậy. Nói chung, phân tích độ phức tạp tính toán cuả một thuật toán là m ột vấn đề phức
tạp, nó đòi hỏi tư duy
 
sáng
 
tạo và có phương pháp và cách tiếp cận riêng. M ặt khác
trong rất nhiều trường hợp, ta không thể thu được những đánh giá đẹp đẽ như trong các
thí dụ vừa trình bày ở trên.

83

Phần I . Lý thuyết tổ hợp

D ạ n g đ á n h giá
 
Tên gọi

© d )
 
Hàng số

0 ( lg Ig
 
n)
 
Log log

0 ( lg
 
n)
 
Logarithm

0 ( « )
 
Tuyến tính

0(/7 Ig
 
n)
 
n log n

Bậc hai

m
 
' )
 
Bậc ba

Q o n
 
Đ a thức

m > 2
 
Hàm mũ

0(/7!)
 
Giai thừa

B ản g 1. Các đánh giá thông dụng.

Các hằng sô' bị bỏ qua trong cách đánh giá vừa đưa vào ở trên có thể có ý nghĩa
quan trọng trong ứng dụng thuật toán. Chẳng hạn, giả sử với m ọi dữ liệu đầu vào độ dài

n,
 
thuật toán A đòi hỏi thời gian tính là
 
c , n
 
còn thuật toán B đòi hỏi C ,
 
n^.
 
Khi đó với
m ột sô' kích thước đầu vào nhất định thuật toán B có thể vẫn là tốt hơn. T h í dụ, nếu
 
c,
 
=
300,
 
C
 
2
 
= 5, thì với n = 5, thuật toán A đòi hỏi thời gian
 
1500 trong khi thuật toán B đòi
hỏi thời gian
 
125. Tất nhiên, khi
 
n
 
đủ lớn, thuật toán A là luôn nhanh hơn thuật toán B.
M ột sô' đánh giá tốc độ tang đặc biệt được đặt tên riêng như chỉ ra tfong bảng 1.

T rong
 
bảng
 
1, các đánh
 
giá được
 
sắp xếp theo
 
thứ tự tăng
 
dần
 
của tốc ìíộ tã n g
(ngoại trừ trường hợp 0(/7"'))- Bảng 2 dưới đây cho thấy thời gian tính tăng như thế nào
với các đánh giá sô' bướò lặp khác nhau (gỉầ thiết: m ỗi bước lặp đòi hỏi 1 m icro giây):

Đ ánh giá

Thời gian
 
tính nếu
 
n
 
=

6
 
12
 
50
 
100

1
 
10 ®see
 
10 '’ sec
 
10 ®sec
 
1O'* sec

Ig Ig
 
n
 
10'* sec
 
2x10 * sec
 
2x 1 0 * sec
 
3x10'* sec

Ig
 
n
 
3x10'^ sec
 
4x10 '^ sec
 
6x10'^ sec
 
7x10'* sec

n
 
6 x1 0 ®sec
 
10'^ sec
 
5x1 O'' sec
 
1O
 
'* sec

n \ g n
 
2x1 0 ' sec
 
4 x lO ‘‘
' sec
 
3x10 '' sec
 
7 x l 0 ‘‘
‘ sec

4 x 1 0 '“
’ sec
 
lo '*
 
sec
 
3x10'^ sec
 
0.01 sec

2 x1 0 “ sec
 
2x10'^ sec
 
0.13 sec
 
1 sec

2"
 
6x1 O'“
’ sec
 
4x10'^ sec
 
36 năm
 
4x10® năm

B ản g 2. Thời gian tính với các đánh giá khác nhau

84

C h ư ơ n g 4. B à i to á n liệ t kâ

Nếu như đối với m ột bài toán ta có thể xây dựng thuật loán vơi thời gian tính tồi
nhất là đa thức, 'áù bài toán đặt ra gọi là
 
dược giải toí.
 
Rất tiếc là cho đến thời điểm hiện
tại, chỉ có m ột số không nhiều lắm bài toán là được giải tốt.

Nếu bài toán không có thuật toán với thời gian tồi nhất đa thức để giải thì nó được
gọi là
 
khc) (Ịiái
 
(intractable). N ếu như có thuật toán giải bài toán như vậy, thì chắc chắn
nó sẽ đòi hỏi rất nhiều thời gian.

Có m ột số bài toán lại khó đến mức là ta không thể xáy dimg thuậl toán để giải nó.
Những bài toán như vậy được gọi ià
 
không giải được
 
(unsolvable problem ). M ột trong
những bài toán như vậy là Bài toán về tính dừng: Cho một chương trình và tập đầu vào,
hỏi rằng chương trình có dừng hay không?

Việc nghiên cứu lý thuyết về độ phức tạp tính toán của các bài toán và các thuật
toán là m ột trong những vấn để trung tâm của khoa học tính toán, m à ở giáo trình này ta
không có điều kiện để đi sâu hơn nữa.

4.3.
 
Phương pháp sinh

Phương pháp sinh có thể áp dụng để giải bài toán liệt kê tổ hợp đặt ra nếu như hai điều
kiện sau được thực hiện:

ỉ ) C ó t h ể xác định được m ột thứ tự trên tập các cẩu hình tổ hợp cấn liệí kê. T ừ đó

có th ể xác định được cấu hình đẩu ĩiên và cấu hình cuối cùng trong ĩhứ ĩự đ ã xác định,

2)
 
Xây dự n^ được thuật ĩoán từ cấu hình chưa plĩải là cuối cùng đang có, đưa ra

cấu hình k ế tiến nó,

Ta sẽ gọi thuật toán nói trong điều kiện 2) là thuật toán sinh k ế tiếp. R õ ràng là thứ
tự trong điều kiện 1) cần được lựa chọn sao cho có Ihể xây dựng được thuật toán sinh k ế
tiếp. G iả thiết rằng, hai điều kiện nêu trên đã được thực hiện, khi đó thuật loán sinh để
giải bài toán liệt kê đặt ra được m ô tả như sau:

procedure Generate;

Begirt

<Xáy dựng cấu hình ban đắỉí>\

S t o p f a l s e ;

while not stop do

85

Phần ì . Lý thuyết tổ hợp

beẹin

<Điía ra cẩu hình cían
 
g có>;

S in h _ k ế jiế p ;

end;

End.

trong đó
 
S in h _ k ế jiế p
 
là thủ tục sinh cấu hình kế tiếp theo thuật toán sinh k ế tiếp đã xây
dựng. Nếu cấu hình đang có đã là cuối cùng, thủ tục này cần
 
gán cho biến
 
Stop
 
giá trị

true,
 
ngược lại thủ tục này sẽ xây dựng cấu hình kế tiếp của cấu hình đang có trong thứ
tự đã xác định.

Dưới đây ta xét một số thí dụ m inh hoạ cho việc áp dụng thuật toán sinh.

L iệt ké tấ t cả các dãy nhị phán độ d à i n.

Viết dãy nhị phân dưới dạng
 
bị
 
/?2 •••
 
b,„
 
trong đó
 
bị e
 
(0, i ). Xem mỗi dãy nhị phân
 
b

=
 
ố, ¿>
2 ...
 
b„
 
là biểu diễn nhị phân của m ột số nguyên
 
p{b).
 
Khi đó thứ tự hiển nhiên
nhất có thể xác định trên tập các dãy nhị phân là
 
thứ tự tự nhiên
 
(còn gọi là
 
thứ tự từ

điển)
 
được xác định như sau.Ta nói dãy nhị phân
 
b = bị b j
 
...
 
đi trước
 
dãy nhị phân
 
b'

=
 
b \ h'
2
 
...
 
b'„
 
trong thứ tự tự nhiên và ký hiệu
 
{h h <
 
b'
 
nếu
 
p{h) < p(h').

T h í dụ:
 
Khi /ỉ=3, các dãy nhị phân độ dài 3 được liệt kê theo thứ tự tự nhiên như sau

b
 
p(b)

0 0 0
 
0

0 0
 
1
 
1

0 l 0
 
2

0 1 1
 
3

1 0 0
 
4

1 0 1
 
5

1 1 0
 
6

1 1 1
 
7

Như th ế dãy đầu tiên sẽ là 0 0 ... 0, còn dãy cuối cùng là 1 1 ... 1. G iả sử
 
hị b j
 
...
 
b„

là dãy đang có. N hận xét rằng, nếu dãy này gồm toàn chữ số 1 thì quá trình liệt kê kết
thúc, trái lại, dãy k ế tiếp sẽ nhận được bằng cách cộng thêm
 
1 (theo m odun 2, có nhớ)
vào dãy hiện tại. Từ đó ta nhận được qui tắc sinh dãy k ế tiếp như sau:

•
 
Tim
 
i
 
đầu tiên (theo thứ tự / = / 7,/7-1,
 
1) thoả m ãn è, = 0.

•
 
Gán lại
 
b; = \ vầ. bj = Q
 
với tất cả
 
j > i.
 
Dãy mới thu được sẽ là dãy cần tìm.

86

Chươỉiíi 4. Bcii ĩoán ỉiệí kê

T h í dụ,
 
Xét dãy nhị phân độ dài 10:
 
h =
=
 
1101011111. Ta có / = 5. Do đó, đặl /?5 = 1,
và
 
hị
 
= 0,
 
i =
 
6, 7, 8, 9, 10, ta thu đươc xâu nhị phân kế tiếp là
 
1101100000.

Thuật toán sinh k ế tiếp được mô tả trong thủ tục sau

procedure
 
Nexí_Bi(_Striĩĩg;

f
 
*
 
Sinh xâu nhị phân k ế tiếp theo ĩìĩứ tự íừ điển ĩừ

xâu đang có
 
hị l?
2
 
...
 
b„
 
^
 
1 1 ... 1

heỉ^in

ị:=n;

while
 
hị
 
-
 
I do

begin

b,
 
= 0;

/;= /-!;

end;

bị:=
 
1;

end;

Dưới đây là chương trình PASCAL thực hiện việc liệt kê các dãy nhị phân độ dài
 
/I
 
bằng
phưcmg pháp sinh. Trong chương trình có thêm một biến
 
count
 
dùng để đếm số lượng
dãy nhị phân được sinh bởi chương trình.

{Chương ĩrìnìĩ liệt kê dãy nhị pììáỉì)

var

ỉì,
 
ỉ
 
:
 
integer;

b: array[l..20] o f 0..];

count: word;

stop: boolean;

procedure Init;

var
 
i: integer;

begin

write('Cho biết độ dài dãy nhị phán: '); readln(n);

f o r ỉ := ỉ to n do h[ij := 0;

stop
 
fa lse ;

count
 
;=
 
0;

end;

procedure Nexĩ_Biĩ_Sĩring;

87

P h ầ n
 
I . L ý th u y ế t t ổ hợ p

var i: integer;

begin

{sinh dãy nhị ph â n k ế tiếp}

i
 
:=
 
n;

while (i
 
> =
 
1j
 
a n d (h[ij -
 
1) do

begin

b[ij
 
:=
 
0;

i : = i - J ;

end;

i f
 
i < j then stop := true

else h[iỊ
 
ỉ :

end;

Begin
 
{main program )

Init;

while not stop do

begin

{đưa ra dãy nhị ph â n hiện tại}

count
 
.=
 
co u n t+ 1 ;

write(count:5,
 
');

f o r í := I to n
 
do write(b[ij:2); writeln;

Next_Bit_String

end;

write('Gõ Enter đ ể kết thúc...
 
readln;

End.

L iệt kê các tập con m ph ần tử của tập n p h ần tử.

Bài toán đặt ra là: Cho
 
x =
 
{], 2,
 
, n].
 
H ãy liệt kê các tập con
 
m
 
phần tử của X M ỗi

tập con
 
m
 
phần tử của X có thể biểu diễn bởi bộ có thứ tự gồm
 
m
 
thành phần

a = {ai, a ,
 
.......
 
a j

thoả mãn

1 < a, <
 
< ... < ứ„, <
 
n.

Trên tập các tập con
 
m
 
phần tử của
 
X có
 
thể xác định nhiều thứ tự khác nhau. Thứ

tự đơn giản nhất là
 
thứ tự từ điển
 
được định nghĩa như sau: Ta nói tập con ứ = (ứ|,
 
Ơ
2
 
.....

ứ,„) đi trước tập con
 
a' =
 
(a '|,
 
a'
2
 
, ... , a'„)
 
trong thứ tự từ điển và ký hiệu là a -<
 
a ,
 
nếu
tìm được chỉ số Ắ
: (1
 
< k < m )
 
sao cho

a,
 
= a \
 
..........= aVi-
 
«; < « '* ■

88

Chương 4. Bài ĩoán ỉiệt kê

T h í dụ:
 
x =
 
{1, 2, 3, 4, 5},
 
= 3. Các tập con 3 phần tử của X được liệt kê theo thứ tự

từ điển như sau

N hư vậy, tập con đầu tiên trong thứ tự từ điển là

( 1 ,2 ,... .
 
m)

và tập con cuối cùng là

{n-m + ỉ, n -m + 2
 
......
/ì).

G iả sử ứ=(ư,,
 
Ü
2
 
,
 
... , ứ,„) là tập con đang có chưa phải cuối cùng, khi đó có thể chứng
m inh được rằng, tập con k ế tiếp trong thứ tự từ điển có thể xây dựng bằng cách thực
hiện các quy tắc biến đổi sau đối với tập đang có:

Tim từ bên phải dãy
 
CI/, Ü ;
 
.......
 
a,„
 
phần tử
 
a,
 
^ n - r n + i ,

Thay
 
a,
 
bởi ứ, +
 
1;

Thay
 
bởi
 
ữ, + j - /, với
 
j
 
= /+ 1,
 
i+2,..., m.

T h í dụ:
 
n = 6, m = 4.
 
G iả sử đang có tập con (1, 2, 5, 6), cần xây dựng tập con k ế tiếp
nó trong thứ tự từ điển. Ta có /= 2. thay «2 =
 
và «3 = 4, Ü4
 
= 5, ta được tập con k ế tiếp
( 1 , 3 , 4 , 5).

Từ đó, thuật toán sinh k ế tiếp có thể m ô tả trong thủ tục PASCA L m ô phỏng sau

đây:

procedure N exl_Com bination;

(*
 
Sinh m -tập
 
con k ế tiếp theo thứ tự từ điển

của tập con
 
(a¡, a
2
 
,..., a j
 
ĩ-i ịn-m +
 
ỉ
 
} *}

begin

i:=m;

89

P h ẩ n
 
I .
 
L ý th u y ế t t ổ hợ p

while ũị
 
=
 
n-m+i do

a ,. -
 
a ,
 
+
 
ỉ ;

f o r j : = i + ỉ to rn do Oj := a¡
 
+
 
j - i;

end;

L iệt kê các hoán vị của tập n ph ần tử.

Bài toán dặt ra là; Cho
 
x =
 
[ \ , 2 , , n].
 
H ãy liệt kê các hoán vị từ /7 phần tử của X M ỗi
hoán vị từ
 
n
 
phần tử của
 
X
 
có thể biểu diễn bởi bộ có thứ tự gồm
 
n
 
thành phần
 
a
 
= (öj,

Û J , , ơ„)
 
thoả mãn

a,-
 
e
 
X ,
 
i =
 
1, 2,...,
 
n , ũp ĩ^a ^,p

Trên tập các hoán vị từ
 
n
 
phần tử của X có thể xác định nhiều thứ tự khác nhau. Thứ

tự đơn giản nhất là
 
thứ tự từ điển
 
được định nghĩa như sau: Ta nói hoán vị ứ = (ứ|,
 
Û
2
 
.....

a„)
 
đi trước hoán vị
 
a'
 
=
 
(a \, a'
2
 
,
 
... ,
 
a ’,,')
 
trong thứ tự từ điển và ký hiệu là a ^
 
a',
 
nếu
tìm được chỉ sô'Ắ: (1
 
< k < n)
 
sao cho

ứ |
 
—Üị , Ü
2
 
—ữ
 
2
t
 
~ ^ k-\’
 
^ ^ k•

T h í dạ:
 
x =
 
{1, 2, 3}. Các hoán vị từ 3 phần tử của
 
X
 
được liệt kê theo thứ tự từ điển
như sau

1
 
2
 
3

1
 
3
 
2

2
 
1
 
3

2
 
3
 
1

3
 
1
 
2

3
 
2
 
1

N hư vậy, hoán vị đầu tiên trong thứ tự từ điển là
( 1 , 2 , . . . , « )
và hoán vị cuối cùng là

{n, n
 
- \ ,
 
1).

Giả sử
 
a = (ữị,
 
... , ứ„) là hoán vị đang có chưa phải cuối cùng, khi đó có
 
thể
 
chứng

m inh được rằng, hoán vị k ế tiếp trong thứ tự từ điển có thể xây dựng bằng cách
 
thực

hiện các quy tắc biến đổi sau đối với hoán vị đang có:

•
 
Tìm từ phải qua trái hoán vị đang có chỉ số
 
j
 
đầu tiên thoả m ãn
 
ũj <
 
(nói

cách khác:
 
j
 
là chỉ số lớn nhất thoả m ãn
 
Oj <

•
 
Tim
 
a¡.
 
là số nhỏ nhất còn lớn hcfn
 
Ũ
J
 
trong các số ở bên phải
 
Uj
 
;

•
 
Đ ổi chỗ
 
Ü
J
 
với
 
a¡.
 
;

•
 
L ật ngược đoạn từ
 
ũj_,ị
 
đến
 
a „ .

90

C ln /í/n i; 4. B à i to à n
 
liệt
 
kê

T h í dụ:
 
Giả sử đang có hoán vị
 
(3, 6, 2, 5, 4. 1), cần xây dựng tập con k ế tiếp nó trong
thứ tự từ điển. Ta có chỉ số
 
j = 3
 
(í/,
 
=2 <
 
-
 
5). Số
 
nhỏ nhất còn lớn hơn «3 trong các

số bên phải của ^3
 
là ữj = 4. Đổi chỗ
 
a..
 
với í/, ta thu được (3, 6, 4, 5, 2,
 
1), và cuối
cùng, lật ngược thứ tự đoạn
 
«4 í/,
 
ta thu được hoán vị kế tiếp
 
(3, 6, 4, 1, 2, 5).

Từ đó, thuật toán sinh kế
 
tiế p
 
có thế’ mô tả trong thủ tục PASCA L mô phỏng sau

đây:

procedure Next_Perrnutation:

Sinh hoán vị k ế liếp iheo thứ lự từ điển

của hoán vị
 
(a,, Ũ
2
 
, .... a„)
 
^ ( n , ! ì - ỉ
 
......
J)
 
*)

begin

Tìm j là ch ỉ s ố lớn nhất thoả
 
< ũj^i
 
*)

j: = n - l;

while ŨJ>
 
do j : = j - ỉ ;

(* Tìm ũị. là sô' nhỏ nhất còn lớn hơn ứj ỏ bên phải Oj *)

k:=n;

while ữj >
 
Q
ị
.
 
do k : = k - ỉ ;

Swap(aj, a j ; (* đổi chỗ
 
với
 
*)

f*
 
L ậ t ngược đoạn từ
 
đến a„ *)

r:=n;

s:= j+ I ;

while r>s do

begin

Swap(a,„ a j ; (* đổi clìỗ (i,. xới
 
d,.

r:=r-J;

s:= s + ỉ ;

end;

end;

Nói chung, phương pháp sinh không có tính phổ dụng: không phải cấu hình k ế tiếp
nào cũng được sinh m ột cách đơn giản từ cấu hình hiện tại, m ặt khác cấu hình ban đầu
không phải dễ tìm vì ngay cả sự tồn tại một cấu hình nhiều khi vẫn còn là nghi vấn. Vì
vậy, thông thường thuật toán sinh chỉ có thể xây dựng được đối với những bài toán liệt
kê tổ hơp đơn giản. Đ ể giải những bài toán liệt kê phức tạp, người ta thường dùng thuật
toán được trình bày trong m ục tiếp theo, có tính phổ dụng cao hơn. Đ ó là thuật toán
quay lui.

91

P h ầ n
 
ỉ .
 
L ý th u y ế t tổ ỉìự Ị?

4.4. Thuật toán quay lui

Nội dung chính của thuật toán này là việc xây dựng dần các thành phẩn của cấu hinh
bằng cách thử tất cả các khả năng. G iả thiết cấu hình cần tìm được m ô tả bàng m ột bộ

gồm
 
n
 
thành phần A'|, A
"2
......
 
A'„. G iả sử đã xác định được /-1 thành phần
 
Xị , X
2
 
,
 
x .| (m à

ta sẽ gọi là
 
lời giải bộ phận cấp
 
/-1), bây giờ ta xác định thành phần
 
X,
 
bằng cách duyệi
tất cả các khả năng có thể đề cử cho nó (đánh số các khả năiig từ 1 đến «,). Với m ỗi khả
năng
 
j ,
 
kiểm tra xem
 
j
 
có chấp nhận được không,
 
xảy
 
ra 2 trường hợp:

. nếu chấp nhận / thì xác định .V
, theo
 
j,
 
sau đó nếu
 
i = n
 
thì ta được m ột cấu
 
h ìn h ,

còn trái lại ta tiến hành việc xác định
 
Xị^i-

.
 
nếu thử tất cả các khả năng m à không có khả nãng nào được chấp nhận thì quay
lại bước trước để xác định lại

Đ iểm quan trọng của thuật toán là phải ghi nhớ tại mỗi bước đã đi qua, những khả
năng nào đã thừ để tránh trùng lặp. Rõ ràng những thông tin này cần được lưu trữ theo
cơ cấu
 
ngăn xếp
 
{stack - vào sau ra trước).
 
Vì thế thuật toán này rất phù hợp với việc
lập trình trên m ột ngôn ngữ cho phép gọi đệ qui. Bước xác định
 
X,
 
có thể diễn tả qua thủ
tục được tổ chức đệ qui dưới đây:

procedure Tryịi: integer);

var j: integer;

begin

f o r j
 
I to
 
/Ỉ,
 
do

i f <châ'p nhận j> then

begin

<xác định Xị theo j>

i f i -
 
n then <ghi nhận một cấu hình>

else Try(i+1);

end;

end;

Phần quan trọng nhất trong thủ tục trên là việc đưa ra được m ột danh sách các khả năng
đề cử và việc xác định giá trị của biểu thức logic
 
<chá'p nhận ì> .
 
Thông thường giá trị
này, ngoài việc phụ thuộc
 
i ,
 
còn phụ thuộc vào việc đã chọn các khả năng tại /-1 bước
trước. T rong những trường hợp như vậy, cần ghi nhớ
 
trạng thái mới
 
của q uá trình tìm
kiếm
 
sau khi
 
< x á c
 
đ ị n h
 
.V,
 
t h e o j >
 
và trả lại
 
t r ạ n g
 
thái
 
c ũ
 
sau lời gọi
 
Try(i+ Ỉ).
 
Các
trạng thái này
 
được ghi nhận n hờ m ột số biến tổng thể (global), gọi là các
 
biêh trạng

thái.

92

Chiù/nị:, 4. B á i lo a n ỉiệ t ké

Sau khi xây dựng thủ tục đệ qui
 
Try,
 
đoạn chư(Jri,g ĩiình chính giải bài toán liệt kê
có dạng:

Begin

ỉnit; T ry(I);

End.

trong đó
 
Jnit
 
là thủ tục
 
khởi tạo các giá tri ban đầu
 
(nhập cár giá trị tham sô' của bài
toán, khởi gán các biến trạng thái, biên đ ế m ,...).

Q uá trình tìm kiếm lời giải theo ihuật toán quay lui có thể rnô tả bởi Cáy tìm kiếm
lời giải sau đây

Gốc

Khả năng chọn

Khả năng chọn
 
X
2

với
 
Xị
 
đã chọn

K hả năng chọn X,
với
 
a
:,,
 
đã chọn

H ìn h 1. Cây liệt kê lời giải theo thuật toán quay lui

Dưới đây là 3 thí dụ liệt kê 3
 
c ấ u
 
hình
 
c ơ
 
bản; dãy nhị phân, hoán vị và tổ hợp,
bằng thuật toán quay lui.

T h í d ụ 1. Liệt kê các dãy nhị phân độ dài
 
n.

G iải: Biểu diễn dãy nhị phân dưới dạng
 
bị bj
 
...
 
trong đó
 
bị
 
e
 
{0,1} Thủ tục đệ qui

Try(i)
 
xác định
 
bị,
 
trong đó
 
các giá trị đề cử là 0 và 1. Các giá trị này
 
m ặc nhiên được
chấp nhận m à không phải thoả mãn điều kiện gì (vì thế bài toán không cần biến trạng

93

P h ầ n
 
ỉ . L ý th u y ế t t ổ h ợ p

thái). T hủ tục
 
Iniĩ
 
nhập giá trị
 
n
 
và khởi gán biến đếm
 
count.
 
Thủ tục
 
Result
 
đưa ra
dãy tìm được.

{C hư ơng trinh liệt kê dãy nhị ph án }

var
 
n: integer;

b: array[1..20j GfO,.l;

count: word;

p rocedure Iniĩ;

begin

writeCn
 
=
 
readlnịn);

count := 0;

end:

procedure Result;

var i: integer;

begin

count := c o u n ts I ;

wrife(count:5, \ ');

f o r i := 1 to n do write(b[i]:2);

writeln;

end;

p rocedure Try(i: integer);

var j: integer;

begin

f o r j
 
;=
 
0 to I do

begin

b [ i j : = j ;

i f I -
 
n then Result

else Ti-y(i-¥l);

end;

end;

Begin
 
{main program )

Init; T r y ịl) ;

writeCGo Enter đ ể kết ĩhúc...
 
readỉn;

End.

Cây liệt kê lời giải theo thuật toán quay lui để liệt kê các dãy nhị phân độ dài 3
được m ô tả trong hình 2.

94

Chương 4. Bài ĩoáỉì ỉiệĩ kẻ

H ình 2. Cây liệt kê day nhị phân độ dài s
T h í d ụ 2. L iệt kê các hoán vị của { 1 , 2 ,
 
n
 
}.

G ỉải: Biểu diễn hoán vị dưới dạng
 
P ị
 
1?2
 
trong đó p,
 
nhận giá trị từ 1 đến
 
n
 
và
 
P i
 
^

Pj
 
với
 
i
 
^

j.
 
Các giá trị từ 1 đến
 
n
 
được lần lượt đề cử cho
 
P i ,
 
trong đó giá trị

j
 
được chấp
nhận nếu nó chưa được dùng. Vì thế cần phải ghi nhớ đối với mỗi giá trị
 
j
 
xem nó đă
được dùng
 
hay chưa. Đ iều này được thực hiện nhờ một dãy biến logic
 
bp
 
trong đó
 
bj

bằng
 
ĩrue
 
nếu
 
j
 
chưa được dùng. Các biến này cần phải được khởi gán giá trị
 
írue
 
trong
thủ tục
 
Iniĩ.
 
Sau khi gán
 
j
 
cho
 
Pị
 
cần ghi
 
nhận fa lse
 
cho
 
bj
 
và phải gán lại
 
true
 
khi thực
hiện xong
 
Result
 
hay
 
Try(i-¥l).
 
Các phần còn lại giống như bài toán trước.

{C hương trình liệt ké các hoán vị}

var

n: integer;

p : array [ ỉ , .20] o f integer;

b: a r r a y [ L 2 0 Ị o f boolean;

count: word:

procedure Init;

var i: integer;

begin

writeựn = '); readln(n);

f o r i
 
1 to n do h[i]
 
;=
 
true:

count := 0;

end;

procedure Result:

var i: integer;

begin

c o u n t c o u n t + 1 ;

write(count:5, \ ');

95

Phần ỉ. Lý thuyết tổ hợp

f o r i
 
ỉ
 
to n do wriĩe(pỊi]:3);

writeln;

end;

procedure Try(i: integer);

var j: integer;

begin

f o r i
 
;=
 
I to n do

i f h[j] then
 
{chấp nhận j}

begin

p[i]

h[j] := fa lse ;
 
Ịghi nhận trạng thái mới)

i f i = n then Result else T r y (ì+ l);

b[j]
 
;=
 
true;
 
{trả lại trạng thái cũ)

end;

end;

Begin
 
(main program )

I
 
nit; T ry (l);

yvriteựGõ E nter đ ể kết thúc... '); readln;

End.

Cây liệt kê các hoán vị của 1, 2, 3 được cho trong hình 3. Các hoán vị được liệt kê theo
thứ tự từ điển tăng dần.

H ìn h 3. Cây liệt kê các hoán vị của 1, 2, 3.

T h í d ụ 3. Liệt kê các tổ hợp chập
 
m
 
của { 1 , 2 ,
 
n
 
}.

G iải: Biểu diễn tổ hợp dưới dạng
 
C|
 
...
 
c„„
 
trong đó

96

C hư ơ ng 4. B à i to á n H ệi kê

1 <Cj <C'2<

Từ đó suy ra các giá trị đề cử cho r, là từ
 
+ 1 đến
 
n-m+i.
 
Để điều này đúng cho cả
trường hợp / =
 
1, cần thêm vào C
(, với C
(, = 0. Các giá trị đề cử này m ặc nhiên được chấp
nhận. Các thủ tục
 
¡nit. Result
 
được xây dựng giông như bài toán trước.

{ClĩUơnq írình liệt kê cúc tổ hợp}

var

tĩ,
 
,77.
 
i i ĩ teger ,

c: array[0..20] o f integer;

count: word;

p ro ced u re Inil;

begin

wriĩe('n, m
 
=
 
readln(n, m);

c[0] := 0; count := 0;

end;

p ro ced u re Result;

var i: integer;

begin

count := c o u n ts 1; n>ritc(counĩ:5, \ ');

f o r i := 1 to m do wriíe(cỊiị:3); wrifein:

end;

p ro ced u re Tryịi: inteị^er):

var j : integer;

begin

f o r j
 
;= c//'7 7 + y
 
to
 
do

begin

c[i] : =j ;

i f
 
i = m then Result else
 
rrv f/’+Zj;

end;

end:

Begin
 
{main program}

Init;

T r y ( l) ;

w rite('G õ Enter đ ể kết thúc... '); readln;

End.

97

Phần 1. Lý thuyết tổ hợp

Cây liệt kê các tổ hợp chập 3 từ {1, 2, 3, 4, 5 Ị
 
được cho trong hình 4. Dễ thấy các tổ
hợp được liệt kê theo thứ tự từ điển tăng dần.

H ìn h 4. Cây liệt kê tổ hợp chập 3 từ {1, 2, 3, 4, 5}

T rong nhiều bài toán, việc xác định điều kiện
 
<cháp nhận }>
 
không phải là đơn
giản, nó đòi hỏi phải có m ột trình độ tổ chức nhất định. Rõ ràng độ phức tạp cùa bài
toán phụ thuộc
 
rất nhiều vào độ phức tạp của điều
 
kiện này. N ói chung, người ta cố
gắng thu hẹp diện đề cử các khả năng
 
j
 
và tinh giản tối đa việc tính điều kiện chấp nhận

j.
 
Đ ây cũng là cách chủ yếu để nâng cao tính khả thi của bài toán liệt kê.

Dưới đây trình bày bài toán X ếp H ậu, là m ột bài toán kinh điển để m inh hoạ thuật
toán quay lui.

T h í d ụ 4.
 
Bài toán Xê'p Hậu.
 
Liệt kê tất cả các cách xếp
 
n
 
quân H ậu trên bàn cờ
 
n xn
 
sao
cho chúng không ăn được lẫn nhau.

G iải: Đ ánh số cột và dòng của bàn cờ từ 1 đến
 
n.
 
M ỗi dòng được xếp đúng m ột quân
H ậu. V ấn đề còn lại là xem mỗi quân H ậu được xếp vào cột nào. Từ đó dẫn đến việc
biểu diễn m ột cách xếp bằng bộ
 
n
 
thành phần
 
Xị
 
X
ị
 
...
 
x,„ trong đó
 
Xị = j
 
nghĩa là quân
hậu dòng / được xếp vào cột
 
j.
 
Các giá trị đề cử cho
 
Xị
 
là từ 1 đến
 
n.
 
Giá trị
 
j
 
là được
chấp nhận nếu ô (/,
 
j)
 
chưa bị các quân Hậu trước chiếu đến. Đ ể kiểm soát được điều
này, ta cần phải ghi nhận trạng thái của bàn cờ trước cũng như sau khi xếp được m ột
quân H ậu. Đ ể ý rằng, theo luật cờ, quân Hậu ăn ngang, dọc và hai đường chéo.

V iệc kiểm
 
soát theo chiều ngang là không cần
 
thiết vì mỗi dòng được xếp đúng
m ột quân H ậu. V iệc kiểm soát theo chiều dọc được ghi nhận nhờ dãy biến logic
 
dj
 
với
qui ước
 
Oj
 
bằng
 
true
 
nếu cột
 
j
 
còn trống. Đ ối với 2 đưòmg chéo ta nhận xét rằng một
đường có phương trình
 
i+j = const,
 
còn đường kia
 
i-j = const
 
(2 <
 
i+j < 2n,
 
1-/7 <
 
i-j <

n- l ) ,
 
từ đó đường chéo thứ nhất được ghi nhận nhờ dãy biến lôgic
 
hj (2 < j
 
< 2n)
 
và
đường chéo thứ hai, nhờ dãy biến logic
 
C
j {\-n < j < n- \ )
 
với qui ước các đường này còn

t r ố n g
 
n ế u
 
b i ế n
 
tư c m g ứ n g
 
c ó
 
g i á
 
t r ị
 
true.
 
C á c
 
b i ế n
 
t r ạ n g
 
t h á i
 
Qj,

b ị ,
 
C j
 
c ầ n
 
đ ư ợ c
 
k h ở i g á n

giá trị
 
true
 
trong thủ tục
 
Init.
 
N hư vậy giá trị
 
j
 
được chấp nhận khi và chỉ khi cả 3 biến

98

Chương 4. Bài ĩoáìì ỉiệĩ ké

Oị, bị^p Cị.j
 
cùng có giá trị
 
true.
 
Các biến này cần gán
 
\ạì false
 
khi xếp xong quân H ậu
thứ
 
i
 
và trả lại
 
true
 
sau khi gọi
 
Result
 
hay
 
Try{ị-\-ì).
 
Các phần khác được giải quyết như
các thí dụ trước.

{C hư ơng trinh giãi bài toán Xếp Hậu}

var

n: integer;

x: array ỉ L . 20] o f integer:

a: array [1 .2 0 ] o f boolean:

h: array[2.A0] o f boolean;

c: array[~19.J9] o f boolean;

count: word;

procedure Init;

var i: integer;

begin

writeCn
 
=
 
readln(n):

count
 
;=
 
0;

f o r i := I to n do a[JI
 
;=
 
true;

f o r i
 
;= 2
 
to
 
do h[i]
 
;=
 
true:

f o r
 
i
 
; =
 
l - n
 
Ỉ0
 
ỈĨ-Ỉ
 
d o
 
C'lij
 
; =
 
t r u e :

end;

procedure Result;

var i: inícịỉer;

begin

count := c o u n i + l;

write(counf:5, \ ');

f o r i
 
;= 7
 
to n do wnte(x[ij:3);

writeln;

end;

procedure Tryịi: integer);

v a r j: integer;

begin

f o r j
 
;=
 
1 to n do

i f a[j] and h[i+ jj and c[i-jj then

begin
 
{chấp nhận jj

x l ii

99

Phần 1. Lý thuyết tổ hợp

{ẹhi nhận trợnẹ ĩhái mới}

a lìì := false; h [i+ jl
 
— fa lse ; c[i-jj := false,

i f i = n then Result else Tr y ( i +Ỉ ):

{trà lại trạng thái cũ}

a ljl := true; h Ịi+ jl := true; c[i-jl
 
. =
 
true;

end;

end;

Begin
 
(main program)

Init;

T ryiD ;

wriiei'Go Enter đ ể kết thúc... '); readin:

End.

Dưới đây là số cách xếp Hậu ứng với m ột sô' giá trị
 
n\

n
 
4
 
7
 
8
 
9
 
10
 
11
 
12
 
13
 
14

2
 
40
 
92
 
352
 
724
 
2680
 
14200
 
73712
 
i
Ị
 
365596

N ghiệm đầu tiên m à chưcfng trình tìm được ứng
 
\ở '\n = 8
 
là
.v = ( l , 5 . 8, 6, 3, 7, 2, 4)
nó tương ứng với cách xếp Hậu cho bởi hình 6.

H ìn h 6.
 
M ột lời giải của bài toán xếp hậu khi « = 8

Cây liệt kê lời giải theo thuật toán quay
 
lui để liệt kê các cách xếp hậu với /7=4
đưọc m ô tả trong hình 5 (hai nhánh còn lại là đối xứng với hai nhánh đầu).

100

'tì'

■&

■Ö
-

%

Ccicìì xếp
 
(2, 4, 1, 3)

H ìn h 5. Câv liệt kê các cách xếp hậu trên bàn cờ 4x4

T h í d ụ 5.
 
Liệt kê tất cả các cách xếp
 
k < n
 
quân Hậu trên bàn cờ
 
n x n
 
sao cho chúng
knong ản được lẫn nhau đồng thòi chúng khống chế tất cả các ô của bàn cờ.

101

Phẩn I. Lý thuyết tổ hợp

G iải.
 
Ta có thể giải bài toán đặt ra bằng cách liệt kê tất cả các cách chọn ra
 
k
 
dòng để
xếp các con hậu, ứng với m ỗi cách chọn đó áp dụng phương pháp ở thí dụ 4 để liệt kê
các cách xếp hậu vào
 
k
 
dòng đã chọn sao cho chúng không ăn được lẫn nhau đồng thời
khống ch ế tất cả các ô của bàn cờ. Chương trình giải bài toán này ta không dẫn ra ở
đây. Điều đáng lưu ý là khác với bài toán trong thí dụ 4, bài toán ở đây trong rất nhiều
trường hợp là không có lời giải. Trong bài toán này, người ta còn quan tâm đến số
 
k„„„

nhỏ nhất thoả m ãn điều kiện đặt ra.
 
Bảng dưới đây cho thấy m ột số giá trị đã biết cùa

k

n
 
ị 1
 
2
 
3
 
4
 
5
 
6
 
7
 
8
 
9
 
10
 
11
 
12
 
13

Krn
 
1 1
 
ỉ
 
1 t
 
3
 
3
 
4
 
4
 
5
 
5
 
5
 
5
 
7
 
7

n
 
14
 
1
 
16
 
17
 
1
 
19
 
1
 
20
 
1
 
22
 
23
 
24
 
25

^niin
 
8
 
1
 
^
 
9
 
9
 
1
 
<10
 
<11
 
1
 
1
 
<13
 
<13
 
<13
 
13

Các ô có dấu bất đẳng thức là còn chưa xác định được chính xác giá trị của
 
k„,ị„.

Với n= 15, để liệt kê tất cả các lời giải của bài toán khi
 
k =9
 
và chứng m inh bài toán
không có lời giải khi
 
k=8
 
chương trình viết trên ngôn ngữ
 
c
 
của các tác giả G ibbons và
W ebb đã phải sử dụng thời gian tương ứng là 58.4 và 23.5 giờ trên m áy D EC A LPHA
3000/600. Đ ể chỉ ra với «=16, khi
 
k=s
 
bài toán không có lời giải, chucfng trình nói trên
đã chạy mất 113.7 giờ máy.

Hy vọng rằng th í dụ cuối cùng này giúp chúng ta, m ột mật, hình dung dược sự
phức tạp của các bài toán liệt kê tổ hợp, m ặt khác, thấy rằng liệt kê với sự trợ giúp của
máy tính là biên pháp để giải nhiều vấn đề tồn tại trong tổ hợp.

C hư ơ ng 4 . B à i ĩo á n
 
liệ t kê

Bài tập

Trong các hài 1-5
 
hãy vẽ cây liệt ké lời gidi theo thuật toán quay lui đ ể giải các hài

toán Hệt kê tổ hợp đặt ra.

1.
 
G iả sử A, B, . .
 
F trên hình
 
1 là các hòn đảo và các đoạn nối là các cây cầu nối
cnúng. M ột nguời dd lịch Khởi hành ¿ừ A đi từ iiòn đảo này sang hòn đảo Ichác. Ngưừi
du iịch sẽ dừng iại để àn trưa nếu như tiếp tục đi sẽ phải đi qua cái cầu nào đó hai lần.

(a) L iệt kê các cách mà người du lịch có thể đi cho đến khi dừng lại ăn trưa.

(b) C ho biết ở những điểm nào người du lịch có thể dừng lại ăn trưa?

2. Hai đội bóng chuyển A, B thi đấu trong một giải vô địch quốc gia. Đội thắng trong
trận đấu sẽ là đội giành được ba hiệp thắng trước. Hãy liệt kê tất cả các khả năng có thể
của trận đấu giữa hai đội.

3. Liệt kê tất cả các cách mất thứ tự của 4 sô' tự nhiên 1, 2, 3, 4.

4.
 
Liệt kê các xâu nhị phân độ dài 5 không chứa hai số 0 liên tiếp.

5. Liệt kê các chỉnh hợp lặp chập 4 từ 3 chữ A, B,
 
c
 
không chứa hai chữ A hoặc hai chữ
B.

Lập trình trên PASCAL giải các hài toán liệt kê sau bằng thuật toán quay lui

6. Liệt kê lất cả các phần tử của
D
 
=
 
{ x
 
=
 
( x p x 2 , . . . , x j :

ị ^ c i j X j
 
= b ,
 
X j
 
g { 0 , 1 } , ;
 
=
 
1 , 2 ,. .. ,/ ? }

7= 1

trong đó ứ;, ¿2^^ —
 
»
 
b
 
là các số nguyên dương.

7. Liệt kê tất cả các phần tử của

D
 
=
 
=
 
= b ,
 
X j
 
}

7 = 1

trong đó ứ/,
 
Ũ
2
 
,
 
... ,
 
a„, h
 
là các số nguyên dương,
 
z+là
 
tập các số nguyên không âm.

8. Cho tập X = ( 1 , 2 ,
 
n
 
Ị. Hãy liệt kê tất cả các phân hoạch tập
 
X
 
ra thành
 
k
 
tập con

{ k
 
< n ) .

103

Phán J. Lý thuyết lổ hợp

9. C ho số nguyên dưcmg
 
N.
 
H ãy liệt kê tất cả các cách biểu diễn
 
N
 
dưới dạng lổng của
m ột số số nguyên dương.

10. H ìn h v u ò n g th ầ n bí (m a p h ư ơ n g ) bậc
 
n
 
là m a trận vuông cấp
 
n
 
với các phần tử là
các số tự nhiên từ 1 đến
 
thoả m ãn tính chất:
 
"Tong các phần tử trên mỗi dòng, mối

cột và m ỗi một tronq hai đường chéo đều có cùng một giá trị".

T hí dụ: Dưới đây là một m a phương bậc 3

8
 
1
 
6

3
 
5
 
7

4
 
9
 
2

Đ ối với m a phương này, ta có tổng các phần tử trên các đòng là:

8 -f 1 -i-6 = 3 + 5 + 7 = 4 + 9 + 2 =
 
15;
tổng các phần tử trên các cột là:

8 + 3 + 4 =
 
1 + 5 + 9 = 6 + 7 + 2 =
 
15;

tổng các phần tử trên hai đường chéo là:

8 + 5 + 2 = 6 + 5 + 4 =
 
15.

H ãy viết chương trình liệt kê tất cả các m a phương bậc
 
n = 3, 4
 
không sai khác nhau bởi
các phép biến hình đơn giản (quay, đối xứng).

(Chú ý: Bài toán đếm số lượng m a phương bậc
 
n
 
mới chỉ giải được với /ì = 3 ,4 , 5.)

11. T a m
 
giác th ầ n
 
bí. Cho m ột lưới ô vuông gồm
 
n xn
 
ô
 
và
 
số nguyên
 
dương
 
k.
 
Tim

cách
 
điền các số tự nhiên từ 1 đến
 
3n-3
 
vào các ô
 
ở
 
cột đầu
 
tiên,
 
dòng
 
cuối
 
cùng
 
và

đường chéo chính sao cho tổng các số điền trong cột đầu tiên, dòng cuối cùng và đường
chéo chính của lưới đều bằng
 
k.

Ví d ụ : Với /ì = 5, Ấ
: = 35 ta có cách điền sau:

11

10
 
2

9
 
3

1
 
7

4
 
5
 
6
 
8
 
12

H ãy phát triển thuật toán dựa trên thuật toán quay lui để chỉ ra với giá trị của n và k cho
trước bài toán đặt ra có lời giải hay không? N ếu câu trả lời là khẳng định chỉ cần đưa ra
m ột lời giải.

104

C ln íơ n g 4. B à i to á n
 
lié ! kè

12. Bài to á n về 8 q u à n cờ: Cho 8 quân cờ: V ua (V), Hậu (H), 2 con Ngựa (N ), 2 con
Tượng (T) khác m àu, 2 con
 
Xe (X). Tim
 
cách xếp chúng lên bàn cờ quốc tế 8x8 ô sao
cho chúng khống chế được nhiéu ô của bàn cờ nhất. Lưu ý rằng: Vị trí quân cờ đứng
không coi là bị nó khống chế, Các vị trí nằm
 
trong khả nàng khống ch ế của quân cờ
nhưng bị m ột quân nào đó chắn đường di chuyển đến đó cOng coi là chưa bị quân cò đó
khống chế.

Tlií dụ: Cách xếp các quân cờ trong nìiih vé dưưi đây khống c h ế được 49 ô:

T

N

N

H

V

X

X

a
 
b
 
c
 
d
 
e
 
f
 
g
 
h

(Các ô bôi đen là chưa bị khống chế bởi các quân cờ xếp trên bàn cờ).

H ãy sử dụng thuật toán quay lui giải bài toán đặt ra.

13. Điền số. Viêĩ chương trình giải bài toán sau đây;

Cho bảng vuông gồm
 
N x N
 
ô vuông. Các dòng của bảng được đánh số
 
từ 1 đến
 
N ,
 
từ

trên xuống dưới. Các cột của bảng được đánh số từ 1 đến
 
N
 
từ trái sang
 
phải.
 
Bên
 
cạnh

m ỗi cột và mỗi dòng của bảng đều có ghi m ột số nguyên dương. G ọi
 
Xị
 
là số viết bên
cạnh cột
 
i,
 
còn
 
Yj
 
là số viết bên cạnh dòng
 
j.

Y êu c ầ u : Cần điền các số nguyên dương vào m ột số ô của bảng sao cho:

•
 
Các số được điền phải khác nhau từng đôi;

•
 
M ỗi dòng và mỗi cột cẩn điền đúng hai số;

•
 
Tích của hai số điền trên cột / phải bằng
 
X,;

•
 
Tích của hai số điền trên dòng
 
j
 
phải bằng
 
Yj-,

Hình dưới đây cho thí dụ về lời giải của một bài toán dạng vừa nêu.

105

Phần I. Lý thuyết tổ hợp

6
 
3
 
18

9
 
1
 
9

12
 
11
 
132

4
 
8
 
32

2
 
5
 
10

54
 
6
 
12
 
20
 
88

D ữ liệu : V ào từ file văn bản N UM BO ARD .IN P:

•
 
D òng đầu tiên ghi số nguyên
 
N (2 < yv’ < 10);

•
 
D ò n g th ứ h a i g h iy v s ố x ,,
 
(1 < A ; <
 
\000, i
 
N):

•
 
D òng tíịứ b a ghi
 
N
 
số
 
Yị
,
 
(1
 
^ Y j <
 
1000,y = 1
 
,
 
N).

K ết q u ả : G hi ra file văn bản N U M BO A RD .O U T: D òng thứ ] ghi
 
N
 
sô' trên dòng rhứ I
của bảng; D òng thứ hai ghi
 
N
 
số trên dòng thứ hai của bảng,..., Dòng thứ
 
N
 
ghi
 
N
 
số
trên dòng thứ N của bảng. Qui ước: Ghi sô' 0 ở vị trí các ô không được điền số.

Ví d ụ : N ội dung củ a các file dữ liệu và kết quả tương ứng có thể như sau

N U M BO A RD .IN P
 
N U M B O A R D .O U T

2
 
1 3

2 12
 
2 4

3 8

3
 
1 2 0

5 8
 
18
 
5 0 6

2 30 12
 
0 4 3

5
 
6
 
3
 
0
 
0
 
0

54 6 12 20 88
 
9
 
0
 
1 0
 
0

18 9 132 32 10
 
0
 
0
 
12
 
0
 
11
0
 
0
 
0
 
4
 
8
0
 
2
 
0
 
5
 
0

106

C h ư ơ ỉĩịị 5. B à i ĩo â n tố i ưỉi ĩc! h ợ p

5

BÀI TOÁN TỐI ƯU

5.1. Phát biểu bài toán

Trong rất nhiều vấn đề ứng dụng thực tế của tổ hợp các cấu hình tổ hợp còn được gán
cho m ột giá trị bàng sô' đánh giá giá trị sứ dụng của cấu hình đối với m ục đích sử dụng
cụ thể nào đó. Khi đó xuất hiện bài toán: Hãy lựa chọn trong số các cấu hình tổ hợp
chấp nhận được cấu hình có giá trị sử dụng tốt nhất. Các bài toán như vậy chúng ta sẽ
gọi là bài toán tối ưu tổ hợp. Dưới dạng tổng quát bài toán tối ưu tổ hợp có thể phát biểu
như sau:

Tim cực tiểu (hay cực đại) của phiếm hàm

f ự )
 
-> min (max),

với điều kiện

.r e
 
D,

trong đó
 
D
 
là tập hữu hạn phần tử.

H àm
 
f { x )
 
được gọi là hàm mục tiêu của bài toán, mỗi phần
 
ì ừ
 
X
 
e
 
D
 
được gọi là
m ột phương án còn tập
 
D
 
gọi là tập các phương án của bài toán.

107

Phần 1. Lý thuyết tổ hợp

Thông thường tập
 
D
 
được mô tả như là tập các cấu hình tổ hợp thoả m ãn m ột số
tính chất cho trước nào đó.

Phương án X* e
 
D
 
đem lại giá trị nhỏ nhất (lớn nhất) cho hàm m ục tiêu được gọi là
phương án tối ưu,
 
khi đó giá trị /
 
= f{ x )
 
được gọi là giá trị tối ưu của bài toán.

Dưới đây chúng ta sẽ giới thiệu m ột số m ô hình tối ưu hoá tổ hợp truyền thống. Các
m ô
 
hình
 
này,
 
m ột
 
m ặt, là những
 
m ô hình
 
có
 
rất nhiều
 
ứng dụng
 
thực
 
tế, m ặt khác,
chúng giữ vai trò quan trọng trong việc nghiên cứu và phát triển lý thuyết tối ưu hoá tổ
hợp.

Bài toán người du lịch.

M ột người du lịch m uốn đi tham quan
 
n
 
ìhành phố r , , Tj,
 
r„. X uất phát tù niội thành
phố nào đó ngưỜ! du lịch m uốn đi qua tất cả các thành phố còn lại, m ỗi thành phố đúng
m ột lần, rồi quay trở lại thành phố xuất phát. Biết
 
Cịị
 
là chi phí đi từ thành phố
 
Tị
 
đến
thành phố
 
Tj
 
(/, j
 
=
 
ỉ, 2,..., /ỉ), hãy tìm hành trình (m ột cách đi thoả m ãn điều kiện đặt
ra) với tổng chi phí là nhỏ nhất.

R õ ràng ta có thể thiết lập tương ứng 1-1 giữa hành trình
vói m ột hoán vị
 
(;r(l),
 
t
t
Ọ.),...,
 
nịn))
 
của
 
n
 
số tự nhiên
 
1, 2,...,
 
n.
 
Đ ặt

f { 7 Ỉ )
 
=

và ký hiệu n
 
là tập tất cả các hoán vị
 
7 Ĩ =
 
(;ĩ(l),
 
7
t
{ 2 )
 
.....
n{n) )
 
của
 
n
 
s ố tự nhiên
 
1, 2,...,

n.
 
Khi đó bài toán người du lịch có thể phát biểu dưới dạng bài toán tối ưu tổ hợp sau:

min {
f{7ĩ)
 
: ;rG n
 
}.

Có thể thấy rằng tổng số hành trình của người du lịch là
 
n\,
 
trong đó chỉ có (/7-1)!
hành trình thực sự khác nhau (bởi vì có thể xuất phát từ m ột thành p h ố bất kỳ, nên có
thể cố định m ộ t thành phố nào đó là thành phố xuất phát).

Bài toán cái túi.

M ột nhà thám hiểm cần đem theo m ột cái túi có trọng lượng không quá
 
b.
 
Có
 
n
 
đồ vật
có thể đem theo. Đ ồ vật thứ
 
j
 
có trọng lượng là
 
Oj
 
và giá trị sử dụng là
 
Cj
 
0
 
= 1 , 2,..., /ỉ).
H ỏi rằng n hà thám hiểm cần đem theo các đồ vật nào để cho tổng giá trị sử dụng của
các đồ vật đem theo là lớn nhất?

M ột phưcmg án đem đồ của nhà thám hiểm có thể biểu diễn bởi vectơ nhị phân độ
dài
 
n: X = {Xị, X
2
,..., x j ,
 
trong đó
 
Xj =
 
1 có nghĩa là đồ vật thứ
 
j
 
được đem theo và
 
Xj
 
= 0
có nghĩa trái lại, Với phương án X, giá trị đổ vật đem theo là

108

Chirơníị 5. Bài íoún tối ưu tổ hợp

f { x ) = ỵ c ^ x
 
^ ,

ý--i

tổng trọng lượng đồ vật đem theo là

và bài toán cái túi có thể phát biểu dưới dạng bài toán tối ưu tổ hợp sau:

Trong số các vectơ nhị pliân độ dài
 
n
 
thoả mãn điều kiện
 
g(x) < b,
 
hãy tìm vectơ /
cho giá trị nhỏ nhất của hàm mục tiêu/(.v);

m in {
 
/U ): ,í>(.v)
 
< b
 
\.

Bài toán ch o thuê m áy.

M ột ông chủ có m ột cái m áy để cho thuê. Đầu tháng ông ta nhận được yêu cầu thuê
m áy của
 
m
 
khách hàng. M ỗi khách hàng
 
/
 
sẽ cho biết tập
 
N ị
 
các ngày trong tháng cần
sử dụng m áy (/ =
 
1, 2,..,,
 
m).
 
ô n g chủ chỉ có quyền hoặc là từ chối yêu cầu của khách
hàng
 
hoặc là nếu nhận thì phải bố trí máy phục vụ khách hàng
 
i
 
đúng những ngày m à
khách hàng này yêu cầu. Hỏi rằng ông chủ phải tiếp nhận các yêu cầu của khách như
th ế nào để cho tổng số ngày sử dụng máy là lớn nhất.

Ký hiệu / =
 
{1, 2,...,
 
m]
 
là tập chỉ số khách hàng,
 
s
 
là tập hợp các tập con củ a /.
Khi đó tập hợp tất cả các phương án cho thuê m áy là

D = \ J c:
 
s
 
\ Ni-C\ N
 
= 0 ,
 
V k ĩ^p,
 
k , p
 
e J
 
\.

và với m ỗi phương án 7 6 D

/ Ơ )
 
= Z
 
I M

j s J

sẽ là tổng số ngày sử dụng m áy theo phương án đó. Bài toán đặt ra có thể phát biểu dưới
dạng bài toán tối ưu tổ hợp sau:

m ax {
 
f( J ) : J e D
 
Ị.

Bài toán đ ón g thùng.

Có
 
n
 
đồ vật với trọng lượng là W|,
 
W
ị
 
,
 
w„.
 
Cẩn tìm cách xếp các đồ vật này vào các
cái thùng có cùng
 
dung
 
lượng là
 
h
 
sao cho số thùng cần sử dụng
 
là nhỏ nhất có
 
thể
được.

Ta có thể giả thiết là

vv,
 
< h , i =
 
1 ,2 ,..,
 
n.

109

P h ẩ n
 
I . L ỷ th u y ế t t ổ h ợ p

Do đó số thùng cần sử dụng để chứa tất cả các đồ vật là không quá
 
n.
 
Vấn đề là cần số
thùng ít nhất. Ta sẽ m ở sẫn
 
n
 
cái thùng. Bài toán đặt ra là hãy xác định xem mỗi một
trong số
 
n
 
đồ vật cần được xếp vào cái thùng nào trong số
 
n
 
cái thùng đã m ở để cho số
thùng chứa đồ là ít nhất. Phân tích vừa nêu cho thấy bài toán đóng thùng là bài toán tối
ưu tổ hợp.

Bài to á n p h à n công.

Có
 
n
 
công việc và
 
n
 
thợ. Biết
 
Cịj
 
là chi phí cần trả để thợ / hoàn Ihành công việc
 
j
 
(/,
 
j
 
=
1,
 
2,..., rì).
 
Cần phải thuê thợ sao cho các công việc đều hoàn thành và m ỗi thợ chỉ thực
hiện một công việc, mỗi công việc chỉ do m ột thợ thực hiện. H ãy tìm cách thuê sao cho
tổng chi phí thuê thợ là nhỏ nhất.

Rõ ràng m ỗi m ột phương án bố trí thợ thực hiện các công việc

Cống việc
 
Thợ thực hiện

1
 
^ 1 )

2
 
4 2 )

...
 
...

n
 
7 i { n )

tương ứng với m ột hoán vị
 
n =
 
( ^ 1 ) ,
 
n{2)
.....
Tĩin))
 
của /ỉ số tự nhiên
 
1, 2,...,
 
n.
 
Chi phí

theo phương án bố trí trên là

f { ĩ ì )
 
—
 
+
 
Crn2).2
 
+ •••
 
+

Bài toán đặt ra, được dẫn về bài toán tối ưu tổ hợp:

m in {
f { 7 ĩ )
 
: 7Ĩ
 
}.

B ài to á n lậ p lịch.

Mỗi m ột chi tiết trong số
 
n
 
chi tiết D |,
 
D
 
2
 
,:., D„
 
cần phải được lần lượt gia cônR trên
 
m

m áy
 
Mị,
 
M„,. Thời gian gia công chi tiết D, trên m áy
 
Mj
 
là
 
. H ãy tìm lịch (trình
tự gia công) các chi tiết trên các m áy sao cho việc hoàn thành gia công tất cả các chi
tiết là sớm nhất có thể được.

Ta sẽ xét bài toán trên với thêm giả thiết là các chi tiết phải được gia công m ột cách
liên tục, nghĩa là quá trình gia công của mỗi m ột chi tiết cần phải được tiến hành m ột
cách liên tục hết m áy này sang m áy khác không cho phép có khoảng thời gian dừng khi
chuyển từ m áy này sang m áy khác. Tm h huống như vậy rất hay gặp trong các ngành
sản xuất công nghiệp. Chẳng hạn, trong công nghiệp luyện thép,
 
vật liệu
 
cần phải
 
được

gia công m ột cách liên tục vì việc gián đoạn sẽ dẫn
 
đến sự giảm nhiệt
 
độ củ a vật
 
liệu và

110

C h ư ơ ỉìịị 5. ỉk ìi ỉoáfỉ ĩ()i lãi ĩồ hợp

điều đó cản trở việc gia công tiếp theo. Tình huống tươrìg lự cũng có thể xảy ra tropg
m ột số ngành của công nghiệp hoá chất.

Rõ ràng m ỗi m ột lịch gia cône các chi tiết trên các máy trong tình huống như vậy
sẽ tương ứng với m ột hoán
 
vì rr=(7ĩ{\),
 
/ĩịỉì))
 
của
 
n
 
số tự nhiên
 
1, 2,...,
 
n.
 
Thời

gian hoàn thành theo lịch trên được tính bởi hàm số

/7-1
 
n
i

/'(TT) -■
 
ĩt
(
 
/
 
+))

J = \
 
ĩ
 
= l

C
-. = max

\ < k < m

trong đó
 
Cịj
 
= Sj- s,,
 
Sj
 
- thời điểm bàt đầu thực hiện việc gia công chi tiết / (/, / -
 
1,
2,...,
 
n).
 
Ý nehĩa của hệ số
 
Cị,
 
có thể giải ihích như sau; nó là tổng thời gian gián đoạn
(được tính từ khi bắt đầu gia công chi tiết 0 gây ra bởi chi tiết
 
j
 
khi nó được gia công
sau chi tiết / trong lịch gia công. Vì vậy,
 
c , ị
 
có thể tính theo công thức:

i-Ị

. / = 1
 
/ = 1

Vì vậy, bài toán đặt ra dẫn về bài toán tối ưu tổ hợp sau
m in {
f{7ĩ)\
 
; r G
 
n
 
).

Trong thực tế lịch gia công thườns còn phải thoả màn thêm nhiều điều kiện khác.Vì
những ứng dụng quan trọng của vấn đề này mà trong lối ưu hoá tổ hợp đã hình thành
m ột lĩnh vực lý thuyết riêng vẻ các bài toán lập lịch gọi là lý thuyết lập lịch (hay quy
hoạch lịch).

5.2. Các thuật toán duyệt

5.2.1. D uyệt toàn bộ

M ột trong những phương pháp hiển nhiên nhất để giải bài toán tối uu tổ hợp
 
đạt
 
ra là;
Trên cơ sở các thuật toán liệt kê tổ hợp ta tiến hành duyệt từng phưcmg án của bài toán,
đối với m ỗi phương án ta đều tính giá trị hàm mục tiêu tại nó, sau đó so sánh giá trị
hàm m ục tiêu tại tất cả các phương án được liệt kê để tìm ra phương án tối ưu. Phương
pháp xây dựng theo nguyên tắc như vậy có tên gọi là phương pháp duyệt toàn bộ. Duyệt
toàn bộ là khó có thể thực hiện được ngay cả trẽn những m áy tính điện tử hiện đại nhất.
V í dụ để liệt kê hết

15! = 1 307 674 368 000

hoán vị trên m áy tính điện tử với tốc độ tính toán 1 tỷ phép tính m ột giây, nếu để liệt kê
m ột hoán vị cần phải làm
 
100 phép tính, thì ta cần một khoảng thời gian là 130767 giây

111

Phần 1. Lý thuyết tổ hợp

>
 
36 tiếng đồng hồ! Vì vậy cần phải có những biện pháp nhằm hạn chế việc tìm kiếm
thì mới có hy vọng giải được các bài toán tối ưu tổ hợp thực tế. Tất nhiên để có thể đẽ ra
những biện pháp như vậy cẩn phải nghiên cứu kỹ tính chất của bài toán tối ưu tổ hçfp cụ
thể. N hờ những nghiên cứu như vậy, trong m ột số trưcmg hợp cụ thể ta có thể xây dựng
những thuật toán hiệu quả để giải bài toán đặt ra. Tuy nhiên phải nhấn m ạnh rằng trong
nhiều trường hợp (ví dụ trong các bài toán người du lịch, bài toán cái túi, bài toán cho
thuê m áy nêu ở trên) chúng ta chưa thể xây dựng được phương pháp hữu hiệu nào khác
ngoài ohương pháp duyệl toàn bộ. Khi đó, m ột vấn đề đặt ra là trong quá trình liệt kê lời
giải ta cần tận dụng các thông tin đã tìm được để loại bỏ những phương án chắc chắn
không phải là tối ưu. Trong mục tiếp theo chúng ta sẽ xét m ột sơ đồ tìm kiếm như vậy
để giải các bài toán tối im tổ hợp mà trong tài liệu tham khảo được biết đến với tên gọi:
thuật toán nhánh cận.

5.2.1. T huật toán nhánh cận.

Ta sẽ m ô tả tư tưởng của thuật toán trên mô hình
 
bài toán tối U
X
I tổ hợp tổng q i 't sau
min
 
Ị
 
f{x)
 
X
 
& D
 
],

trong đó
 
D
 
là tập hữu hạn phần tử.

G iả thiết rằng tập
 
D
 
được mô tả như sau

D - \ x
 
=
 
(.r,,
 
X
 
j
 
,
 
x„) e A|X
 
...
 
X
 
A„:
 
X
 
thoả m ãn tính chất
 
P],

với
 
A ị ,
 
A ị ,
 
là các tập hữu hạn, còn
 
p
 
là tính chất cho trên tích Đ ềcac> \|
 
X
 
/ i j
 
X
 
. . .
 
X

-

Nhận thấy rằng, các bài toán vừa trình bày ở m ục trước đều có thể mô tả dưới dạng
bài toán trên.

Với giả thiết về tập
 
D
 
nêu trên, chúng ta có thể sử dụng thuật toán quay lui để liệt
kê các phương án của bài toán. Trong quá trình liệt kê theo thuật toán quay lui, ta sẽ
xây dựng dần các thành phần của phương án. M ột bộ gồm
 
k
 
thành phần (ứ|,
 
Ũ
2
 
,
 
ÖJ.)

xuất hiện trong quá trình thực hiện thuật toán sẽ gọi là phương án bộ phận cấp
 
k.

Thuật toán nhánh cận có thể áp dụng để giải bài toán đặt ra nếu như có thể tìm
được m ột hàm
 
g
 
xác định trên tập tất cả các phương án bộ phận của bài toán thoả mãn
bất đẳng thức sau:

g(a,, «2
 
-----
 
-
 
a^)
 
<
 
min j/(x):
 
.r e
 
D, X;
 
= a , , ỉ = 1, 2,...,
 
(*)

với mọi lời giải bộ phận (ứ|,
 
Ü
2
 
,
 
a ^ ,
 
và với m ọi /: = 1, 2 ,...

Bất đẳng thức (*) có nghĩa là giá trị của hàm
 
g
 
tại phương án bộ phận (ứ|, 02,
 
a^)

là không
 
vượt quá giá trị nhỏ nhất của hàm
 
m ục tiêu của bài toán
 
trên tập con các
phương án

112

Chư ơng 5. B à i
 
Ịo á ìỉ
 
íấi
 
ưu
 
lổ hợỊ>

CỈ2,
 
....
 
=
 
\ X e
 
D
 
:
 
A
', ^
 
Oị J
 
=
 
1, 2
 
......
 
k
 
},

hay nói một cách khác,
 
Ũ
2
 
J
 
, aị)
 
là cạn dưới của giá trị hàm m ục tiêu trên tập
0 ( ữ |,
 
C
i
2
 
,
 
a^).
 
Vì lẽ đó, hàm
 
được gọi là hàm cận dưới, và giá trị
 
g{a^, Oj,
 
, Oị)

được gọi là cận dưới của tập
 
D{a^, Ơ
2
,
 
....
 
Cỉị).
 
Do có ihể đồng nhất tập
 
DiOị, Ũ
2
,
 
ơị.)

với phưcmg án bộ phận (a,,
 
Ũ
2
 
......
 
C
iị^),
 
nên ta cũng gọi giá trị
 
giciị,
 
í/2, . . . ,
 
Ơ
Ị.)
 
là cận

d ư ớ i
 
c ủ a p h ư ơ n g án b ộ p h ậ n
 
CỈ
2
 
, ....
 
Ch).

Giả sử đã có hàm
 
g.
 
Ta xét cách sử dụng hàm này để giảm
 
bớt khối lượng duyệt
trong quá {rình duyệt tất cả các ptiưưng án theo inuật tcán quay lui. Trong quá tnnli liệi
kê các phươíig án có thể đã thu được rnột số phương án của bài toán. Gọi
 
X là phương
án với giá trị hàm m ục tiêu nhỏ nhất trong số các phương án đã tìm được, ký hiệu
 
7 =
/(
 
X
 
). Ta sẽ gọi
 
X là phương án tốt nhất hiện có, còn
 
/
 
là kỷ lục. G iả sử đã có
 
/ ,
khi đó nếu

>
 
/ ,

thì từ bất đẳng thức (*) suy ra

/
 
<
 
Ũ
2
 
..........í/<) <
 
min |/(.v):
 
e
 
D,
 
.V,
 
=:
 
a,
 
,
 
/ = 1, 2,...,
 
k],

vì th ế tập con các phương án của bài toán D(í/j, «2. •••. «<) i-'hac chắn không chứa phương
án tối ưu. Trong trường hợp này ta không cần tiếp tục phát triển phương án bộ phận
 
{ứị,

Ơ
2
 
, . ■■, a ị),
 
nói cách khác là ta có ihể loại bỏ các phương án trong tập
 
D (ữ|,
 
0 2
 
,
 
,
 
<
3^)

khỏi quá trình tìm kiếm.

T huật toán quay lui liệt kê phương án cần sửa đổi lại như sau

procedure
 
Try(k);

(*
 
Phát triển phương án bộ phận (a,, ỈÌ2, a ; , . , )
theo thuật toán quay lui có kiểm tra cận dưới
trước khi tiếp tục phát triển phương án *)'■

begin

for
 
G
 
Aỵ
 
do

if
 
<chấp nhận
 
SiỊ,>
 
th en

begin

Xk :=
 
a,;

if
 
k = n
 
th e n
 
< Cập nhật kỷ l ụ o

else

if
 
g(a,, a ^ , a j
 
<
 
f
 
th en
 
Try(;-+Ĩ)

end;

end;

113

Phần
 
/.
 
Lý thuyết tổ hợp

Khi đó, thuật toán nhánh cận được thực hiện nhờ thủ tục sau

procedure
 
N hanh_can;

begin

f
 
:= +co;

(* Nếu biết m ột phương án
 
X nào đó thì có thể đặt
 
f
 
=
 
f(
 
X ) *)

Try(J);
 
_

if
 
f
 
<
 
+00 th e n
 
<
 
f
 
là giá trị tối ưii,
 
X là phưoìig án tối ưu >
else
 
<
 
bài toán không có phương án >;

end;

Chú ý rằng nếu trong thủ tục Try ta Ihay câu lệnh

if
 
k = n
 
th e n
 
< C ập nhật kỷ l ụ o

else

if
 
g(a„ a j , a , )
 
<
 
f
 
th e n
 
Try(k+1)

bởi

if
 
k = n
 
th e n
 
< Cập nhật kỷ l ụ o
else
 
Try(k+1)

thì thủ tục Try sẽ liệt kê toàn bộ các phương án của bài toán, và ta thu được thuật toán
duyệt toàn bộ.

Việc xây dựng hàm
 
g
 
phụ thuộc vào từng bài toán tối ưu tổ hợp cụ thể. T hông thường ta
cố gắng xây dựng nó sao cho;

•
 
V iệc tính giá trị của g phải đoíi giản hơn việc giải bài toán tối ưu tổ hợp ở vế
phải của (*).

•
 
G i á t r ị c ủ a
 
«
 
2
. • • • . « t ) p h ả i s á t v ớ i g i á
 
tr ị c ủ a
 
v ế p h ả i c ủ a
 
( * ) .

Rất tiếc là hai yêu cầu này trong thực tế thường đối lập nhau.

Dưới đây chúng ta sẽ xét m ột số thí dụ m inh hoạ cho thuật toán vừa trình bày.

a)
 
B ài toán cái túi.

Chúng ta sẽ xét m ột dạng bài toán cái túi nữa rất hay được sử dụng trong các ứng
dụng thực tế (về nguyên tắc, m ô hình ở đây và m ô hình đã trình bày trong m ục 5.1 là có
thể qui dẫn về nhau). Thay vì có
 
n
 
đồ vật như m ô hình trong m ục 5.1, ở đây ta giả thiết
rằng có
 
n
 
loại đồ vật và số lượng đồ vật m ỗi loại là không hạn chế. PLhi đó ta có mô
hình bài toán cái túi biến nguyên sau đáy: Có
 
n
 
loại đổ vật, đồ vật thứ
 
j
 
có trọng lượng

Ơ
J
 
và giá trị sử dụng là
 
Cj
 
0
 
= 1 - 2,...,
 
n ) .
 
Cần chất các đồ vật này vào m ột cái túi có
trọng lượng là
 
h
 
sao cho tổng giá trị sử dụng của các đồ vật chất trong túi là lớn nhất.

114

ChU(ín¡f 5. B ù i Ĩ(XUÌ t o i ưu ì ổ hợp

Mô hình toán học của bài toán có dạng sau; Tini

/
 
’ - m a x
 
{ / ( x )
 
= X c , - v , : Z û , - v ,
 
6
 
2 , , y
 
=
 
1 , 2 , . . . , «
 
},
 
( 1 )

7
=
1
 
■
 
7
=
1

trong đó
 
là tập các số nguyên không âm.

Ký hiệu
 
D
 
là tập các phương án của bài toán ( 1):

D
 
¿
 
a X < h
 
,
 
.V
 
z ,
 
j
 
- 1 ,
 
2
 
..
 
.
 
n
 
}.

./
 
I

Không giảm tống quát ta giả thiết rằng các đô vật được đánh số sao cho bãt đẳng thức
sau được thoả mãn

c j a ^ > í \ l a
 
2
 
> .. .> c „ l a „ .
 
(2 )

Để xây dựng hàm tính y ận dưới, cùng với bài toán cái túi (1) ta xét bài toán cái tiíi biến
liên tục sau: Tim

g
 
=
 
max { / ( x ) =
 
Y ,c ¡xr. Y jü jX j < b,
 
Xj
 
>
 
o,
 
ý = l , 2 , . . . , / 7 },

./-1
 
(3)

Mệnh đề.
 
Phương
 
án fối ưu
 
c ủ a
 
hài
 
íũán
 
(3) là
 
vecĩơ
 
X -
 
(
 
A
'| ,
 
Ấ
' 2
 
,
 
A
'^
,
 
)
 
với cúc

thành phần dược xủ c định hởi công ỉlìức:

,V] =
 
b
 
/
 
C
iị
 
,
 
=
 
. . . =
 
=
 
0
 
.

ĩĩ)
 
giá írị tối ưu là
 
ị /a ị,

Chứng minh.
 
Thực vậy, xét
 
A
' -
 
(.V,. A i,
.... ,v„) là m ột
 
phương
 
án luỳ ý của bài toán (3).
Khi đó từ bất đẳng thức (3) và do ,v^ > 0,
 
ta suy ra

C)X^
 
>
 
( Cị /
 
Cỉị
 
)
 
üj.Xj , j
 
=
 
1, 2
,
 
n

suy ra

Ỉ ^ J ^ J
 
-
 
K -’'; = (^1
 
=
 
S -

;=1
 
./ =
 
1
 
j = \

M ệnh đề được chứng minh.

Bây giờ, giả sử ta có phương án bộ phận cấp
 
k:
 
(W|,
 
w¿). Khi đó giá trị sử dụng

của các đồ vật đang có trong túi là

ơị.
 
= Cị /í| +
 
C
-2 í/2 + • ' - + Q
-

115

Phẩn ỉ . Lý ĩhuyếĩ tổ ỈU
TỊ)

và Irọng lượng còn lại của cái túi là

6^. = ử - aj W
| + «2 ^2
 
-

Ta có

max{
 
fix ):
 
X
 
G D,
 
= Uj
 
= 1, 2
 
,
 
k ]

^
 
m ax {ơ* +
 
' ¿Cj Xj :
 
Y^üj Xj < b^, Xj G z ^ , j = k + ì , k
 
4 2,...,«}

j=k*-\
 
J=k-^\

<ơ-^ + m ax{
 
>
 
0,7
 
= Ẩ
: + 1,^ + 2,...,;?}

J^.kri
 
j=k^\

(theo M ệnh đề: giá trị số hạng thứ hai là
 
b/.
 
/

= ơ-t + c ,„

Vậy ta có thể tính cận trên cho phương án bộ phận
 
( « ị ,
 
«2-
 
“ i) bởi công thức

C h ú ý: Khi tiếp tục xây dựng thành phần thứ
 
^+1 của ỉời giải, các giá trị đề cử cho
sẽ là
 
0, 1 ,...,
 
[h/.
 
/ a,^.| ]. Do có kết quả của m ệnh đề, khi chọn giá trị cho
 
Xi.+ị
 
ta sẽ duyệt
các giá trị để cử theo thứ tự giảm dẫn.

T h í d ụ . G iải bài toán cái túi sau theo thuật toán nhánh cận vừa trình bày

f{ x ) =
 
10 -V
| + 5 JÍ2 + 3 JC
j + 6 X4 —
> m ax,

5 X, + 3 ^2 + 2 Xj + 4 X4 < 8 ,

Xj
 
G
 
,y = 1, 2, 3, 4.

G iải.

Quá trình giải bài toán được m ô tả trong cây tìm kiếm trong hình
 
1. Thông tin về m ột
phưoTig án bộ phận trên cây được ghi trong các ô trên hình vẽ tương ứng theo thứ tự sau:
đầu tiên là các thành phần của phương án, tiếp đến, ơ là giá trị của các đổ vật đang chất
trong túi, vv - trọng lượng còn lại của túi và
 
g -
 
cận trên.

K ết thúc thuật toán, ta thu được phương án tối ưu là /
 
= ( 1, 1 ,0 , 0), và giá trị tối ưu
l à / =
 
15.

116

ClìươnỊ>
 
5
.
 
B à i l o á n t ố i ưu t ổ hợp

1....... .

Gốc;
 
+ ' X )

^
 
=
 
0

( l ) ; a = 10;

k
- = 3 ;
ì
- I 5

(0 ); ơ = 0 ;

vi’- 8 ;
 
. ^ - 4 0 / 3

-v, = 0

( 1. 1):
 
ơ=15;

H '= 0 ;
 
.?=15

a
-3
 
=
 
0

( 1, 1,0 )
; ơ=15;

H ' = 0
 
;
 
A - 15

.V,
 
= 0

ri,.Oi: ơ -
 
10;

VI
-3 ; ,í>=14,5
 
I

Loại vì cận trên < kỷ lục

Thu được phương án của bài loán.

Cập nhật lại kỷ lục.

H ìn h 1. Giải bài toán cái túi bàng thuật toán nhánh cận

Dưới đây là chương trình trên PASCAL giải bài toán cái túi theo thuật toán nhánh
cận vừa trình bày.

uses crt;

const in f = 25000;

type
 
a rm
 
= arrayỊ 1
 
..50J o f in te ự r ;

a rrn ỉ -
 
array! ỉ . .50/ o f real;

var

c ,a
 
: a r n i l ;

x ,x o p t,in d
 
: a rm ;

n
 
: integer:

w ,fo p t, cost, weight: real:

procedure Init:

var i,j,tg:integer;

f.real:

117

Plìần ỉ. Lý thuyết tổ hợp

begin

Sap xep cac do vat theo thu ĩu kìĩon^ íanẹ cua c[i]/a[il

fo p t:=
 
0
 
;
 
w eig h t:-
 
0
 
:

f o r i:= ỉ to n do ìỉĩd[i]:~i;

f o r i:= Ị to n
 
- 1
 
do

heqin

fo r j:=i'\-J ĨO n do

ifịc [i]la [i]< c[j]la[jj) ĩhen

begin

í:= c[iỊ: c[iJ:= c[jỊ; c f j j - t ;

ỉ:= a [ĩj; a[iỊ.— a íjỉ; a[jỊ:= f;

tg := in d /ij; ind[il := in d [jj: ind[j]:= ĩg;

end;

end;

end;

pro ced u re R eadfiie;

var i
 
: integer;

f
 
: text;
 
nam e : siring;

begin

writeCCho ten file du lieu: ');readln(nam e);

assign(f,nam e):reseĩ(f); read(f,n,w );

f o r j : = l to n do
 
read(f,a[jj);

fo r j: = I to n do
 
read(f,c[jj);

close(f);

w rite ln (T ro n g luong cai
 
ĨUÌ:
 
\w : l :0);

w n te ln (V E C TO GIA TRJ D O V A T );

f o r j : ~ I
 
to n do w rite(c[j]:4:0);
 
writeln:

w n te ln (V E C TO T R O N G L U O N G D O V A T );

f o r j : - l
 
to n do w rite(a[jj:4:0);
 
writeln:

end;

p rocedure G h in h a n _ k y ju c ;

var i: integer;

begin

i f cost > fo p t then

begin

xopt:
 
fo p t:= co st;

end;

end;

118

Chuang
 
5.
 
Bái toan toi lúi to hap

procedure Branch _and_Boiind{i:inte
 
ge r ):

var j,t:integer;

begin

t:= trunc((w -w eight}lalij):

f o r j:= í down to O do

begin

x[i]-=i;

w e i g h t : - - w e i g h t + a f i ]
 
;

c o s t : = C O S Í
 
+ c / / y
 
/ ;

i f
 
i = n
 
t h e n
 
G h i n h a n j c y j u c

e l s e

i f cost
 
+
 
c[i+ I ¡"^'(w-weight)la[i-\~l J > fo p t

then Branch_and_Boiind
{/+7 j;

w eight:= w eight-a[ i
/*.v/
 
ij:

cost:= cost-c[
 
/y*x//7 ;

end;

end;

procedure Inkc[;

var j,i:integer;

begin

K K r Q U A T IN H T O A N

w riteln (T o n g gia tri cua cac do vat: 'fo p t: l:
 
0
 
):

w riieln('P huong an dent do: '):

fo r j: = J
 
to n do writeln('So luong do v a t i n d l j j / : \xopt[j]:4);

write('G o E nter de tiep tuc...');n'aclln;

end;

BE G IN

clrscr;

Readfile;

Init;

Branch _and_Bound( 1);

Inkq: readin:

E N D .

119

Phần I. Lý thuyết lổ hợp

b) Bài to á n người du lịch.

Mô hình của bài toán đã trình bày trong inục trước. Cố định thành phô' xuấl phát là 7’|,
bài toán người du lịch dẫn về bài toán:

Tìrn cực tiểu của hàm

-h
 
.......
 
-'■
») =
 
1-^2] + f'U;-
 
X 3 ]
 
+ ... +
 
c[x,.¡,
 
A-J + í [a'„, 11 -> m in,

với diều kiện

(x'
2
 
,
 
A
 
' v
 
...........
 
v„)
 
l à
 
hoán vị của các số 2, 3
 
,
 
n.

Ký hiệu

r„„„ =
 
min { (■[/,;] , /,ý = 1, 2 ,
 
ỉỉ, i
 
Î

là chị phí đi lại nhỏ nhất giữa các thành phố.

Để có được thuật toán nhánh cận giải bài toán người du lịch, trước hết cần đưa ra
cách đánh giá cận dưới cho phương án bộ phận. Giả sử ta đang có phương án bộ phận
(W|,
 
«<). Phương án này tưcíiig ứng với hành trình bộ phận qua
 
k
 
thành phố:

T
 
I ->
 
TiUj)
 
T{u¡..^)
 
->
 
T{u¡).

Vì vậy, chi phí phải trả theo hành trình bộ phận này sẽ là

ơ
 
= c [ l , » 2 ] +
 
c[«2> «
 
3
] +

Để phát triển hành trình bộ phận này thành hành trình đầy đủ, ta còn phải đi qua
 
n-k

thành phố còn lại rồi quay trở về thành phố
 
Tị,
 
tức là còn phải đi qua
 
n -k + \
 
đoạn đường
nữa. Do chi phí phải trả cho việc đi qua mỗi m ột trong sô'
 
n -k
 
+ 1 đoạn đường còn lại đều
không ít hơn
 
nên cận dưới cho phưofng án bộ phận (W|, «2-
 
«*) có thể tính theo

công thức

g{iiị,
 
« 2 , ....
 
u^)
 
=
 
ơ
 
+
 
(n-k +l)
 
.

Sử dụng cách tính cận dưới vừa nêu ta có thể áp dụng thuật toán nhánh cận để giải bài
toán người du lịch.

T h í d ụ . Giải bài toán người du lịch với m a trận chi phí sau

c
 
=

0
 
3
 
14
 
18
 
1 5

3
 
0
 
4
 
22
 
2 0

17
 
9
 
0
 
16
 
4

6
 
2
 
7
 
0
 
12

9
 
15
 
11
 
5
 
0

120

Cliươní’
 
5.
 
Bùi loán lói lúi lổ hợp

Ta có
 
í „„„ = 3. Q uá trình thực hiện thuật toán được mỏ ta bdi cAy tìm kiếm lời giải cho
trong hình 2 .

Tliông tin về inột phương án bộ phận trên cây được phi trong các ô trên hình vẽ tương
ứng theo thứ tự sau; đầu tiên là các thành phần của phương án, tiếp đến, ơ
 
là chi phí
theo hành trình bộ phận và
 
g -
 
cận dưới.

Kết thúc thuật toán, ta thu được phương án tối ưu
 
(1, 2, 3, 5, 4,
 
1) tưotig ứng với
h ìn h rrình

T|
 
T,
 
T,
 
T, -> T., -> T.

và chi nhỏ nhất là 25.

chi phí 53. Đ ặt
 
f = 53
 
Kỷ lục mới:
 
f = 25

H ình 2.
 
Giải bài toán người du lịch

Chương trình trên PA SCA L thực hiện thuật toán có thể viết như sau:

121

Phan 1. Ly thuyet to hcxi?

uses crt;

var

c
 
: a rra y ll .
2
 
0
 
,
1
 
.
2
 
0
 
] o f integer;

a, x o p t
 
: a r r a y ll..
2 0
 
] o f integer;

chuaxet
 
: a r ra y ll .
2
 
0
 
] o f boolean;

n ,fo p t, cm in, Can : integer;

p ro ced u re R eadfde;

var f'te x t;

nam e :sfring;

iJ :integer;

begin

w rite('C ho ten file du lieu: ');

readln(nam e);

a ssig n (fn a m e ) ;reset(f);

r e a d (fn );

f o r i : ~ l to n do

f o r j : - l
 
to n do
 
r e a d (fc lij] );

close(f);

cm in:= m axint;

f o r i:= l to n do

f o r j : - l
 
to n do

i f ( i o j )
 
a n d (c m in > c lij]) then cm in := cli,j];

end;

p ro ced u re G hinhan;

var sum :integer;

begin

sum := C a n + c la [n ],a ll]];

i f sum < fo p t then

begin

xopt:= a;

fo p t:= su m ;

end;

end;

p ro ced u re Try(i:integer);

var j:in teg er;

begin

122

Chươní^
 
5.
 
Bcii loan tối ưu t ổ
 
hợỊ)

Co dinh thanh pììo xuaĩ phaĩ la Thanh pho I

D uyet (n-1)! hanh ỉrinh ĩheo nhanh can

fo r j
 
: -
 
2
 
to n do

ifclìu ơ xet[jj then

begin

a [ i j : = j ;

chuaxetlj]:= faìse;

can :=can-¥c[a[i~ ỉ l / i ị i l ] ;

i f i - n
 
then Ghiỉìỉìon

else

i f C a n ^ ( n - i^ I )^cmin <fopĩ then T ry(i-^ỉ)

cơ n:= can< [a[ĩ-l ] ,a[i]
 
J
 
;

chuaxeĩ[j]:= ĩrue:

end;

end;

procedure Inkq;

var iJ'Anteger;

begin

writelnCM A T R A N CH I PHI');

fo r i:= ỉ to n do

begin

f o r j : = l to n do
 
w rite (ciij]:4 ):

writeln;

end;

writelnCH anh trinh ĩoi uu
 
CO
 
chi p h i
 
:
 
'fo p t);

fo r
 
/ ; = /
 
to n do w rỉte(xopĩ[iỊ/
 
- >

w riieln(xopt[IJ);

writeCGo E nter de tiep iuc...');reacUn;

end;

p rocedure Init;

var i j : integer;

begin

cm in:= m axint;

fo r i:= I to n do

begin

chuaxet
 
[i]:=true;

fo r j : - l
 
to n do

123

Phân ỉ. Lý thuyết tổ hợp

i f ( i o j ) and (c m in > c [ijị) then c m in :~ c fiJ Ị;

end:

fo p t:~ m a x in f;

C an:= 0:

« / / / ; = / ;

end;

BEG ỈN

Readfiie; ỉ ni
 
í;

Try(2);

ỉnkq;

EN D .

Hiệu quả của thuật toán nhánh cận phụ thuộc rất nhiều vào việc xây dựng hàm tính
cận dưới. Việc xây dựng hàm
 
tính cận dưới lại phụ thuộc vào cách
 
xây dựng thú lục
duyệt các phương án của bài toán (được gọi là thủ tục phân nhánh). Trên đây chứng ta
trình bày cách xãy dựng cận dưới khá đơn giản cho hai bài toán nổi tiếng của tối uti tổ
hợp. Các chương trình được cài đặt theo các thuật toán đó, luy rằng làm việc tốt hơn
nhiều so với duyệt loàn bộ, nhưng cũng chỉ có thể áp dụng để giải các bài toán với kích
thước nhỏ. M uốn giải được các bài toán đặt ra với kích thước lớn hơn cần có cách đánh
giá cận tốt hơn. M ột Irong những phương pháp xây dựng Irên tư tưởng của thuật toán
nhánh cận cho phép giải bài toán người du lịch với kích ihước lớn hơn sẽ được trình bày
trong m ục tiếp theo.

5.3. Thuật toán nhánh cận giải bài toán người du lịch

Thuật toán nhánh cận là m ột trong những phương pháp giải chủ yếu của tối ưu tổ hợp.
Như trong m ục trước đã thấy, tư tưởng cơ bản của nó là trong quá trình lìm kiếm lời giải
ta sẽ phân hoạch tập các phương án của bài toán ra thành hai hay nhiều tập con được
biểu diễn như là các nút của cây tìm kiếm và c ố gắng bàng phép đánh giá cận cho các
nút, tìm cách loại bỏ những nhánh của cây tìm kiếm (những tập con các phương án của
bài
 
toán) m à
 
ta biết chắc
 
chấn
 
là không chứa phương
 
án
 
tối
 
ưu.
 
M ặc dù
 
trong
 
tình
huống tồi nhất thuật toán sẽ trở thành duyệt toàn bộ, nhưng trong nhiều trường họp cụ
thể, kỹ thuật đó cho phép rút ngắn được m ột cách đáng kể quá trình tìm kiếm. M ục này
sẽ trình bày m ột cách thể hiện khác những tư tưởng của thuật toán nhánh cận vào việc
xây dựng thuật toán giải bài toán người du lịch.

124

C ỉiư ơ ỉiỊĩ 5. B ù ỉ to á n ! ố i
 
ư i Ị
 
ỉô' lìơp

Xét bài toán người du lịch phát biểu trori2 mục irước, Gọi

C = ị c „ :
 
i , j =
 
1 .2
 
.....
n
 
ì

là m a trận chi phí. Mổi hành trình của nmrời du lịch

có thể viết lại dưới dạng

( M ì ) ,
 
n { 2 ) ) , ( X 2 \
 
n( 3 ) \ .
 
, A ^ n ~ ỉ ) .
 
7ỉịn)).(7ĩ<n),
 
7ĩ(ì)),

trong đó mỗi thành phần (.70'-1).
 
^ i ) ĩ
 
sẽ dược goi là niộl canh của hành trình.

Trong bài toán người du lịch khi tiến hành tìm kiếm lời giải chúng ta
 
sẽ
 
phân
 
tập

các hành trình ra thành hai tập con: một tập gồm những hành trình chứa một cạnh

{i ,j )

nào đó còn tập kia gồm nhừne hành trình kh ồ n s chứa cạnh này. T a gọi việc làm đó là

phâ n nhánh
 
và mỗi tập con nói trên sẽ được gọi là một nhánh hay m ột nút
 
của cây tìm

kiếm . Việc phân nhánh được minh hoạ bởi cây lìm kiếm:

V iệc phân nhánh sẽ được thực hiện dựa trên một quy tắc c/ristic nào đó cho phép ta rút
ngắn quá trình tìm kiếm phương án tối
 
ưu.
 
Sau khi phân nhánh ta sẽ tính cân dưới của
giá trị hàm m ục tiêu trên mỗi một trong hai tập con nói trên. Việc tìm kiếm sẽ được tiếp
tục trên tập con có giá trị cận dưới nhò hơn. Thủ tục này sẽ được tiếp tục cho đến khi
thu được m ột hành trình đầy đủ, tức là một phương án của bài toán người du lịch. Khi
đó ta chỉ cần xét những tập con các phương án nào có cận dưới nhỏ hơn giá trị hàm mục
tiêu tại phương án đã tìm được. Quá trình phân nhánh và tính cận trên tập các phưcmg
án của bài toán thông thường cho phép n ít ngắn m ột cách đáng kể quá írình tìm kiếm
do ta loại được khá nhiều tập con chắc chắn không chứa phương án tối ưu.

M ột kỹ thuật cơ bản nữa của thuật toán là lính cận dưới sẽ được xây dựng dựa trên
thủ tục rút gọn m à chúng ta sẽ trình bày dưới đây. Sau đó những bước chính của thuật
toán nhánh cận sẽ được m ô tả thông qua m ột ví dụ số và cuối cùng ta sẽ trình bày sơ đồ
nguyên tắc của thuật toán.

125

Phán ỉ. Lý thuyếĩ tổ hợp

a) Thủ tục rú t gọn,

Rố ràng tổng chi phí của m ột hành trình của người du lịch sẽ chứa đúng m ột phần tử
của m ỗi dòng và đúng m ột phần tử của mỗi cột trong m a trận chi phí
 
c.
 
Do đó, nếu ta
trừ bớt m ỗi phần tử của m ột dòng (hay cột) của m a trận
 
c
 
đi cùng m ột số a
 
thì độ dài
của tất cả các hành trình sẽ cùng giảm đi a , vì th ế hành trình tối ưu cũng sẽ không thay
đổi. Vì vậy nếu ta tiến hành trừ bớt các phần tử của mỗi dòng và m ỗi cột đi m ột hằng số
sao cho thu được m a trận gồm các phần tử không âm m à trong mỗi dòng và m ỗi cột của
nó đều có ít nhất một số 0 thì tổng các hằng số trừ đó sẽ cho ta cận dưới của mọi hành
trình. Thủ tục trừ bớt này sẽ được gọi là thủ tục rút gọn, các hằng số trừ ở mỗi dòng
(cột) sẽ được gọi là hằng số n ít gọn theo dòng (cột), còn m a trận thu được sẽ goi là ma
trận rút gọn, Hàm số sau đây cho phép rút gọn m ột m a trận A kích thước là
 
k
 
X
 
k
 
đồng
thời tính tổng các hằng số rút gọn (để tiện trình bày, các tham số có m ặt trong các hàm
và các thủ tục PASCAL dưới đây được giả thiết khai báo sao cho phù hợp):

function Reduce(A, k): real;

f***
 
Thủ tục rú t gọn m a trận
 
***)

begin
sum := 0 ;

for i := 1 to k do (* k - kích thước của A
 
*)
begin

r[i]:= <phần tử nhỏ nhất trong dòng i>;

if r[i] > 0 then

begin

<Bớt m ỗi phần tử của dòng i đi r[i]>;
sum := sum + r[i];
end;
end;

for j := i to k do
begin

s[j] := <phần tử nhỏ nhất trong cột j>;

if s[j] > 0 then

begin

<Bớt m ỗi phần tử của cột j đi s[j]>;
sum := sum + s[j];
end;
end;

Reduce := sum;
end;

T h í d ụ , T a có m a trận chi phí của bài toán người du lịch với
 
n =
 
6
 
thành phố sau

126

Chương 5. Bài ĩoún tối ưu (ổ hợp

s [ j

1
 
2
 
3
 
4
 
C
J
>
 
6
 
r [ i

1
 
00
 
3
 
93
 
13
 
33
 
9
 
3

2
 
4
 
00
 
77
 
42
 
21
 
16
 
4

3
 
45
 
17
 
00
 
36
 
16
 
28
 
16

4
 
39
 
90
 
80
 
co
 
56
 
7
 
7

5
 
28
 
46
 
88
 
33
 
00
 
25
 
25

6
 
3
 
88
 
18
 
46
 
92
 
co
 
3

]
 
0
 
ũ
 
15
 
8
 
Ũ
 
C

Đ ầu tiên trừ bớt mỗi phần tử của các dòng 1, 2, 3, 4, 5, 6 cho các hằng số n ít gọn
tương ứng là 3, 4,
 
16, 7, 25, 3, sau đó trong m a trận thu được, Irừ bớt các phần tử của
các cột 3 và 4 cho các hằng số rút gọn tương ứng là 15 và 8, ta thu được m a trận rút gọn
sau

1
 
2
 
3
 
4
 
5
 
6

1
 
00
 
0
 
75
 
2
 
30
 
6

2
 
0
 
00
 
58
 
30
 
17
 
12

3
 
29
 
1
 
00
 
12
 
0
 
12

4
 
32
 
83
 
58
 
co
 
49
 
0

5
 
3
 
21
 
48
 
0
 
00
 
0

6
 
0
 
85
 
0
 
35
 
89
 
00

Tổng các hàng số rút gọn là 81,
 
V I
 
vậy cận dưới cho
 
t ấ i
 
cả các hành trình là 81 (nghĩa là
không thể tìm được hành trình có tổng chi phí nhỏ hơn 81).

Bây giờ, ta xét cách phân tập các phương án ra thành hai tập. G iả sử là ta chọn cạnh
(6 , 3) để phân nhánh. Khi đó tập các hành trình sẽ được phân thành hai tập con, m ột tập
là các hành trình chứa cạnh (6 , 3), còn tập kia là các hành trình không chứa cạnh (6 , 3).
Vì biết cạnh (6 , 3) là không được tham gia vào hành trình, nên ta có thể cấm việc đi
theo cạnh này bằng cách đặt
 
= co.
 
Ma trận thu được sẽ có thể rút gọn bằng cách bớt
mỗi phần tử của cột 3 đi 48 và không bớt gì các phần tử của dòng 6 . N hư vậy ta thu
được cận dưới cho các hành trình khống chứa cạnh (6 , 3) lằ 81 + 48 = 129. Còn đối với
tập các hành trình chứa cạnh (6 , 3) ta phải loại dòng 6 và cột 3 khỏi m a trận tương ứng
với nó, bởi vì đã đi theo cạnh (6 , 3) thì không thể đi từ 6 sang bất cứ nơi nào khác và
cũng không được phép đi từ bất cứ đâu vào 3. Kết quả ta thu được m a trận với bậc giảm
đi
 
1. N goài ra, do đã đi theo cạnh (6, 3) nên không được phép đi từ 3 đến 6 nữa, vì vậy

ta
 
cần
 
c ấ m
 
đi
 
t h e o
 
c ạ n h
 
( 3 ,
 
6 ) bằng cách đạt
 
C
36
 
-
 
00
.
 
Cây tìm kiếm
 
c h o
 
đến bước
 
n à y ,

có dạng cho trong hình 1 sau đây;

127

Phần ỉ . Lv thuyết ĩổ hợp

tất cả các hành t r ì n ^
 
Cậii dưới =
 
81

Cận dưới

=
 
81

Hành trình
c h ứ a (6,3)

1
 
2
 
4
 
5
 
6

00
 
0
 
2
 
30
 
6

0
 
co 30
 
17
 
12

2 9
 
1 12
 
0
 
oc

52
 
83
 
00 49
 
0

3
 
2 1
 
0
 
00
 
0

H ành trình
 
Cận dưới
không chứa (6,3)
 
= 1 2 9

1
 
2
 
3
 
4
 
5
 
6

00
 
0 27
 
2
 
30
 
6

0
 
OO1 0
 
3 Ũ 1 7
 
12
2 9
 
1
 
oc
 
12
 
0 12

32
 
83 10
 
00
 
4 9
 
0

0
 
85

H in h 1.

co
 
35
 
89
 
00

C ạnh (6 , 3) được chọn để phân nhánh vì phân nhánh theo nó ta thu được cận dưới của
nhánh bên phải là lớn nhất so với việc phân nhánh theo các cạnh khác. Q uy tắc này sẽ
được sử dụng để phân nhánh ở m ỗi đỉnh của cây tìm kiếm . Trong quá trình tìưi kiếm
chúng ta luôn đi theo nhánh bên trái trước. N hánh bên trái sẽ có m a trận rút gọn với bậc
giảm đi một. Trong m a trận của nhánh bên phải ta thay m ột số bởi
 
00
, và có thể rút gọn
thêm được m a trận này khi tính lại các hằng số rút gọn theo dòng và cột tương ứng với
cạnh phân nhánh, nhưng kích thước của m a trận vẫn giữ nguyên.

Do cạnh cần chọn để phân nhánh phải là cạnh làm tăng cận dưới của nhánh bên
phải lên nhiều nhất, nẽn để tìm nó ta sẽ chọn số không nào trong m a trận m à khi thay
nó bởi co sẽ cho ta tổng hằng sô' rút gọn theo dòng và cột chứa nó là lớn nhất. Ta có thủ
tục sau đây để chọn cạnh phân nhánh (r,c);

b) Thủ tục chọn cạnh phân nhánh (r,c)

Đ ầu vào:
 
M a trận rút gọn A kích thước
 
k x k .

Đ ầu ra
 
:
 
Cạnh phân nhánh (r,
 
c)
 
và tổng hằng sô' rút gọn theo dòng
 
r

cột
 
c
 
là beta.

procedure B estEdge(A ,k,r,c,beta);

(*
 
T h ủ tụ c p h á n n h á n h
 
*)
begin
beta := -oo;
for i
 
1 to k do

128

C ỉì ư ơ ỉì ^ 5. B à i ĩ o ủ n
 
t o i ưn
 
(ỏ ỉìựỊ.

for j := 1 to k do
if a[i,j] = 0 then
begin

m inr := <phần tử nhỏ nhất trên dòng i khác với
m ine := <phần tử nhỏ nhất trên cột j khác với a
total := m inr + mine;
if total > beta then
begin
beta := total;

r := i; C
'* chỉ số dòng của cạnh tốt nhất *)
c ;= j; (* chỉ số cột của cạnh tốt nhất *)
end;
end;
end;

Trong m a trận rút gọn 5 x 5
 
của nhánh bên trái ở hình 1, sô' không ở vị trí (4, 6 ) sẽ cho
tổng hằng số rút gọn là 32 (theo dòng 4 là 32, cột 6 là 0). Đ ày là giá trị lớn nhất đối với
các số không của m a trận này. Vì vậy, việc phân nhánh tiếp theo sẽ dựa vào cạnh (4, 6 ).
Khi đó cận dưới của nhánh bên phải tương ứng với tập các hành trình đi qua cạnh (6,3)
nhưng không đi qua (4,6) sẽ là 81 + 32 = 113. Còn nhánh bên trái sẽ tương ứng với m a
trận 4
 
X
 
4, vì rằng ta phải loại bỏ dòng 4 và cột 6 . Tinh huống phân nhánh này được m ô
tả trong hình 2 .

các hành t r ì n h \
 
Cận dưới
cạnh (6 , 3)
 
= 8 1

Hành trình chứa
(6 , 3), (4, 6 )

^ Cận dưới
= 81

H ành trình chứa
Ịíhông chứa (4

Cận dưới
= 113

1
 
2
 
4

00
 
0
 
2

0
 
00
 
30

2 9
 
1
 
00

3
 
21
 
0

5

30

17

0

00

1
 
2
 
4
 
5
 
6

00
 
0
 
2
 
30
 
6

0
 
00
 
30
 
17
 
12

29
 
1
 
12
 
0
 
00

0
 
51
 
00
 
17
 
00

3
 
21
 
0
 
00
 
0

H ình 2.

129

Phần I . Lý thuyết tổ hợỊj

N hận thấy rằng vì cạnh (4, 6) và (6 , 3) đã nằm trong hành trình nên cạnh (3, 4) không
thể được đi qua nữa (nếu không ta sẽ có m ột hành trình con từ những thành phố này).
Đ ể ngăn ngừa việc tạo thành hành trình con ta sẽ gán cho phần tử ở vị trí (3, 4) giá trị 00.

N găn cấm tạo thành hành trinh con.

Tổng quát hơn, khi phân nhánh dựa vào cạnh (/,„ y,) ta phảithêm cạnh
 
này
 
vào
 
danh

sách các cạnh của nút trái. Nếu /„ là đỉnh cuối của m ột đường đi (/'|,
 
¡ 2
 
.....
 
và
 
là đỉnh

đầu của đường đi 0 , ■
j
’ 2
 
.....
 
Á) thì để ngăn ngừa khả năng tạo thành hành trình con ta phải

cấm cạnh
 
(Ji..
 
¿¡).

Để tìm /, ta có thể đi ngược từ
 
còn để
 
tìm ý/,ta có
 
thể đixuôi từ J.. theo
 
danh
 
sách

các cạnh đã được kết nạp vào hành trình.

Tập tất cả các
hành trình

Cận dưới

=
 
81

H ành trình
không chứa
(6 ,3 )
 
Cận dưới
= 129

Cận dưới

=
 
81

Cận dưới
= 81

Tập các hành
trình không chứa

(4, 6 )
 
Cận dưới
= 113

Tập các hành
-►
l trình không chứa

(2, 1)
 
^
 
Cận dưới

-
 
101

Tập các hành
-M trình không chứa

Cận dưới
= 84

(1 ,4 )
 
Cận dưới

=
 
112

Cận dưới = 84

Hành trình (1, 4, 6, 3, 5, 2 ,1 ).
 
Độ dài hành trình: 104,

Hình 3.

130

C h iử /ỉĩíỉ 5. Bcü tocin
 
tô'i ưu Ịổhợp

Tiếp tục, ta lại phân nhánh từ đỉnh bên trái bằng cách sử dụng cạnh (2,
 
1), vì sô'
không ở vị trí này có tổng các hàng số rút gọn là 17 + 3 = 20 (theo dòng 2 là 17,
 
theo
cột 1 là 3). Sau khi phân nhánh theo cạnh (2. 1
 
)
 
m a trận c ủ a
 
nhánh trái có kích thước là
3
 
X
 
3. Vì đã đi qua (2, I ) nên ta cấm cạnh ( 1, 2) bằng
 
c á c h
 
đặt
 
C|2
 
= 00, ta thu được ma
trận sau

2
 
4
 
5

1
 
^
X
I
 
2
 
33

3
 
1
 
00
 
0

5
 
21
 
0
 
00

M a trận này có thể rút gọn được bằng cách bớt 1 từ cột 2
 
và
 
bớt đi 2 ở dòng
 
1. Đ iều đó
dản đến m a trận

2
 
4
 
5

1
 
00
 
0
 
28

3
 
0
 
co
 
0

5
 
20
 
0
 
Û
0

T a có cận dưới của nhánh tương ứng là 81
 
+
 
1 + 2 = 84. Cây tìm kiếm cho đến
bước này được thể hiện trong hình 3.

Chú ý rằng sau khi đã chấp nhận /7-2 cạnh vào hành trình thì m a trận còn lại sẽ có
kích thước ià 2
 
X
 
2. Hai cạnh còn lại của hành trình sẽ không
 
p h ải
 
chọn lựa nữa, m à
được kết nạp ngay vào chu trình. Trong ví dụ của chúng ta ở đây, sau khi đã có các cạnh
(6 , 3), (4, 6 ), (2, 1) và (1, 4) ma trận của nhánh trái có dạng

2
 
5

3
 
00
 
0

5
 
0
 
co

vì vậy ta kết nạp nốt hai cạnh (3, 5) và (5, 2) vào và thu được hành trình 1, 4, 6 , 3, 5, 2,

1 với chi phí là 104.

131

Phần I . Lý thuyết tc) hợp

C h ú
 
ý. T rong quá trình tìm kiếm m ỗi m ột nút của cây tìm kiếm sẽ tưcíng ứng với một
m a trận chi phí A. ở bước đầu tiên m a trận chi phí tương ứng với gốc chính là m a trận

c .
 
K hi chuyển động từ gốc theo nhánh bên trái xuống phía dưới kích thước của các ma
trận chi phí A sẽ giảm dần. Cuối cùng khi m a trận A có kích thước 2x2 thì ta chấm dứt
việc phân nhánh và kết nạp 2 cạnh còn lại để thu được hành trihnh của người du lịch.
Dễ thấy rằng m a trận rút gọn cuối cùng này chỉ có thể có ĩnột Irong hai dạng sau:

w
 
X
 
w
 
X

u
 
0
 
00
 
r
 
u
 
00
 
0

V
 
00
 
0
 
V
 
0
 
X'<

trong đó
 
u,
 
V
,
 
vv,
 
X
 
có thể là 4 đỉnh khác nhau hoặc chỉ có 3 đỉnh khác nhau. Trong mọi
trường hợp để xác định xem hai cạnh nào cân phải kết nạp nốt ta chỉ cần xét m ột phần
tử của m a trận A;

if A [ l ,l Ị] = 00 then

K ết nạp cạnh (u,x) và (v,w)

else

K ết nạp cạnh (u,w) và (v,x);

Bây giờ tất cả các nút của cây có cận dưới lớn hơn
 
104 có thể loại bỏ vì chúng không
chứa hành trình rẻ hơn. Trên hình 3 ta thấy chỉ còn nút có cận dưới 101 là cần phải xét
tiếp. N út này tương ứng với tập những hành trình chứa các cạnh (6 , 3), (4, 6 ) và không
chứa cạnh (2, 1). M a trận chi phí tương ứng với đỉnh này có dạng

1
 
2
 
4
 
5

00
 
0
 
2
 
30

00
 
00
 
13
 
0

2 6
 
1
 
00
 
0

0
 
21
 
0
 
00

V iệc phân nhánh sẽ dựa vào cạnh (5, 1) với tổng hằng số rút gọn là 26. V iệc rẽ nhánh
tiếp theo từ nút này được cho trong hình 4.

132

CliươiiỊ’
 
5.
 
Bài loan tói ưu tổ hợp

Tập các hành trình chứa
(6, 3), (4, 6)
 
không qua
 
(2,1)

(
Tập các hành chứa
trình chứa (5,1)

Cận dưới

=
 
101

'
 
Cận dưới
= 127

Tập các hành trìn n X
không chứa (5,1)
 
]

^
 
__
 
_ _ _ . , ^ C ậ n
 
dưói

=: 103

2
 
4
 
5

1
 
0
 
0
 
C
D

3
 
00
 
11
 
0

5
 
1
 
00
 
0

(
H ành trình chứà
(1,4)

H à n h trin h l , 4,
 
6
 
, 3, 2, 5 ,1

Đ ô d à i : 104

Hành trình khôni

chứa (1,4)
 
y
 
Cận dưới
 
= 1 1 4

Hình 4.

Như vậy chúng ta thu được hai hành trình tới ưu với chi phí là 104. T hí dụ trên cho thấy
rằng bài toán người du lịch có ihê có nhiéu phưcíng an tôi ưu. Trong thí dụ này hành
trình đầu tiên tìm được đã là tối ưu, tất nhiên điều đó khôiig thể trông đợi trong trường
hợp tổng quát. Đối với thí dụ trên ta chỉ phải xét
 
13 nút, trong khi tổng số hành trình
của người du lịch là 120.

c) T huật toán nhánh cận giải bài toán người du lịch.

Bây giờ ta có
 
thể m ô tả các bước chính của thuật toán nhánh
 
cận giải bài
 
toán
 
người du

lịch trong thủ
 
tục đệ quy TSP sau đây. Thủ tục TSP xéthành
 
trình bộ
 
phận với
 
Edges

cạnh đã được chọn và tiến hành tìm kiếm tiếp theo. Ta sử dụng các biến;

Edges
 
-
 
số cạnh trong hành trình bộ phận;

A
 
- ma trận chi phí tương ứne với kích thước

(n-edges)
 
X
 
(n-edges);
cost
 
- chi phí của hành trình bộ phận;

M inC ost - chi phí của hành trình tốt nhất đã tìm được.

133

Phần J . Lý thuyết tổ hợp

Trong thủ tục sử dụng hàm R ed u ce(A , k) và thủ tục B estE dge(A , k, r, c, beta) đã m ô tả
ở trên.

procedure T S P (edges, cost, A);
begin

cost:= cost + R educe(A , n-edges);
if cost < M inCost then
if edges = n-2 ihen
begin

<BỔ sung nốt hai cạnh còn lại>;

M inCost := Cost:

<Ghi nhận hành trình tốt nhấĩ>;

end

else

begin

B estEdge(A ,n-edges,r,c,beta);

Low erBound:= cost + beta;

<N găn cấm tạo thành hành trình con>;

NewA ;= <A loại bỏ dòng r cột c>

T S P(edges+l,cost,N ew A );
 
(* đi theo nhánh trái *)

<Khôi phục A bằng cách bổ sung lại dòng r cột k>;
if LowerBound < M inCost then

begin
 
(* đi theo nhánh phải *)

A[r,c]:=oo;

TSP(edges, cost, A);

A [ r,c ]:i;

end;

end;

<K hôi phục m a trận A > ;
 
(*
 
thêm lại các hằng số rút gọn

vào các dòng và cột tưcfng ứng *)

end; (* o fT S P * )

134

Clìươníi 5. Bài ĩodiỉ tôi ỈÍU tủ ỉìỢp

5.4
 
Bài toán lập lịch gia công trên hai máy.

Thuật toán Jonhson
■

Trong mục này ta sẽ thấy việc nghiên cứu kỹ các tính chất của bài toán tối ưu tổ hợp
dẫn đến việc xây dựng được thuật toán rất hiệu quả để giải nó.

X ét bài toán lập lịch gia công trên 2 máy, là trường hợp riêng của bài toán lập lịch
n^u trong rrụ c 5.1: M ỗi một chi tiết trong số
 
n
 
chi nết D|
 
Di,...
 
D„
 
cần phải được lần
lượi gia cồng trên 2 máy
 
A, B.
 
Tliời gian gia công clỉi tiết
 
D
 
trên m áv
 
A
 
là ứ„ trên tnáy

B
 
là
 
hị (i -
 
1, 2,..., /ỉ). Hãy tìm lịch (trình tự gia công) các chi tiết trên hai m áy sao cho
việc hoàn thành gia công tất cả các chi tiết là sớm nhất có thể được.

G iả thiết rằng, trình tự gia công các chi tiết trên hai máy là như nhau. Khi đó mỗi
lịch gia công sẽ tương ứng với một hoán vị

n =
 
(Tt(l),
 
n(n))

của
 
n số
 
tự nhiên
 
1, 2 ,...,
 
n.

Ký hiệu
 
íịx
 
là thời điểm bát đầu và kết thúc việc gia cóng chi tiết
 
j
 
trên m áy
 
X,

ý =
 
1, 2,..., /ỉ; X = a , B. Giả sử T
t là một lịch gia công. Theo điều kiện của bài toán, m áy
A có thể bất đầu thực hiện công việc n( l ) vào thời điểm
 
S;!ịn
 
= 0 và công việc
 
M^k)
 
sau
khi thực hiện xong công việc ;?(Ẩ;-1), tức là

■^'t( k) A
 
—
 
^ / ĩ ( k - l ) A ’
 
fc — 2 ,
 
3 , . . . , l ĩ .
 
( 1 )

M áy
 
B
 
có thể
 
bắt đầu thực hiện
 
công việc
 
7
 
ĩ{
 
1) ngay
 
sau khi m áy
 
A
 
kết thúc việc
 
gia

công nó tức là
 
vào thời điểm

•''>
1
(1)B -
 
■
(2)

M áy B có thể
 
bắt đầu việc gia cớng chi tiết
 
n(k) {k
 
= 2, 3,...,
 
n)
 
sau khi công việc
 
này

được thực hiện xong trên máy A và đồng thời nó
 
phải hoàn thành việc gia công chi tiết

7ĩ(Ẩ:-l), tức là:

k = 2, 3,..., lĩ.
 
(3)

Thời gian để hoàn thành việc gia công tất cả các chi tiết trên hai m áy là
 
T{n) -

R õ ràng, với
 
n cô'
 
định,
 
T(n)
 
đạt giá trị nhỏ nhất khi tất cả các dấu bất đẳng thức ở
(1), (2), (3) được thay bởi dấu đẳng thức, tức là

~
 
t ^ “
 
2,
 
3, .. .,
 
fĩ,

=
 
max
 
(ỈRỊiyị
,
 
= 2,
 
n.

(4)

135

Phấn J . Lý thuyết tổ hợp

nghĩa là các m áy sẽ thực hiện ngay các công việc m ột khi điều kiện cho phép.

T h í d ụ 1. Xét bài toán khi /ỉ = 5. Thời gian gia công các chi tiết trên các m áy được cho
trong bảng sau:

Giả sử thực hiện việc 5Ìa công các chi tiết theo lịch
 
7
Ĩ = (1, 2, 3, 4, 5).
 
Khi đó, theo các
c ô n í thức (4) ta tính được

0 ;
 
--
 
3;

^24 =
 
3;
 
^2. =
 
7;

^ÌA -
 
7;
 
í
3 .=
 
13;

■
^
4
/1 “
 
13;
 
^4^=18;

18;
 
Í.M
 
= 24;

■
^
1
« -
 
3;
 
ỉifí=
 
6 ;

7;
 
Í2/Ỉ = 10;

^ỈJi -
 
13;

18;
 
^4/ỉ “ 25;

SsH =
 
25;
 
rw = 28.

Để biểu diẻn lịch gia công người ta thường sử dụng sơ đồ G antt, trong đó các m áy được
biểu thị theo trục tung, còn trục hoành để biểu diễn thời gian. Sơ đồ G antt, theo lịch gia
công thu được trong thí dụ đã cho, có dạng trong hình
 
1;

M áy

D 1 ■
 
D 2
 
D 4
 
D 5

D 3
 
D 4
 
D 5

t

J _
 
J
 
„
 
J
 
- í . .
 
J
 
1 _ J
 
1 . . . I
 
1
 
1
 
ỉ
 
1
 
1
 
1
 
1
 
1

H ìn h 1.

136

Chương 5. Bãi toán tối ưu tổhỢỊ)

Thời gian hoàn thành việc gia công tất cả các chi tiết theo lịch thu được là
 
T{n)
 
=
 
=

28. Từ hình 5 nhận thấy rằng trong cách bô' trí máv
 
B
 
thực hiện việc gia công các chi
tiết theo lịch gia công 7
1 có nhiều khoảng thời gian máy chết (trên hình vẽ đánh dấu
bằng cách tô m ầu sẫm). Rõ ràng ta luôn có thể bô' trí lại việc gia công của m áy
 
B
 
sao
cho không có các khoảng thời gian chết này bằng cách dồn chúng vào đoạn đầu để sau
đó m áy
 
B
 
hoạt động liên tục và việc này không làm tăng thời gian hoàn thành việc gia
công (giá trị
 
Chẳng hạn, để thoát khỏi các khoảng thời gian chết của m áy
 
B
 
trong
thí dụ, ta có thể bắu đầu gia cong Irên máy
 
B
 
vào
 
điểm
 
dg =
 
IC (lức là bằng td’ng các
khoáng thời gian chết trong hình 3, cộng với /n I)/). Sc? đồ Gantt của cách b ố trí này cho
trong hình 2 :

M áy

B
 
D I
 
D 2
 
D 3
 
D 4
 
D 5

A
 
D I
 
D 2
 
D 3
 
D 4
 
D 5

t

1 1
 
1 1 1
 
1
, i_
 
j
 
1 1
 
.„1
 
1 1
 
1
 
1 1 1 1 1
 
1
L.J
 
1
 
1 1

H ìn h 2.

Vì vậy luôn có thể giả thiết rằng, hai máy sẽ thực hiện việc gia công m ột cách liên tục.
M áy
 
A
 
bất đầu thực hiên việc gia công vào thời điểm
 
=
 
0. Gọi
 
dg
 
là thời điểm m áy
 
B

bắt đầu thực hiện việc gia công các chi tiết. Rõ ràng ta có

T{n)
 
=
 
d , { n ) + ỉ h j ,

j= \

trong đó số hạng thứ hai là không phụ thuộc vào
 
lịch gia công
 
K.
 
T a cần tìm công
 
thức

tính
 
dain).
 
D ễ thấy là
 
dgin)
 
là bằng tổng của
 
và các khoảng thời
 
gian chết của
 
m áy

kh; ta b ố trí m áy
 
B
 
thực hiện việc gia công các chi tiết theo công thức (4). Vì thế, ta

có công thức sau đây, để tính
 
clnin):

trong đó

d ,in )
 
=
 
m ax
 
A„(
ti
)

! < « < «

A„(tc)
 
=
 
z

j=ỉ

z
 
bnự),

;=1

u =
 
2
 
, n
 
.

137

Phẩn ỉ. Lý thuyết tổlĩỢp

Trong thí dụ 1, ta có

A,(
tĩ
) = 3;

A
2
 
Ìn)
 
= 3 + 4 - 3 = 4;

A3(7ĩ) = (3 +
 
4 + 6 ) - (3
 
+ 3) = 7;

à Ậ n )
 
= (3 +
 
4 + 6 + 5)
 
- (3 + 3+
 
2) = 10;

Aj(tĩ) = ( 3 + 4 + 6 + 5 + 6) - ( 3 +
 
3 +
 
2 + 7 ) = 9;

V ậy
 
dgin) =
 
10.

Như vậy bài toán đặt ra dẫn về bài toán tối ưu tổ hợp sau
m in
 
(
 
d
 
g
 
( n
 
) :
 
K
 
e
 
p
 
ị .

trong đó
 
p
 
là tập các hoán vị của 1, 2 ,
 
n.

Bổ đề 1.
 
G iả sử
 
n =
 
7
 
c
 
(
 
ả
 
: - 1 ) ,
 
Tĩ(k),
 
n{n))
 
là m ộl lịch gia công còn
 
7t’

là lịch gia công thu dược từ
 
n
 
bằng cách hoán vị hai phần tử n {k )
 
và
 
7i(Ấ:+l):

k' =
 
( T t ( l ) , .. ., 7t(Ấ:-l), 7 ĩ ( / : + l ) ,
 
n(k),..., n(n)).

K hi đó nếu

m i n
 
(ứn(it), ^It(*+
1
))
 
^
 
r n in
 
(Í>n(í),
 
( 5 )

t h ì

d,{%) < dsin').
 
( 6 )

C h ứ n g m in h .
 
D o
 
n, n'
 
chỉ khác nhau ở vị trí thứ
 
Ẩ
: và Ẩ:+I nên ta có
A„(7
i) = A„(7
r')
 
với
 
u = ì,..., k -ì,k + 2 ,..., n.

Từ đó để chứng m inh (6 ) ta chỉ cần chứng tỏ

m ax (Aì(7
ĩ),
 
<
 
m ax (A^(7
i:'), A*^,(tĩ’))
 
(7)

Thật vậy, bất đẳng thức (7) tưcmg đương với

m ax
 
(Á t(n)
 
- ô,
 
A
m
 
Ì
ti
) -
 
6 )
 
<
 
m ax (A^(7
t') - 5,
 
- 5)
 
(8)

với m ọi giá trị ô. Chọn

k+
ì
 
k-ỉ

J = ì
 
J = ì

và để ý rằng

k
 
k - l

^n(j) -
 
X
 
t>n(j)
,

ỳ=i
 
j= ỉ

ta nhận được (8 ) dưới dạng

138

max
 
- ^ J ,)
 
<
 
max
 
-hn^M,)

o
 
-min
 
<
 
-min

<=> min(a„,^.),
 
<
 
min

nghĩa là (7) tương đương với (5). Bổ đé được chứng minh.

Bổ
 
đề 2,
 
N ếu i,j, k là ha chỉ s ố thoả mãn

min
 
(a¡, b ) <
 
mi 1
 
[Uị, hị)
 
(9)

min
 
(üj, bị) <
 
min
 
(a^, bị)
 
( 10)

tronq đó có ít nhất m ột trong hai bất đẳnq thức trên là hất đẳng thức chặt, thì

min (ứ„
 
b^) <
 
min (ứ^, ò,)
 
( 11)

C h ứ n g m in h . Giả sử trong (9) ta có
 
a, < hj
 
và
 
< bị,
 
còn trong ( 10) ta có
 
Û
J < bị,
 
và
 
ũị. <

bj.
 
Khi đó từ (9) suy ra
 
Oị <

Ü J,
 
còn từ ( 10) suy ra
 
Oj < ũị..
 
Tức là ta có a, <
 
bị,a, < bị.
 
và
 
a,

< a¡.,
 
từ đó suy ra có ( 11).

Chứng m inh tương tự cho 15 trường hợp còn lại, ta thu được bổ đề.

Đ ịn h lý J o h n so n (1954).
 
T {
æ
)
 
đạt giá trị nhỏ nhất khi lịch gia công n -
 
(M l), ^ 2 ),...,
;t(aì))
 
thoả mãn

min
 
< min
 
(
3;^*^.,))
 
( 12)

với m ọi
 
Ấ
: = 1, 2 ,...,
 
n -\.

C h ứ n g m in h . Thực vậy giả sử

T
r’ = (7r’(I), 7i'(2),...,
 
n \n ))

là lịch gia công tối ưu. N ếu
 
n'
 
không thoả m ãn (12), thì theo bổ đề 1, khi thay đổi vị tri
của hai phần tử liền nhau tương ứng trong nó, ta thu được lịch gia công m ới n với
 
dẶTÌ)

không lớn hơn í/a(n'). Q uá trình này được lặp lại đối với
 
n
 
cho đến khi thu được lịch
thoả m ãn (12). Bổ đế 2 đảm bảo được rằng việc lặp như thế là kết thúc. Đ ịnh lý được
chứng minh.

Đ ịnh lý vừa chứng m inh chỉ cho chúng ta cơ sở xây dựng thuật toán giải bài toán
đặt ra. G iả sử

X =
 
min
 
(a,, ố ,) .

! < / < / ;

Xét hai trường hợp:

1)
 
N ếu
 
X
 
=
 
O
f.
 
với m ột
 
k
 
nào đó thì ta có min
 
(ữị., hj) <
 
min
 
(bị,, a¡)
 
với mọi
 
j
 
?^k.
 
Vì
thế chi tiết D* phải được gia công đầu tiên trong lịch tối ưu.

Chươnọ^ 5. B ill íoán tối Uli ĩổ h ợ p

i39

Phần I . Lý thuyết tổ hợp

2) N ếu
 
X
 
=
 
bp
 
với m ột
 
p
 
nào
 
đ ó
 
thì ta có m in
 
{ũ p ,
 
b ị )
 
>
 
m in
 
(/?,,, í/,)
 
\’ới mọi
/
 
p .
 
Vì

th ế chi tiết
 
Dp
 
phải được gia công cuối cùng trong lịch tối U
X
I.

Từ đó nhận được thuật toán sau đây

T huật toán JO H N SO N

1.
 
Chia các chi tiết thành 2 nhóm : nhóm
 
Nị
 
gồm các chi tiết
 
D ị
 
thoả mãn a, <
 
b,,

tức là min (ữ„
 
b:)
 
đạt được tại ứ„ và nhóm
 
N
 
2
 
gồm các chi
 
tiết
 
D,thoả
 
m ãn <
3
, >

ố,, tức là min
 
(a,, bị)
 
đạt được tại
 
b,.
 
Các chi tiết
 
Dị
 
íhoả m ãn
 
ơị =h,
 
xếp vào

nhóm nào cũng được.

2.
 
Sắp xếp các chi tiết trong
 
N ị
 
theo chiều tăng của các ơ, và sắp xếp các chi tiết
trong /Vị theo chiều giảm của các
 
b,.

3.
 
Nối
 
N
 
2
 
vào đuôi
 
N ị.
 
Dãy thu được (đọc từ trái sang phải) sẽ là lịch gia công tối
ưu.

Q uay trở lại giải bài toán trong th í d ụ l theo thuật toán Johnson: Các kết quả được tính
trong từng bước như sau:

1. Chia nhóm:
 
N , =
 
{D„ D 4};
 
N , = {D„ D „
 
D ,Ị

2. Sắp xếp
 
theo chiều tăng của các ứ, và sắp xếp
 
N
 
2
 
theo chiều
 
giảm của các
 
bị'.

yv, = (D „ D ,);
 
n
 
[ = (D„ D „
 
D 3)

3. N ối
 
N
 
2
 
vào đuôi của
 
N ị,
 
ta được lịch gia công tối ưu:

7
1 = (D „ D 4, O 2, Đ 5,
 
D^).

Sơ đồ G antt của lịch này được cho bởi hình 3 với thời gian hoàn thành việc gia công là

T{n)
 
= 26:

M áy

D I

D I

I
D 4

1
 
D 4
 
D 2

D 2
1 1 1

D 5
1 1 1 1 1

D 3

.................
 
1
 
1
 
I
 
1
 
I

Hình 3.

R õ ràng có nhiều lịch tối ưu, chúng có thể khác nhau về thời điểm bắt đầu của m áy
 
B

nhưng đểu chung nhau m ột thời điểm kết thúc. Chẳng hạn m ột lịch tối ưu khác của thí
dụ trên là 7
ĩ’ = (£>4, Z)|, O 5, 0 2 , D 3) với sơ đồ G antt cho bởi hình 4:

140

Chương 5. Bài toán tối ưu tổ hỢ])

M áy

B
 
D 4
 
D I
 
D 5
 
D 2
 
m m ầ

D 4
1 1 1 1

D 1
1 1
.

D 5
1 1 1 1 1

D 2
1 1 1

D 3
1 1 1 1 1
 
I
 
I
 
J- 1
 
L

H ình 4,

C h ú ý.

1) Có thể chứng m inh được rằng việc tìm
 
lịch gia công dưới dạng m ỗi m áy một
trình tự gia công riêng không dẫn tới việc hoàn thành gia công các chi tiết sớm hcm. Vì
vậy, thuật toán Johnson vẫn cho kết quả đúng của bài toán m à không cần có giả thiết
rằng trình tự gia công trên hai máy phải như nhau.

2) Kỹ thuật chứng m inh định lý Johnson dựa trên bổ đề 1 là m ột kỹ thuật cơ bản
trong lý thuyết iập lịch, nó được biết dưới tên gọi;
 
Thủ thuật hoán vị.

3) K hông thể thu được định lý tương tự như định lý Johnson cho trường hợp bài
toán 3 m áy hoặc nhiều hơn. Trong trường hợp tổng quát, hiện nay chưa có phương pháp
hữu hiệu nào để giải chúng ngoài việc sử dụng phương pháp nhánh cận.

M ộ t số trư ờ n g hợ p riê n g có th ế d ẫn về bài to á n 2 m áy.

X ét bài toán gia công
 
n
 
chi tiết trên 3 máy theo thứ tự
 
A, B,
 
c
 
với bảng thời gian
 
a-, bị,

c„ / = 1, 2 ,...,
 
n,
 
thoả mãn:

maxố,.
 
< mina,,
 
hoặc
 
m a x 6, < mine,.

'
 
i
 
■
 
'
 
/

tức là thời gian gia công của máy
 
B
khá nhỏ so với
 
A
 
hoặc
 
c.

Khi đó, lịch gia công tối ưu trên 3 máy sẽ trùng vói lịch gia công tối ưu trên 2 máy:
m áy thứ nhất với thời gian
 
a¡ + bị
 
và máy thứ hai với thời gian
 
b¡
 
+ c, (để ý rằng chỉ có
lịch tối ưu của chúng là trùng nhau còn thời gian gia công của chúng là khác nhau).

T h í d ụ 2. Thcfi gian gia công 5 chi tiết trên các máy
 
A, B,
 
c
 
cho bởi bảng sau:

tiết

M
 
á
 
y
 
\
 
^
 
D,
 
D,
 
Ds

/l
 
1
 
11
 
8
 
7
 
6

B
 
6
 
5
 
3
 
5
 
3

c
 
4
 
12
 
7
 
8
 
3

141

Phần 1. Lý thuyết tổ hợp

Thử lại
 
max
 
b, =
 
6
 
<
 
m in
 
Oị -
 
6 , do đó bài toán được dẫn về việc tìm lịch gia công tối
ưu trên 2 m áy
 
A', B':

Lịch gia công tối ưu tìm được là 7
1 =
 
(Dị, D
 
2
 
, D ị,
 
Ỡ 3, D 5) với thời gian hoàn thành
 
T(tì)

49 và sơ đồ G antt cho bởi hình 5:

H ìn h 5.

142

Chươní> 5. Bcii ĩoáìì toi ưu tổ Ìỉ(/Ị)

Bài tập

1.
 
Áp dụng thuật toán nhánh cận giải bài toán người du lịch với m a trận chi phí sau

a)

A
 
B
 
C
 
D
 
E

A
 
0
 
8
 
5
 
22
 
11

B
 
4
 
0
 
Q
 
1 1
 
27

C
 
'1
 
^
 
1
1
 
C
 
12
 
35

D
 
5
 
27
 
17
 
0
 
29

E
 
23
 
21
 
19
 
7
 
0

b)

c)

A
 
B
 
C
 
D
 
E

A
 
0
 
5
 
37
 
21
 
29

B
 
42
 
0
 
31
 
7
 
33

C
 
31
 
27
 
0
 
31
 
8

D
 
49
 
33
 
14
 
0
 
39

E
 
5
 
41
 
32
 
38
 
0

A
 
B
 
C
 
D
 
E

A
 
0
 
8
 
5
 
22
 
11

B
 
4
 
0
 
9
 
17
 
27

C
 
15
 
7
 
0
 
12
 
35

D
 
5
 
27
 
17
 
0
 
29

E
 
23
 
21
 
1 ^
 
7
 
n

Thành
 
phố xuất phát là A. Q uá trình giải theo thuật toántrình bày trên cây lời giải.

2. Giải
 
các bài toán cái túi sau đây bằng thuật toán
 
nhánh
 
cận

a)

17 X, +
 
8 ^2 + 6 X3 + 3 X4 -> max
7 X, +
 
6 X2 + 4 X
-, + 2 X4 < 19
Xy>0, nguyên,ý = 1,2, 3 ,4 .

b)

c)

16 X| +
 
9 X
2
 
+ I
 
X, + 5 .V
4 -> max

6 X| +
 
5 A
'2 + 3 X3
 
+ 2x^ <
 
17

X j >
 
0
 
,
 
nguyên, ý = 1.2, 3,4.

16 .r, +
 
8
 
+ 6 X, +
 
X ,
 
max

143

Phần I . Lý thuyết tổ hợp

7
 
X |
 
+
 
6 ^2 + 4 .Y
3 +
 
X4 < 26

X j > 0 ,
 
nguyên, ý = 1, 2, 3 ,4 .

Q uá trình thực hiện thuật toán mô tả trên cây tìm kiếm lời giải.

3. M ô tả thuật toán quay lui để giải bài toán sau;

O io
 
n
 
số nguyên dương a ,, ớ ; , ứ , - .
 
Tim các số
 
Sị e
 
|-1 , 1}, ỉ' = 1, 2
 
,
 
n
 
sao cho

! Ẻ - A

/=
1

là nhỏ nhất.

4. Bất đẳng thức sau đây có tên là bất đẳng thức hoán vị được sử dụng trong việc phái
triển thuật toán giải nhiều bài toán lập lịch: Cho hai dãy số thực ữ |, ¿Ỉ2,
 
và òj, ^ 2’
trong đó ¿1 > ¿2 ^
 
^
 
bn-
 
G iả sử ( ơ ( l) , ơ(2),
 
ơ(^2)) và (y(1), y(2),
 
y{n))
 
là

các hoán vị của các số 1, 2 ,
 
^ thoả m ãn

^v(l) "
 
^v{2) -
 
*
*
• -
 
^ơ(l) - ^ơ(2) - —-
 
^ơ(n)
 
•

Khi đó bất đẳng thức

n
 
n
 
n

/=1
 
i=l
 
/=l

được thực hiện với mọi hoán vị (7t(l), 7t(2)
 
......
 
n{n))
 
của các số 1, 2
 
,
 
n.

N hư là ví dụ ứng dụng, xét bài toán lập lịch sau đây; Có
 
n
 
khách hàng đến thuê
thực hiện chưcmg trình trên m áy tính song song tại trung tâm m áy tính hiệu năng cao.
Biết rằng thời gian cần thiết để chạy xong chương trình của khách hàng
 
i
 
là
 
ti, i = 1, 2,

n.
 
G iả Ihiết là thời gian để m áy chuyển từ việc thực hiện chương trình này sang thực
hiện chưotng trình khác là bằng 0 , hãy tìm trình tự thực hiện các chương trình sao cho
tổng thời gian chờ đợi của tất cả
 
n
 
khách hàng là nhỏ nhất.

Sử dụng bất đẳng thức hoán vị để chỉ ra rằng trình tự cần tìm là trình tự không giảm
của
 
thời gian thực hiện các chương trình.

144

PHẦN II

LÝ THUYẾT ĐỔ THỊ
■

Chươỉìí’ I . Các khái ỉìiệtn cơỉxl/ì của
 
/ý
 
ĩlìKvứỉ dồ ílĩị

1

CÁC KHÁI NIỆM Cơ BẢN

CỦA LÝ THUYẾT Đ ồ THI

Lý thuyết đồ thị là một lĩnh vực nghiên cứu đã có lừ lâu và có nhiều ứng dụng hiện
đại. N hững tư tưởng cơ bản của lý thuyết đồ thị được đề xuất vào những năm đầu của
th ế kỷ
 
18 bởi nhà toán học lồi lạc người Thuỵ sỹ Leonhard
 
Euler. Chính ông là người
đã sử dụng đồ thị để giải bài toán nổi tiếng về các cái cầu
 
ở
 
thành phố K önigsberg.

Đồ thị được sử dụng đê giải các bài loán trong nhiều lĩnh vực khác nhau. Chẳng
hạn, đồ thị có thể sử dụng để xác định các mạch vòng trong vấn đề giải tích m ạch điện.
Chúng ta có thể phân biệt các htíp chất hoá học hữu cơ khác nhau với cùng công thức
phân tử nhưng khác nhau vể cấu trúc phân tử nhờ đồ thị. Chúng ta có thể xác định xem
hai máy tính trong m ạng có thể trao đổi thông tin được với nhau
 
hay không nhờ m ô
hình đồ thị của m ạng máy lính. Đồ Ihị có trọng sô' trên các cạnh có thể sử dụng để giải
các
 
bài toán
 
như: Tim
 
đường di
 
ngắn nhất giữa liai thành phố trong m ột m ạng
 
giao
thông. Chúng ta cũng còn sử dụng đổ thị để giải các bài toán về lập lịch, thời khoá biểu,
và phân bố tần số cho các trạm phát thanh và truyền hình...

1.1. Định nghĩa đồ thị

ĐỔ thị là m ột
 
Cấu
 
trúc rời rạc bao gồm các đỉnh và các cạnh nối các đỉnh này. Chúng ta
phân biệt các loại đổ thị khác nhau bởi
 
kiểu
 
và
 
s ố
 
lượng
 
cạnh nối hai đỉnh nào đó của
đổ thị. Để có thể hình dung được tại sao lại cần đến các loại đồ thị khác nhau, chúng ta
sẽ nêu ví dụ sử dụng ch^ịng để mô tả một mạng máy tính. G iả sử ta có m ột m ạng gồm

147

Phẩn 2. Lý thuyết đồ thị

các m áy tính và các kênh điện thoại (gọi tắt là kênh thoại) nối các m áy tính này. Chúng
ta có thể biểu diễn các vị trí đặt m áy tính bởi các điểm và các kênh thoại nối chúng bởi
các đoạn nối, xem hình 1.

Hà tây
 
Đ ồng nai
 
H uế
 
A n Giang

H ìn h 1. Sơ đồ m ạng m áy tính

N hận thấy rằng trong m ạng ở hình 1, giữa hai m áy bất kỳ chỉ có nhiều nhất là m ột kênh
thoại nối chúng, kênh thoại này cho phép liên lạc cả hai chiều và không có m áy tính
nào lại được nối với chính nó. Sơ đồ m ạng m áy tính cho trong hình 1 được gọi là
 
đơn đồ

thị vô hướng.
 
T a đi đến định nghĩa sau

Đ ịn h n g h ĩa 1.
 
Đ ơn đồ thị vô hướng G = (V,E) hao gồm V
 
là
 
tập các đỉnh, và E là
 
tập

các cặp không có th ứ tự gồm hai phẩn tử khác nhau của V gọi là các cạnh.

Trong trường hợp giữa hai m áy tính nào đó thường xuyên phải truyền tải nhiều thông
tin người ta phải nối hai m áy này bởi nhiều kênh thoại. M ạng với đa kênh thoại giữa các
m áy được cho trong hình 2 .

Hà tây
 
Đ ổng nai
 
H uế
 
An Giang

H ìn h 2. Sơ đồ m ạng m áy tính với đa kênh thoại

Đ ịn h n g h ĩa 2.
 
Đ a đ ổ thị vô hướng G
 
=
 
[V,E) bao gồm V
 
là
 
tập các đỉnh, và E là
 
họ
 
các

cặp không có th ứ tự gồm hai ph ẩ n tử khác nhau của V gọi là các cạnh. H a i cạnh
 
Ể| và
Ê2
 
được gọi là cạnh lặp nếu chúng cùng tương ứng với m ột cặp đỉnh.

148
 
>

Chương Ị. Các khái niệm cơ hản của
 
/v
 
ỉhuyết dồ thị

Hà uìy
 
Đ ổng nai
 
Huế
 
An Giang

Khánh hoà

ơ
 
____________
 
_

^
 
,
 
_____
 
L o n g
 
a n

Q u ả n g ngãi
 
-p

H ìn h 3. Sơ đồ m ạng m áy tính với
 
kênh thông báo

Rõ ràng mỗi đofỉì đồ thị đều là đa đồ thị, nhung không phải đa đồ thị nào cũng là
đơn đồ thị, vì trong đa đồ thị có thể có hai (hoặc nhiều hơn) cạnh nối m ột cặp đỉnh nào
đó.

Trong m ạng m áy tính có thể có những kênh thoại nối một máy nào đó với chính nó
(chẳng hạn với m ục đích thông báo). M ạng như vậy được cho trong hỉnh 3. K hi đó đa
đổ thị không thể m ô tả được mạng như vậy, bởi vì có những
 
khuyên
 
(cạnh nối m ột đỉnh
với chính nó). Trong trường hợp này chúng ta cần sử dụng đến khái niệm
 
giả đ ồ thị vô

hướng,
 
được định nghĩa như sau

Đ ịnh n g h ĩa 3.
 
G iả đ ồ ĩhị vỗ hưímg
 
G
 
=
 
iy ,E ) bao gổm V là tập các đỉnh, và E là họ

các cặp không có th ứ tự gôm hai phân tử {không nhất íhiết phải khác nhau) của V gọi là

các cạnh. C ạnh e dược gọi lc) khuyên nếu nâ có dạng e=(u,u)>

C ác kênh thoại trong mạng máy tính có thể chỉ cho phép truyền tin theo m ột chiều.
Chẳng hạn, trong hình 4 máy chủ ở Hà nội chỉ có thể nhẠn tin từ các m áy ở địa phưcmg,
có m ột số m áy chỉ có thể gửi tin đi, còn các kênh thoại cho phép Iruyén tin theo cả hai
chiểu được thay th ế bởi hai cạnh có hướng ngược chiều nhau.

Hà tây

Quảng ngãi

An giang

Khánh hoà

Đồng tháp
 
^
 
Long an

H ình 4. M ạng m áy với
 
các kênh thoại m ột chiều

149

Phần 2. Lý thuyết đồ thị

Ta đi đến định nghĩa sau.

Đ ịnh n g h ĩa 4. Đơn đó'
 
thị có hướng G
 
= (V,
 
E ) bao gồm V
 
là
 
lập các đỉnh, và E là tập

các cặp có thứ tự gồm hai phần tử khác nlìơu của V gọi là các cung.

Nếu trong m ạng có thể có đa kênh thoại m ột chiều, ta sẽ phải sử dụng đến khái
niệm
 
da đồ thị có hướng:

Đ ịnh n g h ĩa 5. Đ a đó'
 
thị có lìUỨnẹ G = (V, E) bao ^ồm V
 
là
 
tập các đỉnh, và E là họ các

cặp có thứ tự gồm hai phần tử khác nhau của V gọi là các cưng. H ai cung ẽị,
 
tương

ứìĩíị với cùng m ột cặp đỉnh được gọi là cung ỉặp.

Trong các phần tiếp theo chủ yếu chúng ta sẽ làm việc với đơn đồ thị vô hướiig và
đơn đồ thị có hướng. Vì vậy, để cho ngắn gọn, ta sẽ bỏ qua tính từ đ o n khi nhắc đến
chúng.

1.2. Các thuật ngữ cơ bản

Trong m ục này chúng ta sẽ trình bày m ột sô' thuật ngữ cơ bản của lý thuyết đồ thị.
Trước tiên, ta xét các thuật ngữ m ô tả các đỉnh và cạnh của đồ thị vô hướng.

Đ ịnh n g h ĩa 1.
 
H ai
 
đỉnh u v à v của đồ thị vô hướng G được gọi là

k ề
 
nhau nếu

ịu,v)
 
là

cạnh của đổ thị G. N ếu
 
e= (u,v)
 
là cạnh của đ ổ thị thì ta nói cạnh này là liên thuộc với

hai đỉnh u và
 
V,
 
hoặc cũng nói là cạnh e là nối đỉnh u và đỉnh
 
V,
 
đồng thời các đỉnh u và

V
 
s ẽ được gọi

l à
 
các đỉnh đẩu của cạnh

(u,v).

Để có thể biết có bao nhiêu cạnh liên thuộc với m ột đỉnh, ta đưa vào định nghĩa sau

Đ ịn h n g h ĩa 2.
 
T a gọi bậc của đỉnh

V
 
trong đổ thị vô hướng là s ổ cạnh liên thuộc với nó

và s ẽ ký hiệu là deg{v).

b
 
e
 
d

H ìn h 1.
 
Đ ồ thị vô hướng G

T h í d ụ 1.
 
X ét đồ thị cho trong hình 1, ta có

degịa) -
 
1,
 
degib) =
 
4,
 
deg{c) =
 
4,
 
degự )
 
= 3,

deg{d) =
 
1,
 
degie)
 
= 3,
 
deg{g) =
 
0.

150

Chương 1. Các khái niệm cơ bản của lý ihuyết dô thị

Đ ỉnh bậc 0 gọi là
 
đỉnh cô lập.
 
Đ ỉnh bậc 1 được gọi là
 
cíỉnh treo.
 
T rong ví dụ trên đỉnh
 
g

là đỉnh cô lập, a và
 
í /
 
là các đỉnh treo. Bậc của đình có tính chất sau:

Đ ịnh lý 1.
 
G id sử G
 
=
 
{V, E) là dồ thị vô hướng với m cạnh. K hi đó

Im
 
= ^ d e g ( v )

ver

C hứng
 
m inh.
 
Rõ
 
ràng m ỗi cạnh
 
e=(u,v)
 
được tính một lần trong
 
deg(u)
 
và m ột lần
trong
 
deg(v).
 
Từ đó suy ra tổng tất cả các bậc của các đỉnh bằng hai lần số cạnh.

T hí dụ
 
2.
 
Đ ồ thị với
 
n
 
đỉnh và mỏi đỉiih có bậc là 6 có bao nhiêu cạnh?

Giải:
 
Theo định lý 1, ta có
 
2m
 
= 6 « . Từ đó suy ra sô' cạnh của đồ thị là 3/ỉ.

H ệ quả.
 
Trong đ ồ thị vô hướng, s ố đỉnh bậc lẻ (nghĩa là có bậc là s ô lẻ ) là m ột sô' chẵn.

C hứng m inh.
 
Thực vậy, gọi
 
o vầ
 
u
 
tương ứng là tập đỉnh bậc lẻ và tập đỉnh bậc chẵn
của đồ thị. Ta có

2
 
m =
 
^ d e g ( v ) = ^ d e g ( v ) + ^ d e g ( v )

veV
 
veO
 
veU

Do
 
deg{v)
 
là chẵn với
 
V
 
là đỉnh trong
 
u
 
nên tổng thứ hai trong vế phải ở trên là số chẵn.
Từ đó suy ra tổng thứ nhất (chính là tổng bậc của các đỉnh bậc lẻ) cũng phải là số chẵn,
do tất cả các số hạng của nó là sô' lẻ, nên tổng này phải gồm m ột số chẩn các số hạng.
Vì vậy, số đỉnh bậc lẻ phải là số chẩn,

T a xét các thuật ngữ lương tự cho đồ thị có hướng.

Định nghĩa 3.
 
N ếu
 
e -(u ,v )
 
là cung của đổ thị có hướiìg G thì ta nói hai
 
đỉnh u và
 
V

là k ề nhau, và nói cung (u,v) nổi ấinìi
 
II VỨI
 
cíinlì
 
V
'
 
hoậc cữ/ii> nói cung này là đi ra khỏi

đỉnh u và đi vào đỉnh
 
V.
 
Đ ỉnh u ( v)
 
s ẽ dược gọi là
 
đỉnh dầu (cuối) của cung (u,v).

Tương tự như khái niệm bậc, đối với đổ thị có hướng ta có khái niệm bán bậc ra (vào)
của m ột đỉnh.

Đ ịnh nghĩa 4.
 
T a gọi hán bậc ra (bán hậc vào) của của đỉnh
 
V
 
trong đ ồ thị có hướng

là s ố cung của đồ thị đi ra khỏi nó (đi vào nó)
 
và
 
ký hiệu là deg*{v)
 
{deg'{v) )

151

Phẩn 2. Lý thuyết đồ thị

T h í d ụ 3.
 
X ét đồ thị cho trong hình 2. T a có

degXA) = 2, degXB)
 
=3,
 
d e g X O
 
=
 
l . d e g i D ) = 2.
 
d e g ( E) = 2.

d e g \ A ) = 3, deg*(B) = 2, d e g \ C )
 
= 2,
 
deg*{D)
 
= 2,
 
deg*{E) =
 
1.

Do m ỗi cung
 
{u,v)
 
sẽ được tính m ột lần trong bán bậc vào của đỉnh
 
và m ột lần
trong bán bậc ra củ a đỉnh
 
u
 
nên ta có:

Đ ịn h lý 2.
 
G iả sử
 
G =(V,E) là đ ồ ĩhị có hướng. K hi đó

Zd Qg ~ ^ i v ) =
 
ỵ d e g ^ { v ) = \ E \

v e V
 
v e V

R ất nhiều tính chất của đồ thị có hướng không phụ thuộc vào hướng trên các cung của
nó. Vì vậy, trong nhiều trưòng hợp sẽ thuận tiện hon nếu ta bỏ qua hướng trên các cung
của đồ thị. Đ ổ thị vô hướng thu được bằng cách bỏ qua hướng trên các cung được gọi là

đồ thị vô hướng tương ứng
 
với đồ thị có hướng
 
đã cho.

1.3. Đường đí, Chu trình.
 
Đồ thị liên thông

Định nghĩa 1.
 
Đ ường đi độ d à i n
 
từ đỉnh u đến đỉnh
 
V,
 
trong đó n lả sô'nguyên dương,

trên đ ồ thị vô hướng G -{V ,E )
 
là dãy

...........
...
 
x„

trong đó u
 
= X
 
q
,
 
V
 
= x,„
 
(Xị,
 
x,+|)
 
e
 
E,
 
/ = 0, 1, 2 , . . . ,
 
n - \.

Đ ường đi nói trên còn có th ể hiểu diễn dưới dạng dãy các cạnh:

(X
ọ
. X
 
ị
 
),
 
(XpJCj)
 
.........

Đ ỉnh u gọi là đỉnh đầu, còn đỉnh
 
V
 
gọi là đỉnh cuối của đường đi. Đường đi có đỉnh đầu

trùng với đỉnh cuối (tức là u
 
=
 
v) được gọi là
 
chu trình.
 
Đ ường đi hay chu trình được

gọi là
 
đơn
 
nếu n h ư không có cạnh nào bị lặp lại.

Thí dụ 1.
 
X ét đồ thị vô hướng cho trong hình
 
1:

a
 
b
 
c
 
a

Hình
 
1.
 
Đ ường đi trên đồ thị

152

C h ư ơ n g I . C á c k lìá i niệm CƠÌHUÌ của
 
/}
 
thuyết đ ổ t h ị

Ta có:
 
a, d, c , f , e
 
là đường đi đơn độ dài 4. Còn
 
cl, e, c, a
 
không là dường đi, đo
 
(e, c)

không phải là cạnh của đồ thị. Dãy
 
b, c. f, e, h
 
là chu trình độ dài 4. Đưòtìg đi
 
a, b, e, d,

a, h
 
có độ dài là 5 không phải là đường đi đơn, do cạnh
 
(a, b)
 
có m ặt
 
trong nó
 
hai
 
lần.

Khái niệm đường đi và chu trình trên đồ thị có hướng được định
 
nghĩa hoàn
 
toàn

tương tự như trường hợp đồ thị vô hướng, chỉ khác là ta có chú ý đến hướng trên các
cung.

Đ ịnh n g h ĩa 2.
 
Đ ườìỉg đi độ dài n từ iíỉn.lì u đến đỉHỈí
 
l>^on^ đó n là
 
SCI
 
nguyên dương,

trên đồ (hị cô hướng G=(V,A)
 
là dãy

t r o n g
 
đ ó
 
u =
 
Xg ,
 
V =

x , „
 
{ x „
 
e
 
A ,
 
/ =
 
0 ,
 
l . 2
 
........
 
« -1 .

Đường di nói trên còn có th ể hiểu diễn dưới dạng clãv C
C
IC
 
cung:

C v ,„.Y ;),
 
( .V p .V i)
 
............

Đỉnh u gọi là đỉnh đẩu, còn đỉnh
 
V
 
gọi là đỉnh cuối của đường đi. Đ ường đi có đỉnh đẩu

trùng với đỉnh cuối (tức là li -
 
v) được gọi là chu trình. Đường đi hay chu trình được

gọi là đơn nếu như không có cung nào bị lặp lại.

T h í d ụ 2. Trên đồ thị có hướng cho trong hình 1;
 
a. íì, c, f , e
 
là đường đi đơn độ dài 4.
Còn
 
d, e, c, a
 
không là đường đi, do (£
■
,<
:■
) không phải là cung của đồ thị. Dãy
 
h, c , f , e, b

là chu trình độ dài 4. Đường đi
 
a, b, e, d. a, h có
 
độ dài là 5 không phải là đường đi đofn,
do cung
 
{a,h)
 
có mặt trong nó hai lần.

Xét m ột mạng m áy tính. M ột câu hỏi đặt ra là hai máy tính bất kỳ trong m ạng này
có thể trao đổi thông tin dược với nhau hoặc ià trực liếp qua kênh nối chúng hoặc thông
qua m ột hoặc vài máy tính trung gian trong mạng?
 
Nếu sử dụng
 
đồ thị để biểu diễn
m ạng m áy tính này (trong đổ các đỉnh của đồ thị tưitng ứng với các m áy tính, còn các
cạnh tuơng ứng với các kênh n ố i) câu hỏi đó được phát biểu trong ngôn ngữ đồ thị như
sau: Tồn tại hay chăng đường đi giữa inọi cặp đinh của đồ thị?

Đ ịnh
 
n g h ĩa
 
3.
 
Đ ồ thị vô hướiiịị G= (Y,E) được
 
ẹọ/
 
là liên
 
thông nếu
 
luôn tìm
 
được

đường di giữa hai đỉnh hất kỳ của nỏ.

Như vậy hai m áy tính bât kỳ trong mạng có thể trao đổi thông tin được với nhau khi và
chỉ khi đồ thị tương ứng với m ạng này là đồ thị liên thông.

T h í d ụ 3. Trong hình 2: Đồ thị
 
G
 
là liên thông, còn đồ thị
 
H
 
là không liên thông.

153

Phần 2. Lý thuyết đ ồ tlìị

H-

H,

H-

H

H ìn h 2.
 
Đ ồ thị liên thông
 
G
 
và đồ thị
 
H
 
gồm 3
thành phần liên thông
 
/ / , , / / .,
 
H y

Đ ịn h n g h ĩa
 
4. Ta gọi đổ thị con của đồ thị G = (V,E)
 
là
 
đồ thị H = {W, F), trong đó

w
 
V và
 
F a,
 
E.

T rong trường họfp đồ thị là không liên thông, nó sẽ rã ra thành m ột số đồ thị con liên
thông đôi m ột không có đỉnh chung. N hững đồ thị con liên thông như vậy ta sẽ gọi là

các
 
th àn h p h ầ n liên thông
 
của đồ thị.

T h í d ụ 4,
 
Đ ồ thị
 
H
 
trong hình 2 gồm 3 thành phần liên thống / / |,
 
H y

T rong m ạng m áy tính có thể có những m áy (những kênh nối) m à sự hỏng hóc của
nó sẽ ảnh hưởng đến
 
việc trao đổi thông tin trong m ạng. Các khái niệm tương ứng với
tình huống này được đưa ra trong định nghĩa sau.

Đ ịn h n g h ĩa 5.
 
Đ ỉnh
 
V
 
được gọi là đ ỉn h r ẽ n h á n h nếu việc loại bỏ
 
V
 
cùng với các cạnh

liên thuộc với nó khỏi đồ thị làm tăng sô' thành phầ n liên thông của đồ thị. Cạnh e được

gọi là cầ u nếu việc loại bỏ nó khỏi đ ồ thị làm tăng s ố thành phần liên thông của đ ồ thị.

T h í d ụ 5. T rong đổ thị
 
G ở
 
hình 2, đỉnh íi và
 
e lằ
 
đỉnh rẽ nhánh, còn các cạnh
 
{d,g)
 
và

( e f )
 
là cầu.

Đ ối với đồ thị có hướng có hai khái niệm
 
liên
 
thông
 
phụ thuộc vào
 
việc ta có
 
xét

đến hướng trên các cung hay không.

Đ ịn h
 
n g h ĩa
 
6.
 
Đ ồ thị cố hướng G=
 
( V A )
 
được gọi
 
là liên thông
 
m ạnh
 
nếu luôn
 
tìm

được đường đi giữa hai đỉnh b ấ t kỳ của nó.

Đ ịn h n g h ĩa 7.
 
Đ ồ thị có hướng G=
 
( V ^ )
 
được gọi là liên thông yếu nếu đổ thị vô hướng

tương ứng với nó là đồ thị
 
vô
 
hướng liên thông.

R õ ràng nếu đồ thị là liên thông m ạnh thì nó cũng là liên thông yếu, nhưng điều ngược
lại là không luôn đúng, như chỉ ra trong thí dụ dưới đây.

154

Chương ỉ. Các khái niệm cơhản của lý thuyết đồ thị

T h í dụ
 
6 . Trong hình 3 đồ thị
 
G
 
là liên thông m ạnh, còn
 
H
 
là liên thông yếu nhưng
không là liên thông mạnh.

H ìn h 3.
 
Đồ thị liên thông m ạnh
 
G
 
và đồ thị liên thông yếu
 
H

M ột câu hỏi đặt ra là khi nào có thể định hướng các cạnh của m ột đồ thị vô hướng
liên thông để có thể thu được đồ thị có hướng liên thông m ạnh? Ta sẽ gọi đồ thị như vậy
là đồ thị định hướng được. Định lý dưới đây cho ta tiêu chuẩn nhận biết m ột đổ thị có là
định hướng được hay không.

Đ ịn h ỉý 1.
 
Đ ồ thị vô hướng liên thông là định hướng được khi và c h ỉ kh i m ỗ i cạnh của

nó nằm trên ít nhất m ột chu trình.

C h ứ n g m in h .
 
Đ iều kiện cần.
 
Giả sử
 
(
 
m
 
,
 
v
 
)
 
là m ột cạnh của đồ thị. T ừ sự tồn tại đường
đi có hướng từ
 
u
 
đến
 
V
 
và ngược lại suy ra
 
(
 
m
 
,
 
v
 
)
 
phải nằm trên ít nhất m ột chu trình.

Đ iều k iệ n đủ.
 
Thủ tục sau đây cho phép định hướng các cạnh của đồ thị để thu được đồ
thị có hướng
 
liên thông mạnh. Giả sử c
 
là một chu trình nào đó trong đồ thị. Đ ịnh
hướng các cạnh trên chu trình này theo m ột hướng đi vòng theo nó. N ếu tất cả các canh
của đồ thị là đã được định
 
hướng thì kết thúc thủ tục. Ngược lại, chọn
 
e
 
là m ột canh
chưa định hướng có chung đỉnh với ít nhất m ột trong số các cạnh đ ã định hướng. T heo
giả thiết tìm
 
được chu
 
trình
 
C ’ chứa cạnh
 
e.
 
Đ ịnh
 
hướng
 
các
 
cạnh
 
chưa được định
hướng củ a C ’ theo m ột hướng dọc theo chu trình này (không định hướng lại các cạnh đã
có hướng).
 
Thủ tục trên sẽ được lập lại cho đến khi tất cả các cạnh củ a đổ thị được định
hướng. K hi đó ta thu được đồ thị có hướng liên thông mạnh.

1.4. Một số dạng đồ thị đặc biệt

Trong m ục này ta xét m ột số dạng đơn đồ thị vô hướng đặc biệt xuất hiện trong nhiều
vấn đề ứng dụng thực tế.

Đồ th ị đ ầ y đ ủ .
 
Đ ồ thị đầy đủ
 
n
 
đỉnh, ký hiệu bởi
 
K„,
 
là đơn đồ thị vô hướng m à giữa
hai đỉnh bất kỳ của nó luôn có cạnh nối.

155

Phần 2. Lý thuyết đổ thị

Các đồ thị
 
Ky, K ị ,
 
cho trong hình 1 dưới đây.

K,

H ìn h 1. Đồ thị đầy đủ

Đồ thị đầy đủ
 
K„
 
có tất cả
 
n(n-ì )/ 2
 
cạnh, nó là đơn đồ thị có nhiều cạnh nhất.
Đồ th ị vòng.
 
Đồ thị vòng c „ , /7 > 3, gồm
 
n
 
đỉnh
 
V | .
 
V
’
2
 
,
 
.
 
.
 
.
 
, v,,và các cạnh

( V |,
 
Vj),
 
(V j, V ,),
 
v „ ),
 
(v ,„
 
V |).

Đồ thị vòng C 3, C 4, c „ Q
 
cho trong hình 2.

C ,
 
C4

H ình 2.
 
Đ ồ thị vòng C 3 , C 4 , c „ C(

Đ ồ
 
thị bánh xe.
 
Đ ồ thị
 
w„
 
thu
 
được
 
từ
 
c„ bằng cách bổ sung vào m ột đỉnh mới nối
với tất cả các đỉtih của c„ (xem hình 3).

K

H ìn h 3. ĐỒ thị bánh xe V
K
3, 1
^ 4, W5,

Đ ồ
 
thị lập phuơng.
 
Đồ thị lập phương
 
n
 
đỉnh
 
là đồ thị với các đỉnh biểu diễn
 
2"

xâu nhị phân độ dài
 
n.
 
Hai đỉnh của nó là kề nhau nếu như hai xâu nhị phân tương ứng
chỉ khác nhau 1 biti Hình 4 cho thấy
 
Q„.
 
với
 
n
 
= 0,1, 2, 3, 4.

156

Chương
 
/.
 
Các khái niệm cơhchĩ của lý thuyếĩ dó thị

o
 
1
 
o

/7=1

01

1 1 = 2

000

001

H ình 4. Đồ thị lập phương
 
Q„

Đ ồ th ị h ai p h ía .
 
Đơn đồ thị
 
G = {V,E)
 
được gọi là
 
hai phía
 
nếu như tập đỉnh
 
V
 
của nó
có thể phân hoạch thành hai tập X và K sao cho mỗi cạnh của đổ thị chỉ nối m ột đỉnh
nào đó trong
 
X
 
với m ột đỉnh nào đó trong
 
Y.
 
Khi đó ta sẽ sử dụng ký hiệu
 
G = (X
 
u
 
Y, E)

để chỉ đồ thị hai phía với tập đỉnh
 
XuY.

Đ ịnh lý sau đây cho phép nhận biết m ột đơn đồ thị có phải là hai phía hay không.

Đ ịn h lý 1.
 
Đơn đổ thị là đồ thị hai phía khi và chí khi nó khóng chứa chu trình độ dài

lẻ.

Để kiểm
 
tra xem
 
m ột đồ thị liên thông có phải là hai phía hay không có thể áp
dụng thủ tục sau. Chọn
 
V
 
là m ột đỉnh bất kỳ của đồ thị. Đ ặt
 
x =
 
{v}, còn
 
Y
 
là tập các
đỉnh kể củ a
 
V .
 
Khi đó các đỉnh kề của các đỉnh trong
 
Y
 
phải thuộc vào
 
X.
 
Ký hiệu tập
các đỉnh như vậy là
 
T.
 
Vì th ế nếu phát hiện
 
T r\Y ^
 
0
 
thì đồ thị không phải là hai phía,
kết thúc. Ngược lại, đặt
 
x
 
=
 
X u T.
 
Tiếp tục xét như vậy đối với
 
T'
 
là tập các đỉnh kể
của
 
T,...

Đồ thị hai phía
 
G
 
= (X u Y ,
 
E)
 
với
 
\ x \
 
=
 
m , \ Y \
 
=
 
n
 
được gọi là
 
đồ th ị hai p h ía

đầy đủ
 
và ký hiệu là
 
„
 
nếu mỗi đỉnh trong tập
 
X
 
được nối với mỗi đỉnh trong
 
Y.
 
Các
đồ thị
 
ả ^
2 3>^3 3>^3 4 được cho trong hình 5.

157

Phần 2. Lý thuyết đồ thị

K

H ìn h 5. ĐỒ thị hai phía

Đồ th ị p h ẩ n g . Đ ồ thị được gọi là
 
đ ồ thị phẳ n g
 
nếu ta có thể vẽ nó trên m ặt phẳng sao
cho các cạnh của nó không cắt nhau ngoài ở đỉnh. Cách vẽ như vậy sẽ được gọi là
 
biểu

diễn phẳng
 
của đồ thị.

Thí dụ đồ thị
 
là phẳng, vì có thể vẽ nó trên m ặt phẳng sao cho các cạnh của nó
không cắt nhau ngoài
 
ở đỉnh (xem hình 6 ).

H ìn h 6. Đ ồ thị
 
là đồ thị phẳng

M ột điểm đáng lưu ý là nếu đồ thị là phẳng thì luôn có thể vẽ nó trén m ặt phẳng
với các cạnh nối là các đoạn thẳng không cắt nhau ngoài ở đỉnh (ví dụ xem cách vẽ
 
K
 
4

trong hình 3).

Để
 
nhận
 
biết xem
 
m ột đồ thị
 
có
 
phải
 
là đồ
 
thị phẳng
 
có
 
thể
 
sử dụng
 
định
 
lý
K uratovski, m à để phát biểu nó ta cần m ột số khái niệm
 
sau:
 
T a gọi m ột
 
p h é p c h ia

cạnh
 
(m,v)
 
của
 
đồ
 
thị là việc loại
 
bỏ
 
cạnh này khỏi
 
đồ thị và
 
thêm
 
vào
 
đồ
 
thị
 
m ột
 
đỉnh

mới vv cùng với hai cạnh
 
(u,w), (w,u).
 
H ai đồ thị
 
G = (V, E ) \ ằ H
 
= (W, F)
 
được gọi là

đồn g cấu
 
nếu chúng có thể thu được từ cùng m ột đồ thị nào đó nhờ các phép chia cạnh.

Định lý 2
 
(K uratovski).
 
Đ ồ thị là phẳng
 
khi
 
và chỉ khi nó
 
không
 
chứa đồ thị con đổng

cấu với K-¡
 
3
 
hoặc Kị.

Trong trường hơp riêng, đồ thị
 
K
 
ị
 
Ị
 
và
 
K
 
ị
 
không phải là đồ thị phẳng. Bài toán về
tính phẳng của đồ thị
 
Kị
 
3
 
là bài toán đ ố nổi tiếng về
 
ba căn hộ và ba hệ thống cung cấp

năng lượng
 
cho chúng: Cần xây dựng hệ thống đưòfng cung cấp điện, hơi đốt và nước
cho ba căn hộ, nối mỗi m ột trong ba nguồn cung cấp năng lượng với m ỗi m ột căn hộ
nói trên sao cho chúng không cắt nhau.

158

Chương ỉ. Các khái niệm cơ hàn của ìỷ thuyết đồ thị

Đ ồ thị phẳng còn tìm được những ứng đụng quan trọng trong công nghệ ch ế tạo m ạch
in.
 
Biểu diễn phẳng của đồ thị sẽ chia mặt phẳng ra thành các m iền, trong đó có thể có
cả m iền không bị chặn. Thí dụ, biểu diễn phẳng của đồ thị cho trong hình 7 chia m ặt
phảng ra thành 6 m iền R | R 2, ..., R
fi.

R,

H ìn h 7. Các miền tương ứng với biểu diễn phẳng của đồ thị

Euler đã chứng m inh được rằng các cách biểu diễn phẳng khác nhau của m ột đồ thị
đều chia m ặt phẳng ra thành cùng một số miền. Đ ể chứng m inh điều đó, Euler đã tìm
được m ối liên hệ giữa số miền, số đỉnh của đồ thị và số cạnh của đồ thị phẳng sau đây.

Đ ịnh lý 3 (C ông th ứ c E u ler).
 
Giả sử
 
G
 
là đồ thị phẳng liên thông với
 
n
 
đỉnh,
 
m
 
cạnh.
Gọi
 
r
 
là sô' m iền của m ặt phẳng bị chia bởi biểu diễn phẳng của
 
G.
 
K hi đó

r = m - n +
 
2
 
.

Có thể chứng m inh định lý bằng qui nạp. Xét thí dụ m inh hoạ cho áp dụng công
thức Euler.

T h í d ụ . Cho
 
G
 
là đồ thị phẳng liên thông với 20 đỉnh, mỗi đỉnh đều có bậc là 3. Hỏi
m ặt phảng bị chia làm bao nhiêu phần bởi biểu diẻn phẳng của đồ thị G?

G iải. Do mỗi đỉnh của đồ thị đều có bậc là 3, nên tổng bậc của các đỉnh là 3x 20 = 60.
Từ đó suy ra số cạnh của đồ thị
 
m =
 
60/2 = 30. Vì vậy, theo công thức Euler, số m iền
cần tìm là

r = 3 0 -20 + 2 = 12.

159

Phần 2. Lý ìhuyết đồ thị

Bài tập

1. Xác định bậc của các đỉnh trong đồ thị G^. Xác định bán bậc ra và bán bậc vào của
các đỉnh của đồ thị Gß.

Ga

2. Vẽ đồ thị vô hưcmg
 
G = (V,E)
 
cho bởi;

V = [ A , B , C, D , E , F )

và

E
 
=
 
{{E.G), (B,F), { D ,0 , (D ,F),
 
(C,F), (A,F), (E,D)]

3. Với mỗi đồ thị trong các đồ thị sau đây hãy cho biết nó có là đồ thị hai phía hay
không? Nếu câu trả lời là khẳng định, hãy chỉ rõ cách phân hoạch tập đỉnh thành hai tập
đỉnh sao cho cạnh nối chỉ có giữa hai đỉnh thuộc hai tập khác nhau.

3. Cho đcm đồ thị vô hướng liên thông
 
G = (V, E)
 
với
 
n
 
đỉnh.
160

C h ư ơ n g
 
y.
 
C á c kh ái n iệm c ơ h íin củ a lÝ th u yei d ồ thị

a) Chứng minh rằng luôn tồn tại đườiig đi đưn nối hai đỉnh
 
u,
 
V
bất kỳ của đồ thị.

(Gợi ý: Đường di cần tìm ìc>
 
dường di Iìi>âii lìlìấr ¡heo sơ cạnh)

b) Chứng minh rằng luôn tồn tại đưòìig đi qua không quá
 
n
 
đỉnh
 
nối hai đỉnh
 
u,
 
V

bất kỳ của đồ thị.

(Gợi ý:
 
Đường
 
đi cán tìm là dường cli ngắn nhất theo số cạ n h ).

4.
 
Cho
 
G
 
là đơn đồ thị vô hướng với /ỉ đinh,
 
m
 
cạnh,
 
k
 
thành phần liên thông. Chứng
ĩiinh rằng;

n-k
 
< {n-k) {n-k+\) !
 
2
 
.

Từ đó suy ra đồ thị n đỉnh với
 
sô' cạnh lớn hơn (/ỉ-l)(/;-2)/2 là liên thông.

(Gợi ỷ:
 
Chứng minh bằng qui nạp theo s ố cạnh của đồ thị).

5. Chứng m inh rằng trong đơn đồ thị với /ỉ >
 
1 đỉnh luôn tìm được hai đỉnh không là
đỉnh rẽ nhánh.

6 . Chứng m inh rằng đỉnh
 
u
 
trong
 
đom đồ thị liên thông
 
G
 
là đỉnh rẽ
 
nhánh khi và chỉ
khi tìm được hai đỉnh
 
V
 
và vv (v’,>v
 
ĩ^u)
 
sao cho mọi đưòmg đi nối
 
V
 
và vv đều đi qua
 
đỉnh

u.

7. Chứng m inh rằng cạnh
 
e
 
trong đơn đồ thị
 
G
 
là cầu khi và chỉ khi nó không thuộc bất
cứ chu trình nào trong
 
G.

8.
 
Cho
 
G
 
là đồ thị hai phía với
 
n
 
đỉnh và
 
m
 
cạnh. Chứng minh rằng
 
m
 
< n^/4.

9.
 
Cho
 
G
 
là đổ thị hai phía với
 
n
 
đỉnh và
 
m
 
cạnh. Gọi
 
K
 
và
 
k
 
là bậc lổfn nhất và nhỏ nhất
của các đỉnh của
 
G.
 
Chứng minh răng

m
 
<
 
2
 
m!n
 
<
 
M.

10.
 
Đ ồ thị vô hướng được gọi là c h ín h qui bậc
 
k
 
nếu tất cả các đỉnh của nó đéu có bậc
là
 
k.
 
Với giá trị nào của /7 đồ thị sau là chính qui?

a)/^„

b)
 
c „

c)W^„

d)
 
Q„

11. Ta gọi đồ thị
 
G '
 
là đồ th ị bù của đơn đồ thị
 
G
 
nếu
 
các đỉnh của nó là đỉnh của đồ
thị
 
G
 
và hai đỉnh của ơ ' l à
 
kể nhau khi và chỉ khi chúng là không kề nhau trên
 
G.
 
Hãy
vẽ các dồ thị bù của
 
K
„, K
„
,„
, c„, Q
„
.

161

Phần 2. Lý thuyết đổ thị

12. Hai đơn đồ thị vô hướng ơ | = (V^I, £ |) và
 
= ( ^ 2- ^ 2) được gọi là
 
đ ẩng cấu
 
nếu tồn
tại m ột song ánh /: V| - »
 
V
 
2
 
sao cho
 
( m , v )
 
e
 
Eị
 
khi và chỉ khi
 
ự{u), f{v))
 
e
 
£
 
2
 
-
 
T hí dụ,
hai đồ thị G| và Ơ2 cho trong hình dưới đây là đẳng cấu

Song á n h /đ ư ợ c xác định như s a u ;/(A )= 1 ,/(B )= 2 ,/(C )= 3 ;/(D )= 4 ,/(E )= 5 ,/(F )= 6 .
Hỏi hai đồ thị sau đây có đẳng cấu hay không?

162

Chương I. Các khái niệm cơ bản của
 
/v
 
thuyết đồ thị

13. Với m ỗi đồ thị trong các đồ thị sau đây hãy cho
 
biết nó có là đồ thị phẳng hay
không. N ếu câu trả lời là khảng định hãy trình bày cách vẽ đồ thị sao cho các cạnh
không cắt nhau ngoài ở đỉnh:

a)

0

14. Hỏi rằng đồ thị Q3 có phải là phẳng không?
 
Trong trường
 
hợp câu trả lời là khẳng
định hãy vẽ nó trên m ặt phẳng sao cho khống có cạnh nào cắt nhau.

15. Cho
 
G
 
là đơn đồ thị phẳng liên thông với 20 đỉnh và mỗi đỉnh của nó đều có bậc là

3. H ỏi rằng khi vẽ
 
G
 
trên m ặt phẳng thì mật phẳng bị chia làm bao nhiêu phần ?

16. B ài to á n tò m à u đồ th ị: Cho đơn đồ thị vô hướng
 
G = (V,E).
 
H ãy tìm cách gán cho
m ỗi đỉnh của đồ thị m ột m àu sao cho hai đỉnh kề nhau không bị tô bởi cùng m ột màu.
M ột phép gán m àu cho các đỉnh như vậy được gọi là một phép tô m àu đồ thị. Bài toán
tô m àu đòi hỏi tìm phép tô m àu với số màu phải sử dụng là ít nhất.

Ta gọi sắc số của đồ thi
 
G,
 
ký hiệu là
 
x(G),
 
là sô' màu ít nhất cần dùng để tô m àu đồ
thị. Dưới đây là m ột số kết quả liên quan đến tô m àu đồ thị

a) Đ ịnh lý 4 màu: “Mọi đồ thị phẳng đểu có thể tô bởi 4 m ầu” .

b) Đcfn đồ thị G là hai phía khi và chỉ khi
 
ỵ(G ) =
 
2.

H ãy chứng m inh m ệnh đề b).

163

Phần 2. Lv tlitiyếi dồ thị

17.Hãy tính sắc số của các đồ thị cho trong các hình vẽ sau

a) Đồ thị Petersen

b) Đồ thị lập phương

c) Đ ồ thị Herschel

164

Chương 2. Biểu dien dồ thị trân rnáy Ịính

2

Biểu DIỄN ĐỒ THỊ

TRẼN MÁY TĨNH

Để lưu trữ
 
đồ thị và thực hiện các thuật toán khác nhau với đồ thị trên m áy tính
cần phải tìm những cấu trúc dữ liệu ihích hợp để mô lả đổ thị.
 
V iệc chọn cấu trúc dữ
liệu nào để biểu diễn đồ thị có tác động rất lớn đến hiệu quả của thuật toán. Vì vậy, việc
chọn lựa cấu trúc dữ liệu để biểu diễn dồ thị phụ thuộc vào từng tình huống cụ thể (bài
toán và thuật toán cụ thể). Trong mục này chúng ta sẽ xét m ột số phương pháp cơ bản
được sử dụng để biểu diễn đồ thị trên máy tính, đồng thời cũng phân tích một cách ngắn
gọn những ưu điểm cũng như những nhược điểm của chúng.

2.1. Ma trận kể. Ma trận trọng số

Xét đơn đồ thị vô hướng
 
G
 
= (V,
 
E),
 
với tập đính V = {1, 2,..., «}, tập cạnh £ = { e,,

e„,}.
 
Ta gọi m a trận kề của đồ thị
 
G
 
là (0 ,l)-m a trận

/ \ =
 
{üij
 
:
 
i . j =
 
1 ,2
 
.....
 
/ỉ}

»

165

Phẩn 2. Lý thuyết đổ thị

với
 
các phần tử được xác định theo quy tắc sau đây:

đý
 
=
 
0 ,
 
nếu
 
(ỉ
 
j )
 
€
 
E
 
và
 
ùịj
 
=
 
1
 
,
 
nếu
 
ự,J)
 
G
 
E,

i. j =
 
1,2
 
.....
n.

T h í d ụ 1.
 
Ma trận kề cu ả đồ thị vô hướng
 
G
 
cho trong hình 1 !à

1
 
2
 
3
 
4
 
.
 
5
 
6

1
 
0
 
1
 
1
 
0
 
1
 
0

2
 
1
 
0
 
1
 
0
 
1
X
 
0

1
 
1
1
 
Û
 
1
 
Ü
 
Ũ

4
 
0
 
0
 
1
 
0
 
1
 
1

5
 
1
 
1
 
0
 
1
 
0
 
1

6
 
0
 
0
 
0
 
1
 
1
 
0

4

G
 
G,

H ìn h 1.
 
Đ ồ thị vô hướng G và Đ ồ thị có hướng G,

C ác tính chất của m a trận kề:

1)
 
Rõ ràng m a trận kề của đồ thị vô hướng là m a trận đối xứng, tức là

a[i , j ]=a[ị , i ],
 
i , j ^
 
1
 
,
 
2
 
,..., n.

Ngược lại, m ỗi (0,1 )-m a trận đối xứng cấp
 
n
 
sẽ tương ứng, chính xác đến cách đánh số
đỉnh (còn nói là: chính xác đến đẳng c ấ u ) , với m ột đơn đồ thị vô hưốfng
 
n
 
đỉnh.

2) Tổng các phần tử trên dòng
 
i
 
(cột
 
j)
 
của m a trận kề chính bằng bậc củ a đỉnh
 
i

(đỉnh
 
f).

3)
 
N ếu ký hiệu

aỊ!
 
,
 
i , j
 
= 1, 2 ,...,
 
n

là các phần tử của m a trận tích

166

Chươní’ 2. Biểu diền dồ thị trên niáy tính

Khi đó

A ^ ^ A . A . . . A

cho ta số đường đi khác nhau từ đỉnh ; đến đỉnh
 
j
 
qua
 
p
 
- 1 đỉnh trung gian.

M a trận kề của đồ thị có hướng được định nghĩa một cách hoàn toàn tương tự.
T h í d ụ 2,
 
Đ ồ thị có hướng G, cho trong hình 1 có ma trận kề là m a trận sau

1

1
 
r
 
0

6

0
 
-

0

0

0

1

0

Lun ý rằng ma trận kề của đồ thị có hướng không phải là ma trận đối xứng.

C h ú
 
ý:
 
Trên đây chúng ta chỉ xét đơn đồ thị. M a trận kề của đa đồ thị có thể xây dựng
hoàn toàn tương tự, chỉ khác là thay vì ghi 1 vào vị trí
 
a[ij]
 
nếu (/,
 
j )
 
là cạnh của đồ thị,
chúng ta sẽ ghi
 
k
 
là sô' cạnh nối hai đỉnh
 
i
 
và
 
j.

Trong rất nhiều vấn đề ứng dụng của lý thuyết đồ thị, mỗi cạnh
 
e
 
= (íi, v)
 
của đồ thị
được gán với m ột con số
 
c{e)
 
(còn viết là
 
c{u,v) )
 
gọi là trọng sô' của cạnh
 
e.
 
Đồ thị
trong trường hợp như vậy được gọi là đồ thị có trọng số. Trong trường hợp đồ thị có
trọng số, thay vì m a trận kề, để biểu diễn đổ thị ta sử dụng ma trận trọng số

C =
 
c [ i , j ị
 
i , j =
 
1, 2,...,
 
n.

với

và

nếu (/,
 
j)
 
e
 
E

c[/,ỹ] =
 
e,
 
n ế u ( i , y ) Ể £ ,

trong đó số
 
0 , tuỳ từng trường hợp cụ thể, có thể được đặt bằng m ột trong các giá trị
sau:
 
0, + 00, -00.

ư u điểm lớn nhất của phương pháp biểu diễn đồ thị bằng m a trận kể (hoặc m a trận
trọng số) là để trả lời câu hỏi: Hai đỉnh
 
u,
 
V
 
có kề nhau trên đồ thị hay không, chúng ta
chỉ phải thực hiện m ột phép so sánh. Nhược điểm
 
lớn nhất của phương pháp này là:

167

Phần 2. Lý thuyết đồ íhị

không phụ Ihuộc vào số cạnh của đổ thị, ta luôn phải sử dụng
 
đcm vị bộ nhớ để lưu
trữ m a trận kề của nó.

2.2. Ma trận liên thuộc đỉnh-cạnh
■
 
•
 
•

X ét
 
G = (V, E ) , { V =
 
{1, 2,
 
r.}, E =
 
{<?|, ?2,
 
Ị), là đơn đồ thị có hưóng. Xây dựng

m a trận
 
A = {a¡¡. i =
 
1, 2,
 
n\ j =
 
1, 2,
 
ni),
 
trong đó

'
 
Ị
 
nếu đỉnh /
 
l à
 
đỉnh đầu của cung
 
e¡

^
 
nếu đỉnh
 
i
 
là đính cuối của cung
 
ej

Q
 
nếu đỉnh
 
i
 
không là đầu m út của cung

M a trận
 
A
 
xây dựng theo qui tắc vừa nêu được gọi là m a trận liên thuộc đỉnh-cạnh.

Ví d u . Xét đồ thi cho trên hình 3

(1.2)
 
(1.3)
 
(2.3)
 
(2.4)
 
(3,5)
 
(4,5)
 
(4.6)
 
(5,2)
 
(5,6)

1
 
1
 
1
 
0
 
0
 
0
 
0
 
0
 
0
 
0

2
 
- 1
 
0
 
1
 
1
 
0
 
0
 
0
 
- 1
 
0

3
 
0
 
- 1
 
- 1
 
0
 
1
 
0
 
0
 
0
 
0

4
 
0
 
0
 
0
 
- 1
 
0
 
1
 
1
 
0
 
0

5
 
0
 
0
 
0
 
0
 
- 1
 
0
 
0
 
1
 
1

6
 
0
 
0
 
0
 
0
 
0
 
0
 
- 1
 
0
 
- 1

H ìn h 2. Đồ thị có hướng và m a trận liên thuộc đỉnh cạnh

M a trận liên thuộc đỉnh-cạnh là m ột trong những cách biểu diễn rất hay được sử dụng
trong các bài toán liên quan đến đồ thị có hướng m à trong đó phải xử lý các cung của
đồ thị.

168

Chươ iìịỉ 2.
 
ỉ iì ê ii (ìiẻn (ỉn ĩh ỉ ĩrc ìì n aíy ĩínỉì

2.3. Danh sách cạnh (cung)

Trong trường hợp đồ thị thưa (đồ thị có số cạnh
 
m
 
thoả mãn bất đẳng thức:
 
m <
 
6
 
n)

người ta thường dùng cách biểu diễn đồ thị dưới dạng
 
danh sách cạnh.

Trong cách biểu diễn đồ thị bởi danh sách cạnh (cung) chúng ta sẽ lưu trữ danh
sách tất cả các cạnh (cung) của đồ thị vô hướng (có hướng). M ỗi
 
cạnh (cung)
 
e
 
= (jc,
 
y)

cảa đổ ihị sẽ iưcmg ihig vói l.ai biếii Dau[í?], Cuoì[ế']. Như vậy, đẩ lưii trữ đ5 ';hị ta cần
sư dụng
 
2m
 
đơn vị bộ nhớ. Nhược điểm của cách biểi. diền này là để xác định những
đỉnh nào của đồ thị là kề với một đính cho trước chúng ta phải làm cỡ
 
m
 
phép so sánh
(khi duyệt qua danh sách tất cả các cạnh của đồ thị).

C k ủ ý:
 
Trong Irưòng hợp đồ thị có trọng số ta cần thêm
 
m
 
đơn vị bộ nhớ để lưu trữ
trọng số của các cạnh.

T h í d ụ 3.
 
Danh sách cạnh (cung) của đồ thị
 
G (Gị)
 
cho trong hình 1 là:

Dau
 
Cuoi
 
Dau
 
Cuoi

1
 
2
 
1
 
2

1
 
3
 
1
 
3

1
 
5
 
3
 
2

2
 
3
 
3
 
4

2
 
5
 
5
 
4

3
 
4
 
5
 
6

4
 
5
 
6
 
5

4
 
ó

5
 
6

Danh sách cạnh của
 
c
 
Danh sách cung của ơ ,

2.4. Danh sách kề

Trong rất nhiều vấn đề ứng dụng của lý thuyết đồ thị, cách biểu diễn đồ
 
thị dướidạng

danh sách k ề
 
là cách biểu diễn thích hợp nhất được sử dụng.

Trong cách biểu diễn này, với mỗi đỉnh
 
V
 
của đồ thị chúng ta lưu trữ danh sách các
đinh kề với nó, m à ta sẽ ký hiệu là
 
Ke(v),
 
tức là

Ke(v) =
 
{ u £ V : ( v , u ) e E
 
}.

Khi dó vòng
 
lặp thực hiện với mỗi một phần tử trong danh
 
sách
 
này theo
 
thứ
 
tự
 
các

phần tử được xắp xếp trong nó sẽ được viết như sau:

ĩ or u e K e ị v )
 
do...

169

Phẩn 2. LÝ thuyết đồ thị

Chẳng hạn, trên PASCAL có thể m ô
 
tả danh
 
sách
 
này như sau
 
(Gọi
 
là cấu
 
trúc
F o rw a rd S tar):

Const

m = ỉ 000; { m - số cạnh Ị
n =
 
100;
 
{ n -sốđỉnh}

var

Ke : array[l ..m] of
 
integer;

Tro; a rra y [l..n + l] o f
 
integer;

trong đó Tro[i] ghi nhận vị trí bắt đầu của danh sách kề của đỉnh i,
 
i= l,2 ,...,n , Tro[nH l]
= 2 m + l.

Khi đó dòng lệnh qui ước

ĩ ữ r u € K e ( v )
 
do
begin

end;

có thể thay th ế bởi cấu trủc lệnh cụ thể trên PASCA L
 
sau

f o r
 
i : =
 
T r o [ v ]
 
t o
 
T r o [ v + l ] - l
 
d o
b e g i n

u : =Ke [ i ] ;

e n d ;

Trong rất nhiều thuật toán
 
làm
 
việc với đồ thị chúng
 
ta thường xuyên
 
phải thực
hiện cấc thao tác: Thêm hoặc bớt m ột số cạnh. T rong trường hợp này cấu trúc dừ liệu
dùng ở trên là không thuận tiện. Khi đó nên chuyển sang sử dụng
 
dan h sách kề liên kết

{L in ke d A d ja n cen cy L ist)
 
như m ô tả trong chương trình nhập danh sách kể của đồ thị
từ bàn phím và đưa danh sách đó ra m àn hình sau đây:

program AdjList;

const

m axV
 
=
 
100;

type

link -
 
'\io d e;

node -
 
record

V
 
;
 
integer;

n e x t : link

end;

170

Chương 2.
 
BiC’it (lien dồ thị tréii má\ lính

var

j,
 
.V,
 
m, n, u,
 
;
 
integer;

t
 
: link;

K e
 
: array11..maxVJ o f link:

B E G IN

w rite( 'C h o sô'cạnh và đỉnh của đồ thị:
 
A’
 
readln( m ,n);

(*
 
K hởi tạo
 
*)

f o r j : - ỉ
 
to n do K cljj:= nil:

f o r j:=--l tc m do

begin

w rite('C ììO đỉnh đầu và cuối của cạnh
 
'j,
 
':
 
');

readìn(x,y);

new (t); t^.v:=.x: t^.nexí:= K e[y]: KeỊy]:= t;

new(r); í^.v:=ỵ; !^.next:= K elxJ; K elx]:= t;

end;

w riíeln( 'D a n h sách kề của cúc
 
đỉnh của đồ thị:
 
');

f o r j: = l to m do

begin

w r ite ln i'D anh sách các đỉnh kề của đỉnh
 
' j ,
 
');

t : - K e í j l :

w hile t^.next < > nil do

begin

write(t^.v:4);

t:= t^.nexí:

end;

end;

readin;

E N D .

T hí dụ 4.
 
D anh sách kể của các đổ thị trong hình I được mô tả trong hình sau:
Đ ỉnh đầu

{ 3

Í 3

{2

5
 
I
 
nil

6
 
nil

fó
 
ínil

Đ inh đầu

171

Phẩn 2. Lý thuyết đồ thị

H ìn h 2.
 
Danh sách kể của đồ thị vô hướng
 
G

và có hướng ơ | cho trong hình 1.

Để ý
 
rằng trong cách biểu diễn này chúng ta cần phải sử dụng cỡ
 
m+n
 
đơn vị bộ

nhớ.

Trong các thuật toán m ô tả ở các phần tiếp theo hai cấu trúc danh sách kề và ma
trận trọng số được sử dụng thường xuyên.

172

Chương 2. Biểu cỉiền dó íhị íréỉì mây lính

Bài tập

1.
 
Lập trình nhập đồ thị với các cấu trúc dữ liệu đã mô tả.

2. Lập trình cho phép chuyển đổi từ cấu trúc dữ liệu biểu diễn đồ thị dưới dạng m a trận
kề sang danh sách kề và ngươc lại.

3. Hãy xây dựng ma trận kề, danh sách kề của các đồ thị cho trong các hình vẽ sau đây

a)

G
a

l b_)

\
 
'

\
 
Ci-''—
 
< ĩ )
 
/

X

/
 
----

(¿1
 
\
\
 
\

’■i)
-------------------
 
( ỉ )

b)

4. H ãy xây dựng ma trận liên thuộc đỉnh cạnh của các đồ thị cho trong các hình vẽ sau
a)
 
b)

173

Phần 2. Lý thuyết đổ thị

5. Hãy xây dựng m a trận trọng số của các đồ thị cho trong các hình vẽ sau

a)
 
b)

c)

6. M a trận liên thuộc đỉnh cạnh có m ột tính chất rất đặc biệl hay được sử dụng trong
việc phát triển thuật toán tối ưu trên đổ thị. Đ ể phát biểu tính chất này ta cần khái niệm
sau.

Đ ịn h n g h ĩa. M a
 
t r ậ n
 
A
 
được gọi là m a trận hoàn toàn đơn m ô đun, nếu m ọi định thức
con khác không của nó đều có trị tuyệt đối là bằng 1.

Chứng minh rằng m a trận liên thuộc đỉnh cạnh của đơn đồ thị có hướng là hoàn toàn
đơn m ô đun.

174

Chươììiị 3. T ìm kiứhì Ịrén (lố ílìị
 
V
í>
lOìỉỉ

3

CÁC THUẬT TOÁN TÌM KlấM

TRÊN ĐỒ THỊ VÀ ỨNG DỤNG

Rất nhiều thuật loan trên đ ổ thị dược xây dựng dựa Irên cơ sở d u yệt tất cả cá c đinh

cú a đ ồ
 
thị sa o ch o
 
m ỏi đỉnh
 
của nỏ íluợc
 
viếng
 
lliani (lúng (Iiộl lần. V ì
 
vậy, v iệ c
 
xây

dựng những thuật toán ch o phép duyệt inộl cách hộ thống tất cả cá c đỉnh của đổ thị là

m ột vấn đề quan trọng thu hút sự quan tâm nghiên cứu của nhiều tác giả. N hữ ng thuật

toán như vậy chúng ta sẽ gọi là thuật toán tìm kiếm
 
trên đồ thị. C ác thuật toán này giữ

m ột
 
vai
 
trò quan
 
trọng
 
trong
 
việc
 
thiết k ế các
 
thuật toán
 
trên đ ổ
 
thị. T rong
 
m ục này

ch ú n g ta sẽ giới thiệu hai thuậi loáỉi lim
 
kiếm cơ bản trén đồ tlìỊ:
 
Thuật toán tìm kiếm

theo chiểu sâu
 
(D epth
 
First Search) và
 
Thuật toán tim kiếm theo chiều rộng
 
(Breadth

First Search) và
 
ứng d ụng của chúĩiíĩ vào việc giải m ột số bài toán trên đ ổ thị.

T rong m ục này chúng
 
ta sẽ xéi đồ
 
thị vô hướng
 
G = (V, E),
 
với
 
n
 
đ in h và
 
m
 
cạnh.

C húng ta sẽ quan tâm đến v iệc đánh giá hiệu quả của
 
các
 
thuật toán trên đ ổ thị, m à m ột

trong những
 
đặc
 
trưng quan trọng nhất
 
là
 
độ phức tạp tính toán,
 
tức là
 
s ố phép toán mà

ĩhiiậĩ ĩoán càn phải ihực hiện ĩrong ĩình huống.xấu
 
nhấĩ
 
được
 
biểu d iễn như
 
là
 
hàm của

kích thước đầu vào
 
của bài
 
toán. T rons
 
các
 
thuật toán trên
 
đổ
 
thị, đầu vào
 
là đổ
 
thị
 
G
 
=

{V,
 
£ ) , vì vậy, kích thước
 
của
 
bài toán là số đính
 
n
 
và số cạnh
 
m
 
củ a đ ồ thị. K hi đ ó đ ộ

phức tạp tính toán
 
cúa
 
thuạt toán
 
S C
 
được
 
biểu diễn như
 
l à
 
hàm
 
c ủ a
 
hai biến
 
s ố / f / ỉ , / ? ỉ j
 
l à

s ố phép lOÚn nhiều
 
nhất cần phái
 
iliực
 
hiện theo thuật toán đối với mọi
 
đổ
 
thị với
 
n
 
đỉnh

175

Phân 2. Lv ỉhuyếĩ dồ thị

và
 
m
 
cạnh. Khi so sánh tốc độ tăng của hai hàm nhận giá trị không âm
 
f(n)
 
và
 
gịn)

ch ú n g ta sẽ sử dụng ký hiệu sau:

fịn ) =
 
0
 
(g(n))

<=>
 
tìm được các hằng số
 
c , N > 0
 
sao cho

f(n)
 
< C g(n)
 
với mọi
 
//
 
>N.

Tươiig tự như vậy nếu
 
f(n¡,
 
g(nị,
 
là các hàm nhiều biến, ta viết

f(n¡,
 
=
 
0(g(rĩỊ,

<
=
>
 
tìm được các hằng số
 
c , N > 0
 
sao cho

f(n¡, n
2
 
,...,nị,)
 
< c g(ĩĩị,
 
với mọi «/,

Nếu độ phức lạp tính toán của thuật toán là
 
0{g(n))
 
thì ta sẽ còn nói là nó đòi hỏi thời

g ia n
 
tính
 
cờ
 
0
 
(g(n)),

3.1. Tìm kẼếm theo chiểu sâu trên đồ thị

Ý
 
tưởng ch ín h củ a thuật toán
 
có
 
thể trình bày như sau. Ta sẽ bắt đầu lìm
 
k iếm từ m ột

đỉnh
 
nào đó của đồ thị. Sau đó chọn
 
u
 
là một đỉnh tuỳ ý kề với
 
và lạp lại quá trình
đối với
 
u. ở
 
bước tổng quát, giả sử ta đang xét đỉnh
 
V.
 
Nếu như trong số các đỉnh kề với

V
 
tìm được
 
đ ỉ n h
 
w
 
l à
 
chưa được xét
 
t h ì
 
t a
 
s ẽ
 
xét
 
đ ỉ n h
 
này
 
( n ó
 
s ẽ
 
trở thành
 
đ ã
 
x é t )
 
v à
 
b ắ t

đầu từ nó ta sẽ tiếp tục quá trình tìm k iếm , C òn nếu như k h ôn g cò n đỉnh nào kề với V là

chưa x é t thì ta sẽ n ói rằng đỉnh này là đã d u yệt x o n g và q u ay trở lại tiếp tục tìm k iếm từ

đỉnh
 
m à
 
trước
 
đ ó
 
t a đ ế n
 
được đỉnh
 
V ( n ế u
 
V =
 
Vy. t h ì k ế t t h ú c
 
t ì m
 
kiếm).
 
C ó
 
t h ể
 
n ó i n ô m

na là tìm k iếm Iheo chiểu sâu bắt đầu từ đỉnh V được thực hiện trên cơ sở tìm k iếm theo

chiểu sâu từ tất cả các đỉnh chưa xét kề với
 
V.
 
Quá trình này có thể mô tả bởi thù tục đệ

qui sau đây.

procedure DFS(v);

Tìm kiếm theo chiều sâu bắt đẩu từ đỉnh
 
v;

Các biến Chuaxet, Ke là biến toàn cục

begin

Thăm_đỉnhịv);

Chuaxet
 
[v]: =false;

fo r
 
u e K e (v )
 
do

if
 
Chuaxet[u]
 
then
 
DFS(u);

end;
 
đỉnh
 
V
ỉà đã duyệt xong
 
*
 
j

K hi đ ó , T im k iếm theo chiều sâu trên đ ồ thị được thực h iện nhờ thuật toán sau:

BEGIN

("*
 
Initialization

fo r
 
V
 
e V
 
do C huaxetfv]:=true;

fo r
 
V
 
e V
 
do

i f
 
Chuaxetịv] then
 
DFS(v);

END.

176

Chươf];^ 3. T ìiìì k i c n ỉ
 
ỉ r c ỉ i LỈỒ l l i ị
 
va
 
ÍOỈÍỈ
 
c ỉụ iìíỉ

Rõ ràng lệnh gọi DFS(v) sẽ cho phép đén thăm tủt ca cấc đinh thuộc cùng thành phần
liên thỏng với đỉnh
 
V,
 
bởi
 
vì
 
sau khi Ihăin đỉnh
 
là
 
lệnh
 
gọi
 
đến thủ tục DFS đối với tấl cả
các đỉnh kề với nó. Mặt khác,
 
d o
 
mỗi khi ihãm đỉnh
 
V
 
x o n g ,
 
biến Chuaxet[v] được đặl
lại giá trị
 
ýaỉse
 
nên mỗi đỉnh sẽ được thăm đúng một
 
lần.
 
Thuật toán lần lượt sẽ tiến
hành tìm kiếm từ các đỉnh chưa được
 
ih ã ĩT i,
 
vì vậy, nó sẽ xél qua tất cả các đỉnh của đồ
thị (không nhất thiết phải
 
là liên
 
thông).

Để đánh giá độ
 
Ị3hức
 
tạp tírlì toán cúa thủ tục, trước hết nhận thấy rằng số phép
toán cần thực hiện trong hai chu trình của ihuật toán (hai vòng for ở chương trình chính)
là cỡ
 
n.
 
Thủ tục DFS phải thực hiện không quá
 
n
 
lán. Tống số phép toán cần phải thực
hiện trong các thủ tục này là
 
do trong các thủ tục này ta phải xét qua tất cả các

cạnh và các đỉnh của đổ thị. Vạy độ phức tạp tính toán của ihuật toán là
 
0{n-\-m).

T hí dụ
 
1, Xét đổ thị cho trong hình 1. Các đỉnh của nó được đánh số lại theo thứ tự
chúng được thãm theo thủ tục tìm kiếm Iheo chiều sâu mô tả ở trên. Giả thiết rằng các
đính trong danh sách kề của đỉnh
 
(Kc(v)) được sắp xếp theo thứ tự tăng dần của chỉ

số .

3(9)

H ình 1. Chỉ số mới (irong ngoạc) của các đỉnh
 
được đánh lại theo thứ
 
tự
chúng được thăm trong thuật toán tìm kiếm theo chiều sâu

Thuật toán tìm kiếm theo chiều sâu trên đồ thị vồ hưcíĩig trình bày ở trên dễ dàng có
thể mô tả lại cho đồ thị có hướng. Trong trường hợp đồ thị có hướng, thủ tục DFS(v) sẽ
cho phép thăm tất cả các đỉnh
 
ti
 
nào mà từ
 
V
 
có đường đi đến
 
u.
 
Độ phức tạp tính toán
của thuật toán là 0 (a2+/?í).

3.2. Tìm kiếm theo chiểu rộng trên đồ thị

Để ý rằng trong thuật toán tìm kiếm theo chiều sáu đỉnh được thăm càng muộn sẽ càng
sớm trở thành đã duyệt xong. Điều đó là hệ quả tất yếu của việc các c nh được thăm sẽ

177

PỊỉản 2.
 
L
ý
 
t l u i x c t
 
dó lliị

được kê't nạp vào trong ngăn x ếp (ST A C K ). T im
 
kiếm
 
theo ch iều rộng trên d ồ ih ị, nếu

nói m ột cách ngắn g ọn , được xây dựng dựa trên cơ sở thay thế ngăn xếp (ST A C K ) bởi

hàng đợi (Q U E U E ). V ớ i sự cải biên như vậy, đỉnh được thăm càn g sớm sẽ càn g sớm trở

thành
 
đã
 
duyệt
 
xon g
 
(tức
 
là c à n e
 
sớm
 
dời
 
khỏi
 
hàng
 
đ ợ i).
 
M ột đỉnh
 
sẽ
 
Irở thành
 
đã

duyệt x o n g
 
n gay sau khi la xét xon g tất cả cá c đinh kề (chưa được thăm ) với
 
nó. Thủ

tục có thế m ô tá như sau:

procedure BFSịv):

Tìm kiếm theo chiều rộnọ, ỉ?ắĩ đầu từ đỉnh
 
v;

Các hiéh Chuaxet, Ke
 
là biến toàn cục

heí^in

QU EU E:= 0;

QUEUE <^v;
 
Kéì nạp
 
V
 
vào QUEUE

Chuaxeĩị
 
]: =faỉse;

while
 
QUEUE ^
 
0
 
do

begin

p
 
QUEUE;
 
Lấy p từ QUEUE

Thăm_đỉnhip);

fo r
 
L
i
 
eK e(p )
 
do

if
 
Chuaxet
 
Ị
 
uj
 
then

begin

QUEUE
 
Cr
 
u;
 
Cìm axeĩlii]:-false;

end;

end;

end;

Khi đ ó, T im kiếm theo ch iều rộng trên đổ ih ị được thực h iên nhờ thuật toán sau:

BEGỈN

Initialization

fo r
 
V
 
e V
 
do ChtỉaxefỊvỊ:=tnie;

fo r
 
V
 
e V
 
do

if
 
Chuaxet[v] then
 
BFSịv);

END.

Lập luận tương tự như trong thủ tục
 
tìm
 
k iếm
 
ih eo
 
ch iều
 
sâư, c ó
 
thể ch ỉ
 
ra được

rằng lệnh g ọ i B FS(v) sẽ ch o phép đến thăm
 
tất cả các đỉnh th u ộc cù n g thành phần liên

thông với đỉnh
 
V,
 
và m ỗi đỉnh củ a đổ thị sẽ được thãm đúng m ột lần. Đ ộ phức tạp lính

toán của thuật toán là 0 (/7 + w ).

T hí dụ 2,
 
X ét đổ thị trong hình 2. Thứ tự thăm đỉnh của đ ồ thị này theo thuật toán tìm

kiếm theo ch iều rộng được gh i trong ngoăc.

178

Cììưoiìiị 3. Tìm kicnì frén dỏ
 
iỉìỊ
 
và ửỉìi; d n n i’

8 (1 3 )

Hình
 
2 . Chỉ số m ới (trong ngoặc) của các đinh được đánh lại th eo thứ tự

chúng được thăm trong thuật toán lìm kiếm th eo ch iều sâu

3.3. Tìm đường đi và kiểm tra tính liên thông

T rong m ụ c này ta xét ứng dụng các thuậl toán tìm kiếm m ô ta trong cá c m ục trước vào

v iệc giãi hai bài toán cơ bân trẽn đồ thị: bài toán tìm đường đi và bài toán về xác định

các thành phần liên thông cúa đổ thị.

a) Bài toán tìni đường đi giừa hai đính:
 
Giả sử s vù ĩ lủ hơi đỉnh nào dó của dồ thị.

Hây tìm cíưìyng đi từ s dến ỉ.

N hư trên đã
 
phân lích,
 
thủ tục
 
DFS(ố) (BFS(.v)) sẽ ch o
 
phép ihăm
 
lất cả cá c đỉnh

thuộc cù n g m ột thành phần liên thônụ với .V
. Vì vâỵ, sau khi thưc h iện x o n g thủ tục, nếu

C huaxel[/]=truc»
 
thì
 
điều
 
ctổ có
 
nghĩa
 
là kh ốn g c ó
 
đưctiig đi
 
từ
 
s
 
đến
 
/, còn
 
nếu
 
Chua

x e t[/]= fa lse Ihì
 
ĩ
 
thuộc cùng ihành phấn liên thống với
 
.V,
 
hay nói m ột cách khác: tổn tại

đường đi từ
 
đến
 
t.
 
Trong trường hợp tổn
 
lại đường đi, đc gh i nhận đường đi, ta dùng

ih êm
 
biến T ru o c[\’] đế ghi nhận đinh (li trước đính
 
V
’
 
trong đường đi tìm kiếm từ
 
s
 
đến V
’.

Khi đó, đ ố i vớ i thủ tục D F S(r) cán sửa sửa đối câu lệnh
 
if
 
irong nó như sau:

if
 
Chỉiơxeĩlưl
 
then

hc^in

TriiOcịiil :-v ;

DPSịii);

end:

Còn
 
đối với thủ tục B F S (\’) cẩn sửa sửa đổi câu lệnh
 
if
 
Irong nó
 
như sau:

if
 
CỉuiaxetỊii/
 
íhen

hei^in

QUEUE
 
Cr
 
u: CỉỉncỉxetluỊ:=faỊse;

Triiocliiì :=p:

end:

179

Phcin 2. L ý ĩiiu y ế ĩ dổ th ị

Đ ư ờng đi cần tìm sẽ được k h ôi phục theo quy tác sau:

t
 
^
 
p ỉ:-T r iio c [ĩì ^
 
p2:=Tỉ'uoc[pĩI
 
. .
 
< -s .

C hú ý:
 
Đường đi tìm được theo thuật toán lìm kiếm theo chiều rộng là
 
đưòĩỉg đi ngắn

nhất
 
(theo số cạnh ) từ đỉnh ^ đến đỉnh /. Điều này suy trực tiếp từ thứ tự ihàm đỉnh theo

thuật toán tìm k iếm th ec ch iều rộng.

b) Tìni
 
các
 
th à n h
 
phần liên thòng của đổ thị:
 
Hãy cho biếĩ đó thị gồm hao nhiêii

íhcinh phẩn liên thông và từng thành phấn liên thông của nó ỉà gồm những đỉnh nào.

D o thủ tục D F S (s)
 
(B F S (s))
 
ch o phép thảm
 
tất cả các đỉnh ih u ộ c cù n g
 
m ột thành

phần liên thỏne với
 
s.
 
nên số thành phần liên thông của đổ Ihị chính bằng số lần gọi đến

thủ lụ c này. V ấn đề cò n lại là cách ghi nhận cá c đỉnh trong từng thành phần 'iên thông.

Ta dùng thêm biến
 
ĩndex[v]
 
để ghi nhận chỉ số của thành phần liên thông chứa đỉnh V
,
và dùng thêm biến
 
Ĩnconnecĩ
 
để đếm sô' thành phần liên thông (biến này cần được khời

tạo g iá trị là 0 ). Thủ tục T h ăm _đ ỉn h (v) trong các thủ tục D F S (v) và B F S(v) c ó n h iệm
 
vụ

gán:
 
ỉn d e x Ịv ]:- ỉnconnect,
 
còn câu lệnh
 
if
 
trong các chưong trình chính gọi đến các

thủ tục này cần được sửa lại như sau

Ĩnconnecĩ:=
0
 
;

if
 
ChuaxetỊvị
 
then

begin

ĩnconnect:-ỉnconnect+ l;

DFS(v);
 
(*BFS(v)

end;

K ết thúc
 
v ò n g
 
lặp
 
thứ hai trong
 
chương trình chính,
 
In con ect ch o
 
s ố
 
thành
 
phần
 
liên

thống của đổ thị, còn biến mảng
 
Index[v],
 
\
 
e V
 
cho phép liệt kê các đỉnh thuộc cùng

m ột thành phần liên th ôn g.

C iư ơ n g trình trên P A S C A L g iả i hai bài toán n ói trên
 
c ó thể viết như sau.

{ C H Ư O N G TRỈNH TIM D U O N G Dí V A KIEM TRA TINH LIEN T H O N G

T H E O C A C T H Ư A T T O A N TIM KIEM TR E N D O THI

u ses crt;

var

a
 
: a rra y [1 ..2 0 ,1 ..2 0 ] o f
 
byte;

Q U E U E , C h u axet, T ruoc
 
: array[1..20] o f
 
byte;

i,j,n ,S o lt,k ,s,t
 
: integer;

stop
 
: b oolean ;

ch
 
: char;

180

Chương 3. T im kicm Ịvèn dồ íỉìị Vcí ứng dunịị

p n cedttre Nhapsolìeu;

begin

write('Cho so dinh cua do thi:');readỉn(n);
writeln('Nhap so lieu ma tran ke:');
for i:=l to n do
begin
for j:= i+1 to n do
begin

vvriteC
 
read(a[i,j]); a[j,i]:=a[i,j];

end;

a[i,i]:=0; writeln;
end;
end;

procedure ReadFUe:

var
 
f;text;
 
fn:string;
begin

write('Cho ten file du lieu:');readln(fn);
assign(f,fn);reset(f); readln(f,n);
writeln('Nhap so lieu ma tran ke:');
for i:=l to n do
for j:= l to n do read(f,a[ij]);
close(f);
end;

procedure Insolicu:

begin

writeln('Ma tran ke:’);
for i;=l to n do
begin

for j:= l to n do write(a[i,j]:3); writein;
end;
end;

procedure Ketqualienthong:

begin
Insolieu;

if Solt=l then writein('Do thi la lien thong')

else

begin

wriîeln('So thanh phan lien thong cua do thi la: ',Solt);

181

Phcỉn
 
2.
 
L ý thuyết đ ồ ílìị

for i;=l to Solt do
begin

writeln(Thanh phan lien Ihong thu ',i , ' gom cac dinh:');
for j:= l to n do if Chuaxet[j]=i then write(j:3); writeln;
end;
end;

write(’Go Enter de tiep tuc...’#7);readln;
end;

procedure BFS(i:integer);

Tìm kiếm theo chiều rộng bắt đầu từ đỉnh i

var u, dauQ, cuoiQ: integer;
begin
dauQ :=l; cuoiQ:"=ỉ,
Q U E Ư E[cuoiQ ]:-i;C huaxet[i]~Solt;
while dauQ
 
cuoiQ do
begin

u:=QUEUE[dauQ]; dauQ;=dauQ +l;
for j:= l to n do
if (a[uj]=l)and(C huaxet|j]= 0) then
begin

cuoiQ :=cuoiQ +l; QUEUE[cuoiQ]:=j;

Chuaxet[j]:=Solt;
 
TruocỊj]:=u;
end;
end;

end; { o f procedure BPS }

procedure DFS(v: integer);

Tim kiếm theo chiều sâu bất đầu từ đỉnh
 
V

var u:integer;
begin
Chuaxet[v]:=Solt;
for u:=l to n do
if (a[v,u]=I )and(Chuaxet[u]=0) then
begin
Truoc[u]:-v; DFS(u);
end;
end;

procedure Lienĩhong:

begin
{ Khoi tao so lieu }

182

C h U o 'n g 3.
 
T i m
 
kic'm f r c n
 
d o
 
t h i
 
va ifn;^ d i t n ^

for j:= l to n do Chuaxet[Jl;-();
 
Solt-4);

for i ~ l to n do
if Chuaxet[i]=0 then
begin

Solt:=Solt+l;

{BFS(i);}DFS(i);

end;

Ketqualienthong;

end;

p ro c e d u re Ketquaduongdi:

begin

if Truoc[t]=0 then
 
writein('Khong co duong di tu ',s,' den ',t)

else

begin

writeln('Duong di tu ',s,' den ',t,' la:');
j:-t;

write(t,' < =
 
');
while Truoc[j]<>s do
begin

\vnte(Truoc[j],'
 
');
j:=TruocO];
end;

writeln(s);

end:

write('Go Enter de tiep tuc...'#7);readln;
end;

p r o c e d u r e Duongdi;

begin
Insolieu;

writeC Tim duong di tu dinh: ');
 
readln(s);
writeC
 
den d in h :'); readln(t);

for j:= l to n do
 
{ Khoi tao so lieu }
begin

Truoc[j]:=0; Chuaxet[j]:=0;
end;

Solt:=l;B FS(s);
 
{ DFS(s); }

Ketquaduongdi;

end;

183

Phẩn 2. Lý ĩhuyếí đổ íhị

p ro ce d u re Menu:

begin
cỉrscr;

w riteln (’
 
TIM DUONG DI V A K IEM T R A TINH LIEN TH ONG');
w riteln (’
 
C U A DO THI THEO TH U AT TO AN TỈM K IEM TR EN DO TH I’);
w riteln('
 
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = 1 = = = = ') ;

writeln('
 
1. Nhap so lieu tu ban phim.');

writeln('
 
2. Nhap so lieu tu file.');

writeInC
 
3, Kiem tra tinh lien thong.');

wriíeln('
 
4. Tim duong di giua hai dinh.');

writeln{'
 
5. Thoat.');

writeln('
 
.................
 
-
 
...............................
 
-..............................');

write
 
('
 
Hay go phim so de chon chuc nang...'#7);
ch:=readkey;wriíeln(ch);
end;

{ Main program }

BEGIN
repeat
Menu;
case ch of
'1' : NhapsoHeu;

'T
 
: ReadFile;

'3’ : Lienthong;

'4 ': Duongdi;
end;

until ( c h - 5') or (upcase(ch)-Q ');
END.

184

Chươỉii^ 3. Tìm kil'h] iri'/i
 
dỏ ỉììị V') lOỉi^ dnnỉỉ

Bài tập

1. Giả sử đồ thị
 
G -
 
(V.E)
 
được cho bởi danh sách kc. Hã\' viết thủ tục loại bỏ cạnh
(//.v), thêm cạnh
 
(x,y)
 
vào đồ thị.

2. Thủ tục sau đây cho phép duyệt qua tất cả các đính của đổ thị được cho bởi danh sách
kề:

procedure Find(x);
begin

Thamdinh(x);
 
Clìuatham[x]:-
 
Đà íháìĩK

while
 
(Trong V còn đình đ à ĩhởm)
 
do

begin

v:=
 
đỉnh đã thăm new
 
đ ó :

i f
 
(Tìm được đỉnh chưa thăm
 
u e Ke(\ ) ) then

begin

u;=
 
đỉnh chưa thám đáu ĩiên ĩrong Ke(\')\

Thamdinh(u);
 
Chuatham[u]:=
 
Đ ã ĩhăm\

end

else
 
Chuatham[v]
 
Đ ã duyệt .xong;

end;

end;

BEGIN

for
 
V
 
G
 
V
 
do
 
Chuatham[v]:-Chưa thàm;

for
 
V
 
e
 
V
 
do

if
 
(Chualham[v]= C Z / z / ' t / l l i c n
 
I’ind(v);

END.

Hãy chỉ ra rằng
 
cả hai Ihủ tục tìiĩì kiếm theo chiều
 
sâuvàlìmkiếm
 
theo chiều rộng

đều có thể xem như
 
trường hợp riêng của Ihủ lục này. Viếlchương trình
 
trên
 
PASCAL

thực hiện thuật toán mô tả ở trên.

3.
 
Áp dụng thủ tục tìm kiếm theo chiều sâu tìm tất cả các cầu trên đồ thị vô hướng.
(Cầu là cạnh mà việc loại bỏ nó làm tăng số thành phần liên thông của đồ thị).

4.
 
Áp dụng thủ tục tìm kiếm theo chiều sâu kiếm tra xem đồ thị có hướng
 
G = ( y A )
 
có
chứa chu trình hay không?

5. Cho một bảng ô vuông gồm
 
m
 
X
 
// ô, ô nằm trên dòng / cột
 
j
 
gọi là ô (/j) , / = 1, 2,,..,

m ,j
 
= 1, 2,..., n. Trong
 
iT ìồ i
 
ô (/,7) của nó ta viết một số a[i,j] e (0,1}. Từ một ô nào đó
ta chỉ có thể di chuyển sang ô chứa số 1 cổ chung cạnh với nổ . Giả sử
 
cho ô
 
(p, q)
 
là ô

185

Phẩn
 
2. Lv
 
ĩ h ỉiy ế t đ ồ th ị

xuất phát, hày viết chương trình tìm xem có cách di chuyển từ ô này ra một ô ở mép của
bảng hay không?
 
(Ô (//, v) gọi là ô ở mép bảng nếu hoặc là // = 1, hoặc là
 
li
 
=
 
m,
 
hoặc

là
 
V
 
= 1, hoạc
 
l à
 
V
 
=
 
n ) .

6.
 
Cho một bảng ô vuông gồm
 
m
 
X
 
/? ô, ô nằm trên dòng
 
ị
 
cột
 
j
 
gọi là ô (/j) , / = 1, 2,...,

m ,j =
 
1, 2,...,
 
n.
 
Trong mỗi ô
 
ụ ,j)
 
của nó ta viết một số
 
a[i,j] e (0,1}. Hãy viết chương
trình đếm số
 
miển con toán 0
 
của bảng. Ví dụ số
 
miển con toàn 0
 
của bảng kích thước
5x5 được chỉ ra trong hình sau đâv

1
 
1 [Õ ~ Õ

1
 
1

0
 
0

1
 
1

1
 
l

7.
 
Có N người kỉiách (N < 100) mang số hiệu từ 1 đến N. được mời đến dự tiệc. Giữa
họ có một số người quen biết nhau. Dữ liệu về mối quan hệ quen biết này được cho
trong một file văn bản có tên ià KHACH.DAT có cấu trúc như sau: Dòng đầu tiên của
nó chứa số lượng khách mời N. Mỗi dòng thứ i trong số N dòng liếp theo chứa số hiệu
của các người quen của khách i, các số hiệu được ghi cách nhau bởi ít nhất một dấu
cách.

Người ta muốn xếp các khách này vào các phòng tiệc, sao cho hai khách ở trong cùng
mộl phòng hoặc là quen biết nhau hoặc là có thể làm quen nhau thông qua những người
quen biết trung gian của họ.

Viết chương trình nhập dữ liệu vào từ file, sau
 
đó tìm cách phân khách vào các
phòng tiệc sao cho số phòng phải sử dụng là lì nhất. Kết quả phân công đưa ra một file
văn bản, dòng đầu tiên chứa số phòng tiệc cần sử dụng K, mỗi dòng thứ i trong sô' K
dòng tiếp theo ghi số hiệu của khách xếp vào phòng tiệc i.

8.
 
Bản đồ giao thông được cho bởi n nút giao thông đánh số là 1, 2,..., n và hệ thống
gồm m đoạn đường Eị, Ej,...,
 
mỗi đọan nối 2 trong số n nút giao thông nói trên. Bản
đồ giao thông được gọi là liên thông đơn nếu giữa hai nút giao thông bất kỳ chỉ có đúng
một đường đi nối chúng. Dữ liệu cho trong file văn bản có tên GT.DAT, dòng đầu tiên
chứa các số n, m, hai số ghi cách nhau bởi đấu cách. Mỗi dòng i trong số m dòng tiếp
theo chứa số hiệu hai nút giao thông được nối bởi đoạn đường E|.

Viết chương trình nhập dữ liệu vào từ file sau đó thông báo xem bản đổ có phải là
liên thông đcm hay không. Trong trường hợp bản đồ là không liên thông đơn hãy tìm
cách xây dựng bổ sung và loại bỏ một số đoạn đường để cho bản đồ là liên thỏng đơn và
sao cho số đoạn đường phải xây dựng bổ sung là ít nhất. Các kết quả đưa ra màn hình.

186

Chương 4. í)ồ thị Euler và cĩó ĩỉiị Hamilton

4

Đổ THỊ EULER

VÀ

ĐỒ THỊ HAMILTON

Trong chưcmg này chúng ta sẽ nghiên cứu hai dạng đổ thị đặc biệt là đồ thị Euler và
đồ thị H am ilton. Dưới đây, nếu khống có giải thích bổ sung, thuật ngữ đồ thị được dùng
để chỉ chung đa đồ thị vô hướng và có hướiig, và thuật ngữ cạnh sẽ dùng để chỉ chung
cạnh của đồ thị vô hướng cũng như cung của đồ thị có hưcmg.

4.1. ĐỒ thị Euler
•

Đ ịn h n g h ĩa 1,
 
Chu trình đơn ĩron^ G đi qua mỗi cạnh của nó m ột lần được gọi là chu

trình Euler. Đường đi đơn trong G
 
đi qua mỗi cạnh của nó m ột lẩn được gọi là đường

đi Euler. Đ ồ thị được gọi là
 
đồ thị Elder
 
néìi nỏ có chu trình Euler, và
 
gọi là đồ thị

nửa E uỉer nếu nó có đườììg đi Euler.

/

Rõ ràng m ọi đồ thị E uler luôn là nửa Euler, nhưng điều ngược lại không luôn đúng.

187

Phân 2
 
.
 
Lý thuyết đổ thị

T h í d ụ 1, Đ ồ Ihị G | trong hình 1 là đổ thị E uler vì nó có chu trình Euler
 
a, e, c, d, e, h,

a,
 
Đ ồ thị G 3 không có chu trình E uler nhưng nó có đường đi E uler
 
a, c, d, e, h, d, a, h,

vì th ế G 3 là đồ thị nửa Euler. Đ ồ thị G 2 khổng có chu trình cũng như đường đi Euler.

a
 
h
 
a
 
h
 
a
 
b

d
 
c

Ơ
 
2

H ìn h 1.
 
Đ ồ thị G |, Gj. ơ ,

T h í d ụ 2. Đ ồ thị
 
H
 
2
 
trong hình 2 là đổ thị E uler vì nó có chu trình E uler
 
a, h, c, d. e, a.

Đ ổ thị
 
không có chu trình E uler nhưng nó có đường đi E uler c,
 
a, b, c, d, h
 
vì th ế
 
/y,
là đồ thị nửa E uler. Đồ thị // , không có chu trình cũng như đường di Euler.

a
 
h
 
a
 
h
 
c
 
a

a

\
 
K
----------------

>
----------------^

K
 
"
----------------
d
 
b

H
 
2

H ìn h 2.
 
ĐỒ t h ị
 
/ / „
 
/ / 2
 
, / / 3

Đ iểu kiện cần và đủ
 
để m ột đồ thị là m ột đồ thị E uler được E uler tìm ra vào năm
 
1736
khi
 
ông
 
giải
 
quyết
 
bài
 
toán
 
hóc
 
búa
 
nổi
 
tiếng
 
thời
 
đó
 
về
 
bảy
 
cái
 
cầu
 
ở thành
 
phố
K önigsberg, và đ ây là định lý đầu tiên của lý thuyết đồ thị.

Đ ịn h
 
lý 1 (E u le r).
 
Đ ồ thị vô hướng liên thông G là
 
đồ thị E uler khi và chỉ khi m ọi

đỉnh của G đều cỏ bậc chẵn.

Đ ể chứng m inh định lý trước hết ta chứng m inh bổ đề:

Bổ đề.
 
N ếu b ậ c của m ỗi đỉnh của đ ổ thị G không nhỏ hơn 2 thì G chứa chu trình.

C h ứ n g m in h . N ếu G có cạnh lặp thì khẳng định của bổ đề là hiển nhiên. Vì vậy g iả sử
G là đcíri đồ thị. G ọi
 
V
 
ià m ột đỉnh nào đó của G. Ta sẽ xây dựng theo quy nạp đường đi

188

Chương 4. Đồ thị Euler
 
t’
à
 
đồ thị Ham ilton

trong đó V, là đỉnh kề với
 
còn với / > 1 chọn i’,+| là ké với V
, và
 
5
Ế v,,| (có thể chọn
như vậy là vì
 
deg{Vị) >
 
2). Do tập đỉnh của G là hữu hạn,
 
nên sau m ột số hữu hạn
bước ta phải quay lại m ột
 
đỉnh đã xuất hiện trước đó. Gọi đỉnh đầu tiên như th ế là v^.
Khi đó, đoạn của đường đi xây dựng nằm giữa hai đỉnh
 
là 1 chu trình cần tìm .

C h ứ n g m in h đ ịn h lý.

C ầ n .
 
Giả sử
 
G
 
là đồ thị E uler tức là tồn tại chu trình Euler
 
p
 
trong
 
G.
 
K hi đó cứ m ỗi
lần chu irình
 
p
 
đi qua
 
1 đỉnh nào đổ của
 
C
r
 
thì bậc của đỉnh đó tàng lên 2.
 
M ặt kliác
m ỗi cạnh của đồ thị xuất hiện Irong
 
F
 
đúng 1 lần, suy ra mỗi đính của đồ thị đều có bậc
chẵn.

Đ ủ.
 
Quy nạp theo số cạnh của
 
G.
 
Do
 
G
 
liên thông và
 
deg{v)
 
là số chẵn nên bậc của
m ỗi đỉnh của nó không nhỏ hơn 2. Từ đó theo bổ đề
 
G
 
phải chứa
 
chu trình c . N ếu c
 
đi
qua tất cả các cạnh của
 
G
 
thì nó chính là chu trình Euler. Giả sử c
 
không đi qua tất cả
các cạnh của
 
G.
 
Khi đó loại bỏ khỏi
 
G
 
tất cả các cạnh thuộc c
 
ta thu được
 
1 đồ thị mới

H
 
(không
 
nhất thiết là liên thông). Số cạnh trong
 
H
 
nhỏ hơn trong
 
G
 
và rõ ràng m ỗi
đỉnh của
 
H
 
vẫn có bậc là chẩn. Theo giả thiết quy nạp trong m ỗi thành phần liên thông
của
 
H
 
đều tìm được chu trình Euler. Do
 
G
 
là liên thông nên mỗi thành phần trong
 
H
 
có
ít nhất 1 đỉnh chung với chu trình c . Vì vậy, ta có thể xây dựng chu trình E uler trong
 
G

như sau;
 
Bắt đầu từ m ột dỉnh nào đó của chu trình c , đi theo các cạnh của chu trình
 
c

chừng nào chưa gặp phải đỉnh không cô lập ciía
 
H.
 
Nếu gặp phải đỉnh n hư vậy thì ta đi
theo chu trình E uler của thành phần liên thông của
 
H
 
chứa đỉnh đó. Sau đó lại tiếp tục
đi theo cạnh của c
 
cho đến khi gặp phải đỉnh không cô lập của
 
H
 
thì lại theo chu trình
E uler của thành phần liên thông tương líìig trong
 
H
 
v.v... (xem hình 3). Q uá trình sẽ kết
thúc khi ta trở về đỉnh xuất phát, tức là thu được chu trình đi qua m ỗi cạnh của đồ thị
đúng m ột lần.

189

Phần 2. Lý thuyết đồ thị

H ệ q u ả 2.
 
Đ ồ thị vô hướnẹ liên thôn^ G là nửa E uler khi và ch ỉ khi
 
nó có klìôiì^ quá 2

đỉnh bậc lẻ.

C h ứ n g m in h . Thực vậy nếu G có không quá 2 đỉnh bậc lẻ thì sô' đỉnh bậc lẻ của nó chỉ
có thể là 0 hoặc 2. N ếu G không có đỉnh bậc lẻ thì theo định lý 1 nó là đồ thị Euler. Giả
sử G có hai đỉnh bậc iẻ là
 
u
 
và
 
V.
 
Gọi H là đồ thị thu được từ G bằng cách thêm vào G
m ột đỉnh mới vv và hai cạnh
 
(w,u)
 
và (M^v). Khi đó tất cả các đỉnh của H đều có bậc là
chẩn, vì th ế theo định lý 1 nó có chu trình E uler
 
c.
 
Xoá bỏ khỏi chu trình này đỉnh vv và
hai cạnh kể nó ta thu được đường đi Euler trong đổ thị G.

G iả sử G là đổ thị Euler, từ chứng m inh định lý ta có thủ tục sau để tìm chu trình
Euler trong G.

p ro c e d u re E u le r
 
C ycle;

begin

STACK := 0
 
;
 
CE := 0
 
;

Chọn
 
u
 
!à m ột đỉnh nào đó của đồ thị;

STACK <=
 
u;
while STACK
 
^ 0
 
do

begin

x:= top(STACK);
 
(*

.X
 
là phần tử
 
ở đầu ST A C K *)

if
 
K e ( x ) ỹ t0
 
then

begin

y;=
 
đỉnh đầu tiên trong danh sách K eịx);

STACK
 
c=
 
y;

(*
 
L oại bỏ cạnh (x,y) khỏi đ ồ thị
 
*)

K e(x)
 
K e(x) \
 
(y I : K e(y) := K e(y) \
 
{X};

end
 
else

begin
 
X
 
<=
 
STACK;
 
CE <= x:
 
end;

end;

end;

G iả sử
 
G
 
là đồ thị Euler, thuật toán đơn giản sau đây cho phép xác định chu trình E uler
khi làm bằng tay.

T h u ậ t to á n F lo r

Xuất phát từ 1 đỉnh
 
u
 
nào đó của
 
G
 
ta đi theo các cạnh của nó 1 cách tuỳ ý chỉ cần tuân
thủ 2 quy tắc sau:

190

Chương 4. Đồ thị Elder và đổ tlìị Hamilton

i) Xoá bỏ cạnh đ ã di qua và dóiĩịĩ thời xoá cả nhữnịị đỉnh cô lập tạo thành.

ii)
 
ở m ỗi bưcỉc ta c h ỉ đi qua cầu khi khõns, còn cách lựa chọn nào khác.

C h ứ n g m in h tín h đ ú n g đ ắn củ a th u ậ t toán. Trước tiên ta chỉ ra rằng thủ
 
tục trên có
thể thực hiện được ở mỗi bước. Giả sử ta đi đến một đỉnh
 
V
 
nào đó,
 
khi đó nếu
 
V
 
TÍ Mthì
đồ thị con còn lại
 
H
 
là liên thông và chứa đúng hai đỉnh bậc lẻ là
 
V
 
và
 
u.
 
Theo hệ quả
trong H có đường đi Euler p từ
 
V '
 
đến u.
 
Do việc xoá bỏ cạnh đầu tiên của đường đi p
khống làrn m ất tính liên thông cảa h , lừ đù sa> ra tnủ tục co tnế thực liiện ở mỗi bước.
Nếu
 
V = II
 
thì lập luận ở trên sẽ vần đúng chm g nào văn còn cạnh kề với
 
u.

N hư vậy chỉ còn phải chỉ ra là thủ lục trên dẫn đến đường đi Euler. Thực vậy trong

G
 
không thể còn cạnh chưa đi qua khi inà ta sử dụng cạnh cuối cùng kề với
 
u
 
(trong
trường hợp ngược lại, việc loại bỏ
 
1 cạnh nào đó kề với 1 trong sô' những cạnh còn lại
chưa đi qua sẽ dẫn đến một đổ thị không liên thông, và điều đó là m âu thuản với giả

t h i ế t
 
i i ) ) .

Chứng m inh tương tự như trons định lý 1 ta thu được kết quả sau đây cho đồ thị có
hướng.

Đ ịnh lý 2.
 
Đ ồ thị có hướng liên thòng mạnh là đồ thị Euler khi và c h ỉ khi

deg*(v) = deg^(v),
 
V v eK .

4.2.
 
Đổ thị Hamilton
•

Trong m ục này chúng ta xét bài toán tưcmẹ tự như trong mục trước chỉ khác là ta quan
tâm đến đường đi qua tất cả các đỉnh của đổ thị, mỗi đỉnh đúng m ột lần. Sự thay đổi
tưởng chừng như là không đáng kể này trên thực tế đã dẫn đến sự phức tạp hoá vấn đề
cần giải quyết.

Đ ịnh n g h ĩa 2.
 
Đ ường di qua tất cả các (lỉnh của đồ thị mỗi dỉnh đúng m ột lần được gọi

lờ dường đi H am ilton. Chu trình hắt đầu từ m ột đỉnh
 
V
 
nào đó qua tấ t cả các đỉnh còn

lại m ỗi đỉnh đúng m ột lẩn rồi quay trở về
 
V
 
được gọi là chu trình H am ilton. Đ ồ thị G

được gọi là đ ồ thị H am ilton nếu nó chứa chu trình Hamilton, và gọi là nửa H am ilton

nếu nó chứa đường đi H amilton.

R õ ràng đồ thị H am ilton là nửa Hamilton, nhưng điều ngược lại không luôn đúng.
T h í
 
dụ
 
3. Trong
 
hình
 
3: G,
 
là Hamilton, Ơ2 là nửa Hamilton
 
còn
 
G|
 
không
 
là nửa
H am ilton.

191

Phẩn 2. Lý thuyết đồ thị

G,
 
G
 
2
 
G ,

H ìn h 3. Đồ thị H am ilton
 
G ị
 
, nửa H am ilton Ơ 2 , và G|

Cho đến nay việc tìm m ột tiêu chuẩn nhận biết đồ thị H am ilton vẫn còn là mở, mặc
dù đây là m ôt vấn đề trung tâm của lý thuyết đồ thị. Hơn thế nữa, cho đến hiện nay
cũng chưa có thuật toán hiệu quả để kiểm tra m ột đồ thị có là H am ilton hay không.
Các kết quả thu được phần lớn là các điều kiện đủ để m ột đồ thị là đồ thị H am ilton.
Phần lófn chúng đều có dạng
 
"nếu G có sô'cạnh đủ lớn thì G là H am ilton".
 
M ột kết quả
như vậy được phát biểu trong định lý sau đây:

Đ ịn h lý 3 (D ira k 1952).
 
Đơn đồ thị vô hướng
 
G
 
với n >2 đỉnh, m ỗi đỉnh có bậc không

nhỏ hơn n/2
 
là đồ thị Hamilton.

Chứng mỉnh.
 
Thêm vào đồ thị
 
G
 
k
 
đỉnh mới
 
và nối chúng với tất cả các đỉnh của
 
G.

G iả sử
 
k
 
là số
 
nhỏ nhất các đỉnh cần thêm vào để cho đồ thị thu được
 
G'
 
là đồ thị
H am ilton. Ta sẽ chỉ ra rằng
 
k = 0.
 
Thực vậy, giả sử ngược lại là
 
k > 0 .
 
Ký hiệu
V,
 
p,
 
w
 
......
 
.
 
y

là chu trình H am ilton trong G', trong đó
 
V ,
 
vv là đỉnh của
 
G
 
còn
 
p
 
là m ột trong sô' các
đỉnh mới. Khi đó
 
w
 
không kể với
 
V
 
vì nếu ngược lại, ta không cần sử dụng p và điều đó
là m âu thuẫn với giả thiết
 
k
 
nhỏ nhất. Hơn th ế nữa đỉnh
 
(vv'chẳng hạn) kề với
 
w
 
không
thể đi liền sau đỉnh v ' (kề với v)
 
vì rằng khi đó
 
có thể thay

V —
 
> v '—
> w '—

bởi

V
 
— >
 
v '
 
w
 
w
 
'
 
. . .
 
— >
 
V

bằng cách đảo ngược đoạn của chu trình nằm giữa
 
w
 
và v'. Từ đó suy ra là số đỉnh của
đồ thị ơ ' không kề với
 
w
 
là không nhỏ hoíi số đỉnh kể với nó (tức là ít nhất cũng là bằng

n/2
 
+
 
k),
 
đồng thời số đỉnh của
 
G'
 
kề với
 
w
 
cũng ít ra là phải bằng
 
n!2
 
+
 
k.
 
Do không có
đỉnh nào của
 
G'
 
vừa không kề, lại vừa kể với
 
w,
 
cho nên tổng số đỉnh của đồ thị
 
G' {G

có n + k
 
đỉnh) không ít hcm
 
n
 
+
 
2k.
 
M âu thuẫn thu được đã chứng m inh định lý.

Đ ịnh lý sau là tổng quát hoá của định lý D irak cho đồ thị có hướng:

Đ ịn h lý 4.
 
G iả sử G
 
ỉà đồ thị có hướng liên thông m ạnh với n đỉnh. N ếu

192

C h ư ơ iị í ’ 4. Đ ồ
 
t h ị E it ỉe r và d ồ th ị H a m i ỉ t o n

deg'^{v) > / 7/ 2,
 
dcạ
 
( v ) > « / 2 ,
 
Vv

thì G là Hamilton.

Có
 
m ột số dạng đồ thị m à ta có thể biết khi nào nó là đồ thị H am ilton. M ột ví dụ
như vậy là đồ thị đấu loại.
 
Đ ồ thị
 
dcíu loại
 
là đồ thị có hướng m à trong đó 2 đỉnh bất kỳ
của nó được nối với nhau bởi đúng một cung. Tên gọi
 
dấu loại
 
xuất hiện vì đồ thị như
vậy có thể dùng để biểu diễn kết quả thi đấu bóng chuyền, bóng bàn hay bất cứ m ột trò
chcíi lào Tià không cha pháp hDà. Ta C
C định !v sau.

Đ ịn h lý 5.
 
i)
 
M ọi đổ thi đấu loại ỉà uửa H amilton:

ìi)
 
M ọi đổ rliỊ dấu loại liên rlìôn^ mạnh là H am ilton.

T h í d ụ 4.
 
Đ ồ thị đấu loại D ,,
 
Df, được cho trong hình 4.

D,

H ìn h 4. Đ ồ thị đấu loại
 
D y
 
đấu loại liên thông m ạnh D,

Thuật toán liệt kê tất cả các chu trình Hamilton của đồ thị.

T huật toán sau đây được xây dựng dựa trên cơ sở thuật toán quay lui cho phép liệt kê tất
cả các chu trình H am ilion của đổ thị.

p ro c e d u re H a m ilto n (k );

(*
 
L iệt kê các chu trình H am ilton thu được hằng việc

ph á t triển dãy đỉnh
 
(X Ị1
 
X [k -11)

của đồ thị
 
G=(V , E)
 
cho hỏi danh sách ké:
 
Ke(v),
 
V
 
G
 
V

*)

193

Phẩn
 
2.
 
Lý thuyết đổ thị

begin

for
 
y e
 
K e(X [k -l]) do

if
 
( k = n+1 )
 
and ( y = vO ) then
 
G hinhan(X [l],...,X [n],vO )
else

if
 
C huaxet[y]
 
then
begin

X[k] -
 
y;

Chuaxet[y] ;= false;

H am ilto n (k + l);

Chuaxet[y] := true;

end;

end;

(*
 
M ain Program
 
*)

BEGIN

for
 
V e
 
V
 
do
 
Chuaxet[v] := true;

X [ l ] : = v O ;
 
(*
 
vO
 
là m ột đỉnh nào đó của đồ ihi
 
*)

Chuaxet[vO]
 
false ;

H am ilton(2);

EN D .

V í d ụ 5.
 
H ình 5 dưới đây m ô tả
 
cây tìm kiếm theo thuật toán vừa m ô tả.

2
 
1

v3

H ìn h 5. Đồ thị và cây liệt kê chu trình H am ilton
của nó theo thuật toán quay lui

T rong trường hợp đổ thị có không quá nhiều cạnh thuật toán trên có thể sử dụng dể
kiểm tra xem đồ thị có phải là H am ilton hay không.

194

C liiín 'n ; ^ 4 .
 
i ) ñ
 
i l ì ị i u ỉ ỉ c r
 
v à
 
l í o
 
l ỉ ì ị l ỉ d i u ì ỉ ỉ o i i

Bài tập

1.
 
Chứnu
 
minh
 
rãne
 
đa
 
đồ
 
tỉiỊ có
 
hiiíVrm có dưòìm di
 
Eulcr
 
khi
 
và chi
 
khi
 
nỏ làlièn

ihõnii yếu và bán bậc vào và báii bâc ra cua íáì ca cac dinh là bầim nhau, neoại
 
trừ
 
luii

đinh đặc biệt
 
l i .
 
V
 
ta có

deu*(//) = deu
 
(/0+1. cleu ( V
) = cleuìr)+l

2.
 
a )
 
Với những giá trị nào cua
 
íìì
 
và
 
li
 
dổ íhị hai phía dav đu Ả
',,,
 
.,
 
l;i đồ thị ỉ.ùilci’. đổ thị

nửa E uler?

b) Chứn^ minh răim đổ thị
 
Q,
 
luõn có chu ninh HaiiiiUon.

3 . V ới m ỏ i đ ó thị sau sú d ụ n ií ilìuật toán Fleurv dế đưa ra ch u trình E u le r c ú a đ ồ thị

h oac ch i ra rãnii d ó thị k h ỏn u phai ỉà đ ỏ
 
\h\
 
Euler:

f
 
.

a.

c)

b.

( ề
 
è

ề

4.
 
V iết
 
ch irơ n e
 
trình
 
k ien i
 
tra
 
xcm
 
m ột
 
đ ổ
 
thi
 
c ó
 
là
 
cl6
 
thị
 
E uler,
 
đ ổ
 
thị
 
nửa
 
E u ỉer,
 
và

tronu trườniỉ hợp câu tra lời là kháng đ ịn h , hãy lìm
 
chu
 
trình Euler
 
h o ạ c
 
đ ư ờ n e đi
 
E iiler

troníi đ ổ thị th eo thuật toán m õ tá trone 4 .1 .

5.
 
Viết
 
chương ĩrình
 
kiem
 
ira xem
 
một
 
dỏ thị
 
C() pliai
 
ià đó
 
thị
 
Hamilton,
 
dò
 
t l i Ị
 
nưa
Hamilton hay khổnẹ? ( S ử d ụ n e thuật toán mò tá Ironu 4,2)

6. T ro n e
 
uiãi
 
v ô
 
đ ịch
 
b ón iĩ c h u y ển
 
c ỏ
 
n đ ội
 
đánh
 
sỏ từ
 
1 đ ến
 
n thi đấu
 
v ò n u
 
tròn
 
m ộ l

lượt. K ết quá thi đấu được c h o bới m ột bánu s ố (a [i.j|, i,
 
j ”
 
1 ,2 , .... n ). tr o n
 
<
4
 
đ ó a| i. j |= l

nếu
 
đ ộ i
 
i thãim
 
troim
 
trận
 
uặp đ ội j
 
và
 
a |i,j|= {),
 
troim
 
trư ờ n s
 
họp
 
đ ộ i
 
i thua
 
tro n e
 
trận

uập d ội
 
ị. D ữ liệu
 
vào đư ợ c c h o íronu
 
inột
 
file
 
vãn ban cỏ
 
lên
 
là
 
K Q T D .IN P , d ò n ii dáu

lién
 
ch ứ a
 
s ổ
 
n, cá c
 
clone
 
tiếp
 
iheo
 
chứ a
 
các
 
số
 
a |i,j].
 
i,
 
j = 1 .
 
2
 
.....
 
n. c á c
 
s ố
 
c á c h
 
nhau

195

Phần 2. Lý thuyết đổ thị

bởi dấu cách hoặc dấu xuống dòng. K ết thúc giải, ban tổ chức m uốn mời các đội trưởng
của đội
 
bóng ra xếp thành m ột hàng
 
ngang
 
để chụp ảnh.
 
Hãy tìm
 
cách
 
xếp các
 
đội
trưởng thành m ột hàng ngang
 
sao ngoại trừ hai người đứng ở hai m ép của hàng
 
mỗi
người trong hàng đều đứng cạnh m ột đội trưởng của đội thắng, m ột đội trưởng của đội
thua đội
 
m ình ở trận đấu của giải. K ết quả đưa ra m àn hình: thứ tự đứng các đội trưởng
của các đội trong hàng ngang tìm được.

7.
 
Tim cách viết 9 số 1 ,9 số 2, 9 số 3 thành dãy

ữ |, ^2 ,. ■
■^^21
,

sao cho 27 số có 3 chữ số

a,a,ứ3 ,a ,a 3 a ,,..
là đôi m ột khác nhau.

8.
 
Cho
 
n
 
xâu ký tự S|, Sị,..., S„, m ỗi xâu có độ dài không quá 80 ký tự. Các xâu này
được ghi trong m ột file văn bản có tên là X A U .IN P, mỗi dòng của nó chứa m ột xâu ký
tự nói trên. G iả sử
 
p và Q là hai xâu nào đó trong các xâu đã cho. Ta nói p có thể nối
được với Q nếu ký tự đầu tiên của p là trùng với ký tự cuối cùng của Q. Lập trình kiểm
tra xem có thể nối n xâu đã cho thành m ột xâu theo quy tắc nêu trên hay không.

9. M ột m ạng m áy tính gồm n m áy tính đánh số từ 1 đến n, trong đó có một m áy gọi là
máy chủ được đánh số là 1. H ai m áy trong m ạng có thể được nối với nhau bởi nhiều
hơn một kênh truyền tin. Tất cả có m kênh truyền tin giữa các m áy được đánh số từ 1,
2,..., m. Dữ liệu nối mạng được cho trong m ột file văn bản có tên là N ET.INP, mỗi dòng
của nó chứa thông tin về m ột kênh truyền tin trong m ạng gồm hai số d|, c,
 
là chỉ số của
hai m áy được nối bởi kênh truyên tin
 
thứ i trong m ạng (i = 1, 2,..., m). Đ ể kiểm tra các
kênh truyền tin, người ta gửi m ột thông điệp từ m áy chủ trong m ạng, thông điệp này
cần phải lần lượt thông qua các m áy trong m ạng truyền đi qua tất cả các kênh truyền tin
trong m ạng mỗi kênh đúng m ột lần rồi lại quay trở về máy chủ. Hãy lập trình nhập dữ
liệu vào từ file, sau đó cho biết có cách truyền tin như vừa mô tả ở trên hay
 
không.
Trong trường hợp câu trả lời là khẳng định hãy đưa ra m àn hình trình tự các kênh trong
m ạng m à thông điệp cần lần lượt được truyền qua.

10. Có
 
17 người bạn gặp nhau ở m ột lớp bồi dưỡng nâng cao trình độ. Trong suốt thời
gian của đợt học tập họ cùng nhau ăn tối ở m ột nhà hàng có nhiều m ón ăn hợp khẩu vị
với họ. Biết rằng trong tất cả các bữa ăn tối đó, họ đều ngồi quanh m ột cái bàn tròn và
mỗi cặp chỉ ngồi cạnh nhau đúng m ột lần. H ỏi rằng đcrt học tập đó kéo dài nhiều nhất
bao nhiêu ngày?
 
Hãy lập trình đưa ra cách xếp chỗ ngồi của họ trong những ngày đó.

196

Chươỉtg
 
5
.
 
c<}\ va Ccìv khtíiìg của đổ thị

5

CÂY VÀ CÂY KHUNG

CỦA ĐỔ THỊ

Đồ thị vô hướng liên thông khỏng có chu trình được gọi là cây. Khái niệm cây lần
đầu tiên được Cayley đưa ra vào luim 1H57, khi ông sừ dụng chúng để đếm m ột số dạng
cấu trúc phân tử của các hợp cliâì hoá học trong hoá học hữu cơ. Cây còn được sử dụng
rộng rãi trong rất nhiều lĩnh vực khác nhau, đặc biệt trong tin học, cày được sử dụng để
xây dựng các thuật toán tổ chức các thư mục, các thuật loán cất giữ, truyền dữ liệu và
tìm kiếm ...

5.1. Cây và các tính chất cơ bản của cây

Đ ịn h
 
n g h ĩa
 
1.
 
Ta gọi cày là dồ ílìị rớ hướníị liên íhôiỉíỊ không có chu trình. Đ ồ thị

không có chu trình được í>ọi là rừng.

N hư vậy, rừng là đồ thị mà mỗi thành phần liên thông của nó là m ột cây.

197

P lìd iì
 
2
 
.
 
L y (Ỉìu ycỉ dó tììị

T hí dụ
 
l.
 
Troniz h ìn h
 
1 là m ộr rừrm u ổm
 
3 câ y 7 | ,
 
T., Ty

T-

H ình 1. Rừniĩ
 
g ồ m
 
ba câ v T ị, 7^,

C ó íh ế nói c ầ y
 
l a
 
đ ồ thị v ô h ư ổ n e đưn
 
íia n
 
nhất. D in h lý sau đ ay c h o ta n iộ ì sò lín h

chất củ a câ y .

Đ ị n h
 
lý
 
I.
 
G i á
 
s ír T ^ i V . E )
 
ỉ ì i
 
d ó
 
í l ĩ ị
 
vô
 
lìiã)’ĩì\ị
 
lì cỉínỉi.
 
K l ĩ i
 
d ó
 
c ú c
 
n ìệỉìh
 
cíc sa u
 
cỉây ỉà

Í I Í Ơ Ỉ Ì ^
 
¿ Í U ' ( J ' I Ì ‘
^ :

( l ì
 
T lủ cây:

( 2 )
 
T
 
k lỉô n í^ c ỉ ỉ ứ a cỉìii Ỉrỉiìỉì vìỉ c ó Ỉì-Ì
 
CỢỈỈỈI:

T
 
liè ỉì ĩlìô/ìĩ^
 
và có
 
/ỉ- l
 
c ạ n h ;

(4)
 
T liên thôỉỉ^ và m ỏi cạnh của nó đêu lù cần:

(5)
 
Hưỉ (lỉnlì hcíĩ k \ của T dược nối V(JỈ nhau hởi đúniị m ộ t đuúiìiị (li dơfì:

( ố )
 
T
 
k h ô n ^ c ỉ ĩ ứ a
 
c h u
 
t r ì n h
 
n h ư n í^
 
h ễ
 
c ứ
 
th c fii
 
YCU) n ó
 
r n ộ ĩ
 
c ạ n l ì
 
ĩ a
 
ỉliii
 
cỉìíực

íl ũ n i ị
 
Ỉ Ì Ì ỘỊ
 
c h u
 
ỉ r ì n l ĩ .

C h ứ n g m inh.
 
T a sẽ ch ứ n g m in h địn h lý th eo sơ đ ổ sau;

{!) => (2)
 
=>
 
(3)
 
=>
 
(4)
 
(5)
 
^
 
(6)
 
=> (1 ) .

(1)
 
=>
 
(2)
 
T h e o
 
đ ịn h
 
n g h ĩa
 
T
 
k h ô n g
 
chứu
 
chu
 
irình. T a sẽ
 
ch ú ìm
 
m in h
 
bằrm quy
 
nạp

th e o s ố đ in h
 
/7 k h ẳ n s định: S ố cạ n h củ a câ y với
 
n
 
đỉnh
 
là //-1 . R õ ràn« khẳníỉ định
 
đúnu

V(3'i // -
 
1. G ià
 
sứ
 
/? >
 
ỉ.
 
T rước
 
hết nhận
 
thấy
 
rằim
 
iro n a
 
m ọi
 
câ y
 
T
 
c ó
 
n
 
đin h
 
đều
 
tìm

đ ư ợ c
 
ít nhài
 
m ộ t đ in h
 
là đ in h treo (tức là đín h c ó
 
bậc là
 
1). T hự c
 
vậy, e ọ i
 
\’ị.
 
.....
 
là

đưừim đi dài nhất (th e o s ố cạ n h ) troim
 
T .
 
Khi d ó rõ ràne
 
i’[ và
 
\\
 
là c á c đínli treo,
 
vì
 
lừ \'|

(v^) k h ô n u c ó cạ n h
 
n ố i tới bất cứ đin h n ào troniỉ s ố c á c đ in h V-,.
 
......(d o
 
đ ồ ihị
 
k hònii

ch ứ a ch u
 
trìn h ), c ũ n u
 
như tới bất' cứ đính
 
n ào khác củ a đ ổ thị (d o đư ờ nỉi đi đanu
 
xét
 
là

dài n h ất). L oai b ỏ
 
\'j và cạ n h (i'|.
 
Vj)
 
k h òi
 
T
 
ta thu được c â y
 
7 ,
 
với /ỉ-1
 
đ ỉn h , m à th eo uiả

th iết qui n ạ p ,c ó
 
/ì-2
 
cạ n h . V ạ y c ã y
 
T
 
c ó
 
/7-2+]
 
-
 
ỉì-ị
 
cạn h .

198

Clnfffng 5. Cáy va Cay Umng cíia dó ilii

(2) ^
 
(3)
 
Ta chúng m inh báng phán chiíng. Giá six
 
T
 
khóng
 
lien thong.
 
K hi
 
dó
 
T
 
phan

ra ‘hanh
 
k > 2
 
thánh phán lien thóng 7',, T,,... J* . Do
 
T
 
khóng
 
chúa chu
 
trinh
 
nén
 
mói
 
7,

(/ -
 
1, 2,...,
 
k)
 
cüng khóng chúa chu trinh, vi thé mói
 
T]
 
la cay. Do dó néu gol
 
n{T¡)
 
va

e(T¡)
 
theo thií tu lá só' dinh va canh cüa T,, ta có

e{T,)
 
= n{T,) - \,
 
/ = 1, 2,
 
, Á
:,

suy ra

„
 
=
 
c{T) ^ e(T,)+
 
. . . +
 
K f , )

= n ( l\ ) +
 
.
 
. . + /¡(7’*.)
 
- k

= n{T) - k
 
< n
 
- \ V .

M áu thuán thu dugc chiíng tó
 
T
 
lá lien thóng.

(3) => (4) V iéc loai bó m ót canh bát ky khói
 
T
 
dán den dó thi vói
 
n
 
dinh va
 
n-2
 
canh ro
ráng lá dó thi khóng lién thóng. Váy moi canh trong
 
T
 
déu lá cáu.

(4) => (5)
 
Do
 
T
 
lá lién thóng nén hai dinh bát ky cüa nó duóc nói vói nhau bói m ót
duóng di don. Néu có cap dinh náo cüa
 
T có
 
hai duong di dcfn khác nhau nói chúng, thi
tír dó suy ra dó thi chiía chu trinh, va vi thé các canh tren chu trinh náy khóng phái lá
cáu ?!

(5)
 
=> (6)
 
T
 
khóng chúa chu trlnh, bói vi néu có chu trinh thi hoá ra tim dirgc cap dinh

cüa
 
T
 
dugc nói vói nhau bói hai duóng di dan. Báy gió, néu thém váo
 
T
 
m ót canh
 
e
 
nói
hai dinh m va v náo dó cüa
 
T.
 
Khi dó ciinh náy cüng vói duong di don nói
 
u
 
vói v sé tao
thánh chu
 
trinh trong
 
T.
 
Chu trlnh thu duac náy líi
 
ciuy
 
nhfil,
 
vi néu thu dugc nhiéu hon

m ót chu trinh thi suy ra trong T triróc dó
 
phái có sán
 
chu trinh.

(6)
 
(1)
 
G iá sü
 
T
 
khóng lién thóng. Khi dó nó góm ít ra lá 2 thánh phán lién thóng.
Vi váy, néu thém
 
váo
 
T
 
mót canh nói hai dinh thuóc hai thánh phán
 
lién thóng khác
nhau ta khóng thu dugc thém m ót chu trlnh náo cá. Diéu dó m áu thuán vói giá thiét (6).

D inh ly dtrgc chúng minh.

5.2.
 
Cáy khung cúa do thj

D jn h n g h ía 2.
 
Giá sü G = (V ,E ) lá dó thi vó huáng lién thóng. C áy
 
T = (V ,F ) v&i
 
Fez E

dugc ggi lá cáy k h u n g cúa dó thi
 
G.

T h i d u 2.
 
D ó thi
 
G
 
va cay khung cüa nó dugc cho trong hinh 2

199

Phần 2. Lý thuyết đổ thị

h
 
c

ả
 
d

H ìn h 2. Đồ thị và các cây khung của nó

Định lý sau đây cho biết số lượng cây khung của đồ thị đầv đủ Ả',,:
Đ ịn h lý 2 (C ayley).
 
S ố cây khung của đổ ihị
 
Ấ'„
 
lá
 
^ .

Định lý 2 cho thấy số lượng cây khung của m ột đổ thị là một số rất lớn.
 
Bây giờ ta xét
áp dựng của thuật toán tìm kiếm theo chiều sâu và theo chiều rộng trên đồ thị để xây
dựng cây khung của đổ thị vô hướng liên thông. Trong cả hai trường hợp m ỗi khi ta đến
được đỉnh mới
 
u
 
(tức Chuaxet[«] = true)
 
từ đỉnh
 
V
 
thì cạnh (y,
 
u)
 
sẽ được kết nạp vào
cây khung. Hai thuật toán tương ứng được trình bày trong hai thủ tục sau đây.

p ro c e d u re
 
S T R E E
 
D FS(v);

(*
 
Tìm kiếm theo chiểu sâu áp dụng vào tìm tập cạnh của cáy khung T

của đổ thị vô hướng liên thông G cho hởi danh sách kề.

C ác biến C huaxet, Ke, T là toàn cục
 
*)

begin

Chuaxet[v] := false ;
for
 
u e Ke(v)
 
do

if
 
Chuaxet[u]
 
then
begin

T : = T u ( v ,u ) ;

STREE_DFS(u);

end;

end;

(*
 
M ain Program
 
*)

BEGIN

(* Initialiation
 
*)

for
 
u e V
 
do
 
C huaxet[u]:=true;

T := 0 ;
 
(*
 
T
 
là tập cạnh của cây khung
 
*)

STREE_DFS(root);
 
(*
 
root
 
là đỉnh nào đó của đồ thị
 
*)

END.

200

Chương 5. Cây và Cáy khung của đổ thị

p ro c e d u re
 
S T R E _ B F S (r);

(*
 
T ìm kiếm theo chiều rộng áp dụng tìm tập cạnh của cây khung T

của đ ồ thị vô hướìig liên thông G cho bởi danh sách Ke
 
*)

begin

Q U E U E : = 0 ;

Q U E U E o : r ;

C huaxet[r]:=false;

M ìú s
 
Q U E U E D
 
0
 
dD
begin

v< =
 
Q UEUE;
for
 
u e Ke(v)
 
do

if
 
Q iuaxet[u]
 
then
begin

Q U EU E -i=
 
u;
 
Chuaxet[u]:=false;

T : - T u ( v , u ) ;

end;

end;

end;

(*
 
M ain Program
 
*)

BEGIN

for
 
u e
 
V
 
do
 
Chuaxet[u]:=true;

T := 0 ;
 
(*
 
T
 
là tập cạnh của cây khung
 
*)

STREE_BFS (root);
 
(*
 
root lìi một dỉnh tuỳ ý của đồ thị
 
*)

END.

C h ú
 
ý:

1.
 
Lập luận tương tự như trong phần trước có thể chỉ ra được rằng các thuật toán
mô tả ở trên có độ phức tạp tính toán
 
0
 
{n+m).

2.
 
Cây khung tìm được theo thủ tục STREE_BFS(r) là cây đường đi ngắn nhất từ
gốc
 
r
 
đến
 
tất cả các đỉnh còn lại của đồ thị.

5.3.
 
Xây dựng tập các chu trình
 
cơ
 
bản của đồ thị

Bài toán xây dựng cây khung của đồ thị liên quan chặt chẽ với m ột bài toán ứng dụng
khác của lý thuyết đổ thị: Bài toán xây dựng tập các chu trình cơ bản của đồ thị m à ta sẽ
xét trong mục này.

T R R -
 
14
 
201

Phđn 2. Lý thuyết dồ thị

G iả sử
 
G = (V, E)
 
là đơn đồ thị vô hướng liên thông,
 
H={V,T)
 
là cây khung của nó.
Các cạnh của đồ thị thuộc cây khung ta sẽ gọi là các cạnh trong, còn các cạnh còn lại sẽ
gọi là cạnh ngoài.

Đ ịnh n g h ĩa 3.
 
N ếu
 
thêm m ột cạnh n^oài e
 
s
 
E \ T vào cây khun^ H chúng ta s ẽ thu

được đúri^ m ột chu trình tron^ H, ký hiệu chu trình này là c , . Tập các chu n in h

/2
 
= {
 
C,
 
: e G E \ T
 
]

được gọi là
 
tập các chu trình cơ bản
 
của đồ thị G.

Giả sử
 
A
 
và
 
B
 
là hai tập hợp, ta đưa vào phép toán sau

A ®
 
B
 
■
-
=
 
( A u B ) \ ( A

Tập A
 
B được gọi là k iệu
 
đôi
 
xứng
 
của hai tập hợp
 
A
 
và
 
B.

Tên gọi chu trình cơ bản gắn liền với sự kiện là m ỗi chu trình của
 
đồ thịđều có thể

thu được từ các ciiú trình cơ bản như chi' ra trong định lý sau đây:

Đ ịn h lý 3.
 
G iả sử G = (V ,E ) là đ ồ thị vô hướng liên thông, H -(V ,T ) là cây khung của nó.

K hi đó m ọi chu trình của đ ồ thị G đều có th ể biểu diễn nh ư là hiệu đối xứng của m ột s ố

các chu trình c ơ bản.

Việc tìm tập các chu trình cơ bản
 
giữ m ột vai trò quan trọng trong vấn đề giải tích
m ạng điện. Cụ thể hcm, theo m ỗi chu trình cơ bản của đồ thị tương ứng với m ạng điện
cần phân tích ta sẽ thiết lập được m ột phương trình tuyến tính theo định luật Kirchoff:

Tổng hiệu điện
 
th ế dọc theo m ột m ạch
 
vòng là bằng không.
 
Hệ thống
 
phương
 
trình
tuyến tính thu được cho phép tính toán hiệu điện th ế trên mọi đoạn đường dây của lưới
điện.

Ta sẽ m ô tả thuật toán xây dựng tập các chu trình cơ bản dựa trên thủ tục tìm kiếm
theo chiều sâu trên đồ thị. Thuật toán có cấu trúc tương tự như thuật toán xây
 
dựng cây

khung theo thủ tục tìm kiếm theo chiều sâu m ô tả trong m ục trước.

Thuật toán xây dựng tập các chu trình c ơ bản.

G iả thiết rằng đồ thị
 
G = {V, E )
 
được m ô tả bằng danh sách kề
 
Ke(v),
 
e
 
V.

p ro c e d u re
 
C ycle(v);

{*
 
Tìm tập các chu (rình cơ bản của thành phần liên thông chứa đỉnh
 
v;

C ác biến d, num, STAC K , In d ex là toàn cục
 
*)
begin

d:=d+l;

STACK[d] := v;
num := num +1;

202

Chươnịị
 
5.
 
Cày và Cày khunịĩ của đổ thị

Index[v] := num;
for
 
u
 
G
 
Ke(v)
 
do

if
 
lndex[u]= 0 then Cycle(u)
else

if
 
(u
 
STA C K [d-l]) and (Index[v] > Index[u]) then
<
 
Ghi nhận chu trình với các đỉnh:

ĨT A C K [d], S^TA C K [d-lJ,... , ĨT A C K íd , với STAC K [c]= u >:

d ; = d - l ;

end;

(*
 
M ain Program
 
*)

BEGIN

for
 
V e
 
V
 
do
 
Index[v] ;= 0;
num := 0;
 
d := 0; STACK[0] := 0;
for
 
V e
 
V
 
do

if
 
Index[v] = 0
 
then
 
Cycle(v);

END.

C h ú ý: Độ phức tạp tính toán của thuật toán vừa mô tả là
 
0 ( I £
 
I 1K I ).

5.4.
 
Bài toán cây khung nhỏ nhât

Bài toán cây khuiig nhỏ nhất của đồ thị là một trong sô' những bài toán tối ưu trên đồ thị
tìm được ứng dụng trong nhiều lĩnh vực khác nhau của đời sống. Trong mục này chúng
ta sẽ trình bày những thuật toán cơ bản để giải bài loán này. Trước hết chúng ta phát
biểu nội dung của bài toán.

Cho
 
G = (V, E)
 
là đồ thị vô hướng liên thông với tập đỉnh V =
 
j 1, 2,...,
 
n]
 
và tập
cạnh
 
E
 
gồm
 
m
 
cạnh. Mỗi cạnh
 
e
 
của đồ thị
 
G
 
được gán với m ột số thực
 
c{e),
 
gọi là độ
dài của nó. G iả
 
sử H = Ọ/,T)
 
là cây khung của đồ thị ơ . Ta gọi độ dài
 
c(H)
 
của cây
khung
 
H
 
là tổng độ dài của các cạnh của nó:

ciH )
 
=
 
z
 
c{e).

e & T

Bài toán đặt ra là trong số tất cả các cây khung của đồ thị
 
G
 
hãy tìm cây khung với độ
dài
 
nhỏ nhất. Cây khung như vậy được gọi là cây khung nhỏ nhất của đồ thị và bài toán
đ ặt ra được gọi là bài toán cây khung nhỏ nhất.

203

Phần 2. Lý ihuyết đồ thị

T h í d ụ 3. H ình 3 cho m ột th í dụ về đồ thị có trọng số trên cạnh và cây khung nhỏ nhất
của đồ thi đươc chỉ ra bởi các canh tô đâm.

Đ ể m inh hoạ cho những ứng dụng của bài toán cây khung nhỏ nhất, dưới đây, ta
phát biểu hai m ô hình thực tế tiêu biểu của nó.

B à i to á n x á y d ự n g hệ th ố n g đư ờ ng sắt.
 
Giả sử ta m uốn xây dựng m ột hệ thống đường
sắt nối
 
n
 
thành phố sao cho hành khách có thể đi từ bất cứ m ột thành phố nào đến bất
kỳ m ột trong sô' các thành phố còn lại. M ặt khác trên quan điểm kinh tế đòi hỏi là chi
phí vể xây dựng hệ thống đường phải là nhỏ nhất. Rõ ràng
 
là đổ thị m à đỉnh
 
là các
thành phố còn các cạnh là các tuyến đường sắt nối các thành phố tương ứng với phương
án xây dựng tối ưu phải là cây. Vì vậy, bài toán đặt ra dẫn về bài toán tìm cây khung
nhỏ nhất trên đồ thị đầy đủ
 
n
 
đỉnh, mỗi đỉnh tương ứng với m ột thành phố, với độ dài
trên các cạnh chính là chi phí xây dựng đường ray nối hai thành phố tương ứng (chú ý là
trong bài toán này ta giả
 
thiết là không được xây dựng
 
tuyến đường sắt có các nhà ga
phân tuyến nằm ngoài các thành phố).

B à i to á n n ố i m ạ n g m áy tính.
 
Cần nối m ạng m ột hệ thống gồtn
 
n
 
m áy vi tính đánh số từ

1 đến
 
n.
 
Biết chi phí nối m áy
 
i
 
với m áy
 
i
 
là c[/,ý],
 
i , j
 
= 1, 2,,..,
 
n
 
(thông thường chi phí
này phụ thuộc vào độ dài cáp nối cần sử dụng). H ãy tìm cách nối m ạng sao cho tổng chi
phí nối m ạng là nhỏ nhất.

Đ ể giải bài toán cây khung nhỏ nhất, tất nhiên có thể liệt kê tất cả các cây khung
của đổ thị và chọn
 
trong số chúng cây khung nhỏ nhất. Phương pháp như vậy, trong
trưòng hợp đồ thị đầy đủ, sẽ đòi hỏi thời gian cỡ
 
n"'^,
 
và rõ ràng không thể thực hiện
được ngay cả với những đồ thị với số đỉnh cỡ hàng chục. R ất m ay là đối với bài toán
cây khung nhỏ nhất chúng ta đã có những thuật toán rất hiệu quả để giải chúng. Chúng
ta sẽ xét hai trong số những thuật toán như vậy: Thuật toán K ruskal và Thuật toán Prim.

204

C h ư ư iìí’ 5. C à y và C â y k liiin íỉ của ÍÍCÌ th ị

5.4.1. T h u ậ t to á n K ru sk a ỉ

T huật toán sẽ xây dựng tập cạnh 7' của cày khung nhỏ nhất
 
H -
 
(Y ,T )
 
theo từng bước.
Trước hết xấp xếp các cạnh của đồ thị
 
G
 
theo thứ tự không giảm của độ dài. Bắt đầu từ
tập
 
T = 0 , ở
 
mỗi bước ta sẽ lẩn lượt duyệt trong danh sách cạnh đã xắp xếp, từ cạnh có
độ dài nhỏ đến cạnh có độ dài lớn hơn, để tìm ra cạnh m à việc bổ sung nó vào tập
 
T

không tạo thành chu trình trong tập này. Thuật toán sẽ kết thúc khi ta thu được tập
 
T

¿ổm /7-1 Cệ.nli. Cụ thể, thuật tcár
 
c5 :hổ n ô u’ nhi' Sỉu:

p ro c e d u re
 
K ru sk a l;

begin

T : = 0 ;

w hile
 
I T I < (n-1) and ( E
 
0
 
) do
begin

Chọn e là cạnh có độ did nhỏ nhất trong E;

E : = E \ { e ) ;

if
 
( T u
 
Ị
 
(?
 
Ị
 
không chứa chu trình
 
)
 
then
 
T := T u Ị e I ;
end;

if
 
( I T 1< n-1 )
 
then
 
Đ ồ ỉhị không liên tlìông;

end;

T h í d ụ 4, Tim cây khung nhỏ nhất của đồ thị
 
cho trong hình 4.

Bước khởi rạo.
 
Đ ặt
 
T
 
:= 0 .
 
sấp
 
xếp các cạnh của đồ thị theo thứ tự không giảm của độ
dài ta có dãy:

(3,5),
 
(4,6),
 
(4,5),
 
(5,6),
 
(3,4).
 
(1,3),
 
(2,3),
 
(2,4),
 
(1,2)

dãy độ dài tưcmg ứng của chúng

4,
 
8,
 
9,
 
14,
 
16,
 
17,
 
18,
 
20,
 
23.

ở ba lần lặp đầu tiên ta lần lượt bổ sung vào tập
 
T
 
các cạnh (3,5), (4,6), (4,5). Rõ ràng
nếu thêm cạnh (5,6) vào
 
T
 
thì nó sẽ
 
tạo thành với 2 cạnh (4,5), (4,6) đã có trong
 
T
 
chu
trình. Tinh huống tương tự cũng xảy ra đối với cạnh (3,4) là cạnh tiếp theo trong dãy.
Tiếp theo ta bổ sung cạnh (1,3), (2,3) vào
 
T
 
và thu được tập
 
T
 
gồm 5 cạnh;

T =
 
{(3,5), (4,6), (4,5), (1,3), (2,3)}

chính là tập cạnh của cây khung nhỏ nhất cần tìm.

205

Phấn 2. Lý thuyết đồ thi

20

Hình 4.
 
Đồ
 
thị có írọng
 
sô

T hí dụ 5.
 
Hình 5 m inh hoạ quá trình tìm cây khung nhỏ nhất của đồ thị cho trong hình
3: Các cạnh đậm là các cạnh được chọn vào cây khung, các canh đứl nét là các cạnh
được bỏ qua trong quá trình duyệt qua các cạnh.

H ình 5.
 
Tim cây khung nhỏ nhất theo thuật toán Kruscal

C hứng m inh tính đúng đắn của thuật toán.

R õ ràng đồ thị thu được theo thuật toán
 
có /7-1 cạnh và không có chu trình, vì vậy theo
định lý 1 nó là cây
 
khung của đồ thị
 
G.
 
N hư vậy, chỉ còn phải chỉ ra rằng
 
T
 
có độ dài
nhỏ nhất. G iả sử tồn tại cây
 
s
 
của đồ thị
 
G
 
m à
 
c{S) < c(T).
 
Ký hiệu
 
e,-
 
là cạnh đầu tiên
trong dãy các cạnh của
 
T
 
xây dụfng theo thuật toán vừa mô tả không thuộc 5. Khi đó đồ
thị con của
 
G
 
sinh bởi cây
 
s
 
được bổ sung cạnh
 
C
ị.
 
sẽ chứa 1 chu trình duy nhất
 
c
 
đi qua
é’^
.. Do chu trình
 
c
 
phải chứa cạnh e thuộc 5 nhưng không thuộc
 
T
 
nên đồ thị con thu

206

ChươiiíỊ 5. Cáv và Cày kììiiiií’ của (lồ lìiị

được từ
 
s
 
bằng cách thay cạnh
 
í'
 
của nó bởi
 
{ ký hiệu đồ thị này
 
là
 
S')
 
sẽ
 
là cây
khung. Theo cách xây dựng
 
c{e^) < cịe)
 
do đó r(Ắ'0 <
 
f(5),
 
đồng thời số cạnh chung
của
 
S '
 
và
 
T
 
đã tăng thêm một so với số cạnh chung của
 
s
 
và
 
T.
 
Lặp lại quá trình trên
từng bước m ột ta có thể biến đổi
 
s
 
thành
 
T
 
và trong mỗi bước tổng độ dài không tăng,
tức là
 
cịT ) < c{S).
 
M âu thuẫn thu được chúng tỏ 7 là cây khung nhỏ nhất.

Về việc lập trình thực hiện thuật toán.

Khôi iưựng lính .oán niiiẻu nhấi của thuật toín cliính là ỏ b jó c ,iắ3 ;cế3 các cạnh của đồ
thị theo thứ tự không giảm của độ dài để lựa chọn cạnh bổ sung. Đôi với dồ thị có
 
m

cạnh cíìn phải thực hiện cỡ
 
m
 
log
 
m
 
phép toán để sắp xếp các cạnh của đồ thị thành
dãy không giảm theo độ dài. Tuy nhiên,
 
để xây dựng cây khung nhỏ nhất với /7-1 cạnh,
nói chung, ta không cần phải sắp thứ tự toàn bộ các cạnh mà chỉ cần xét phần trên của
dãy đó chứa /• <
 
m
 
cạnh. Để làm việc đó ta có thê sử dụng các thủ
 
tục sắp xếp dạng
Vun đống (Heap Sort).
 
Trong thủ tục này, để tạo đống đầu tiên ta mất cỡ
 
0 {m )
 
phép
toán, mỗi phần tử lớn tiếp theo trong đống có thể tìm sau thời gian 0 (lo g
 
m).
 
Vì vậy,
với cải tiến này thuật toán sẽ mất thời gian cỡ
 
0
 
{m+p
 
log
 
m)
 
cho việc sắp xếp các cạnh.
Trong thực tế tính toán số
 
p
 
nhỏ hơn rất nhiều so với
 
m.

Vấn để thứ hai trong việc ihể hiện thuật toán Kruskal là việc lựa chọn cạnh để bổ
sung đòi hỏi phải có m ột thủ lục hiệu quả kiểm tra tập cạnh 'ru |í> Ị
 
có chứa chu trình
hay không. Đê ý rằng, các cạnh trong
 
T à
 
các bước lặp trung gian sẽ tạo thành
 
m ột
rừng. Cạnh
 
e
 
cần khảo sát sẽ tạo thành chu Irình với các cạnh trong
 
T
 
khi và chỉ khi cả
hai đỉnh đầu của nó thuộc vào cùng niột cây con của rừng nói trên. Do đó, nếu cạnh
 
e

không tạo thành chu trình với các cạnh trong
 
T,
 
thì nó phái nối hai cây khác nhau trong

T.
 
Vì thế, để kiểm tra xem có thể bổ sung cạnh
 
c
 
vào 7' la chỉ cần kiểm tra xem nó có
nối hai cây khác nhau trong
 
T
 
hay không. Một trong các phương pháp hiệu quả để thực
hiện việc kiểm tra này là ta sẽ phân hoạch tập các đỉnh của đồ thị ra thành các tập con
không giao nhau, mỗi tập xác đinh bởi một cây con trong
 
T
 
(được hình thành
 
ở các
bước do việc bổ sung cạnh vào
 
T).
 
Chẳng hạn, đối với đồ thị trong ví dụ 3, đầu tiên ta có
sáu tập con
 
1 phần tử:Ị 11, (2),
 
(3 ),
 
{4Ị,
 
(5 ).
 
|6 Ị . Sau khi bổ sung cạnh (3, 5), ta có
các tập con
 
{1}, { 2 Ị,
 
{3, 5 Ị, | 4 | ,
 
|6 Ị . Tiếp theo, sau khi cạnh (4,6) được chọn, ta có
các tập con {!}, {2}, { 3 ,5 Ị, |4 , 6 ( . ở bước thứ 3, ta chọn cạnh (4,5), khi đó hai tập con
được nối lại và danh sách các tập con là {1}, j 2 Ị, i 3, 4, 5, 6 Ị. Cạnh có độ dài tiếp theo
là (4, 6), do hai đầu của nó thuộc vào cùng một tập con j 3, 4, 5, 6 Ị, nên nó
 
sẽ tạo thành
chu trình trong tập này. Vì vậy cạnh này không được chọn. V à thuật toán sẽ tiếp tục
chọn cạnh tiếp theo để khảo s á t ...

N hư vậy, để giải quyết vấn đề thứ hai này ta phải xây dựng hai thủ tục: K iểm tra
xem hai đầu
 
u,
 
V
’ của cạnh
 
e={u,
 
v) có thuộc vào hai tập con khác nhau hay không, và
trong trường hợp câu trả lời là khẳng định, nối hai tập con tương ứng thành m ột tập.

207

Phần 2. Lý thuyết dồ thị

Chú ý rằng m ỗi tập con trong phân hoạch có thể lưu trữ như là m ột cây có gốc, và khi
đó mỗi gốc sẽ được sử dụng làm nhãn nhận biết tập con tương ứng.

Chưoíig trình trên Pascal thực hiện thuật toán K ruskal với những nhận xét vừa nêu
có thể viết như sau:

(*
 
Tìm cây khung nhỏ nhất theo thuật toán Kruskal

của đồ thị cho bởi danh sách cạnh
 
*)

uses crt;
type

aư n = a ư a y [l ..50] of integer;
arrm = aư ay[1..5000] of integer;
var

n, m, M inL
 
: integer;

Dau, Cuoi,
 
w
 
: arrm;

DauT, CuoiT, Father; arm ;

Connect
 
: boolean;

procedure Nhapdl;
var
 
i : integer;
fnam e: string;
f
 
: text;
begin

w rite(’Cho Tên file dữ liệ u :'); readln(fnam e);
assign(f, fnam e);
reset
 
(f);
readln(f,n,m );

for i := 1 to m do readln( f, Dau[i], Cuoi[i], W [ i] );
close(f);

end;

procedure
 
Indulieu;
var
 
i: integer;
begin

w riteln('Số đỉnh;
 
Sô' cạnh: ',m);
writeln(' Đỉnh đầu
 
Đ ỉnh cuối
 
Độ dài');
for
 
i:= l to m do

w riteln(D au[i]:4, Cuoi[i]:10, W [i]:12);

end;

208

CliM/ng 5. Cay va Cay khung cua do thi

procedure
 
H eap(First, Last:inieger);
var
 
j, k, 11, t2, t3: integer;
begin

j := first;

w hile (j <= tru n c (la st/2 )) do
begin

if (2*j < last) and (W [2*j+1] < W [2*j]) then
k := 2*j+ l
else

k := 2*j;
if W [ k ] < W [ j] then
begin

tl := D a u [ j ] ;
 
t2 := Cuoi[j];
 
t3 ;= W [j];

Dau[j] := D au [k ];
 
Cuoi[jJ ;= C uoi[k];
 
W [j] := W [k];
D au[k] := t l ;
 
Cuoi[k] := t2;
 
W[k] := t3;
j : = k ;
end

else j := Last;
end;
end;

function
 
Find(i: integer) : integer;

var
 
Tro : integer;

begin

Tro := i;

while
 
Father[Tro] > 0 do

Tro:= Father[TroJ;

Find:=Tro;

end;

procedure
 
U nion(i,j : integer);

var
 
x: integer;

begin

X := Father[i] + Father[j];
if F ather[i]> Father[j] then
begin

Father[i] := j;

Father[j] := x;
end
else

209

Phần 2. Lý thuyết đồ thị

begin

Fatherjj] := i;

Father[i] := x;
end;

end;

procedure
 
K ruskal;

var
 
i, Last, u,
 
V ,
 
r l , r2. N canh, N dinh ; integer;
begin

(*
 
Khởi tạo m ảng Father đánh dấu cây con
vồ khởi tạo H eap
 
*)
for
 
i : - l
 
to
 
n
 
do
 
F ath er[i]:--1 ;
for
 
i:=
 
trunc(m /2)
 
downto
 
1 do
 
H eap(i,m );
last:=m ;
 
N canh := 0; Ndinh := 0;

M inL
 
0;

Connect := true;

while (N dinh < n-1) and (Ncanh < m) do
begin

N canh := N canh+ 1;
u := D a u [l];
 
V
 
:= C u o i[l];

(*
 
Kiểm tra u và
 
V
 
có thuộc cùng m ột cây con?
 
*)

r l
 
:= Find(u);

r2 :=
 
Find(v);

if
 
r l <> r2 then

begin

(*
 
K ết nạp cạnh (u,v) vào cây khung
 
*)
N dinh:= N dinh+ l;
 
U nion(rl,r2);
D auT[N dinh]:=u;

CuoiT[Ndinh]:=v;

M inL := M inL + W [l];:

end;

(*
 
Tổ chức lại H eap
 
*)

D au [l] := D au[Last];

C u o i[l] := Cuoi[Last];

W [l] := W [L ast];

Last := Last-1;

Heap( 1 ,Last);
end;

if
 
N d i n h o n - 1
 
then
 
C onnect := false;

end;

210

Chương 5. Cay và Cây kỉìung của dồ thị

procedure Inketqua;
var
 
i;
 
integer;
begin

writelnC***
 
Kết quả tính toán

writeln('Đ ộ dài của cây khung nhỏ nhất:
 
\M inL );
writeln('Các cạnh của cây khiins nhỏ nhất:'):
for
 
i := ỉ
 
to
 
n-1
 
do

w ritelnC (\D auT [i]:2;, ’,C uoiT[i]:2;) ’):

end;

BEGIN

clrscr;

Nhapdl;

Indulieu;

Kruskal;

if Connect then Inketqua
else

w riteln('Đ ồ thị không liên thông');
readln;

END.

File dữ liệu của bài toán trong thí dụ 4 cỏ dạng sau:

6
 
9

3
 
5
 
4

4
 
6
 
8

4
 
5
 
9

5
 
6
 
14

3
 
4
 
16

1
 
3
 
17

2
 
3
 
18

2
 
4
 
20

1
 
2
 
23

Kết quả tìm được: Độ dài của cây khung nhỏ nhất và tập cạnh của cây khung nhỏ
nhất đươc đưa ra m àn hình

211

Phần 2. Lý thuyết đổ thị

5.4.2. Thuật toán Prim

Thuật toán K ruskal làm việc kém hiệu quả đối với những đồ thị dày (đồ thị với số cạnh

m
 
»
 
n{n-\)/2).
 
Trong trưòíig hợp đó thuật toán Prim tỏ ra hiệu quả hơn. Thuật toán Prim
còn được gọi là phương pháp lân cận gần nhất. Trong phương pháp này, bắt đầu từ m ột
đỉnh tuỳ ý của đồ thị
 
s,
 
đầu tiên ta nối
 
s
 
với đỉnh lân cận gần nó nhất, chẳng hạn là đinh

y.
 
Nghĩa là trong số các cạnh kề của đỉnh 5, cạnh
 
{s.
 
_y) có độ dài nhỏ nhất. Tiếp theo,
trong số các cạnh kề với hai đỉnh í hoặc y ta tìm cạnh có độ dài nhỏ nhất, cạnh này dẫn
đến đỉnh thứ ba z, và ta thu được cây bộ phận gồm ba đỉnh và hai cạnh. Q uá trình này
 
sẽ

được tiếp tục cho đến khi ta thu được cây gồm
 
n
 
đỉnh và /ỉ-1 cạnh sẽ
 
chính
 
là câv khuna

nhỏ nhất cần tìm.

Giả sử đồ thị cho bởi ma trận trọng số
 
c =
 
ịc [ ij] ,
 
i,j
 
-
 
1, 2,...,
 
n\.
 
Trong quá trình
thực hiện thuật toán, ở mỗi bước để có thể nhanh chóng chọn đỉnh và cạnh cần bổ sung
vào cây khung,
 
các đỉnh của đổ thị
 
s ẽ
 
được gán cho các nhãn. Nhãn của m ột đỉnh
 
V
 
sẽ
gồm hai phần và có dạng
 
[ J[v],
 
near{v\
 
], trong đó
 
d[v]
 
dùng để ghi nhận độ dài của
cạnh có độ dài nhỏ nhất trong số các cạnh nối đỉnh
 
V
 
với các đỉnh của cây khung đang
xây dựng (ta sẽ gọi là khoảng cách từ đỉnh
 
đến tập đỉnh của cây khung), nói m ột cách
chính xác

í/[v] := min { c[v, vv] :
 
w
 
e
 
Vịị
 
} ( = c[v, z]),
còn
 
nearịv]
 
ghi nhận đỉnh của cấy khung gần
 
V
 
nhất
 
{near[v]
 
:= z).

Thuật toán Prim được mô tả đầy đủ trong thủ tục sau:

procedure
 
Prim;

b e g in

(*
 
Bước khởi tạo
 
*)

Chọn
 
s
 
là một đỉnh nào đó của đổ t h ị ;

V
 
h
 
{
 
s
 
};
 
T : = 0 ;

d [s]
 
:= 0;
 
n ea r[s] := s.

fo r
 
V e
 
v
 
\
 
V h
 
d o

b e g in

d[v] := c[s,v];
near[v] := s;

end;

(*
 
B ư ớ c lặp
 
*)

Stop := false;

w hile
 
not
 
Stop
 
do

begin

Tim
 
u
 
G
 
v \
 
V h
 
(hod mãn:
 
d [u ]
 
=
 
m in
 
{ d [v ] : u
 
G
 
v \
 
V h
 
};

2 1 2

ChươiìỊị 5. Cày
 
V i l
 
Cây khuììịi của dồ thị

V
 
h
 
:=
 
V
 
h
 
U Ị u };
 
T := T
 
u
 
{ ( u, n ear|u j ) Ị ;

if
 
i VHl = n
 
then

begin

H = (
 
V
 
h
 
,T )
 
là cây khung nhỏ nhất của đồ thị
 
;
Stop := true;

end

else

for
 
v e
 
v \
 
Vh
 
do

if
 
d [v ]> c [u ,v ]
 
then
begin

d[v]
 
:=
 
c[u,v] ;
near[v] :=
 
u;
end;

end;

end;

T h i dụ 6.
 
Tim cây khung nhỏ nhất cho đồ thị xét trong thí dụ 4 theo thuật toán Prim.

M a trận trọng số của đồ thị có dạng

1
 
2
 
3
 
4
 
5
 
6

1
 
0
 
33
 
17
 
00
 
00
 
co

2
 
33
 
0
 
18
 
20
 
00
 
00

C
 
=
 
3
 
17
 
18
 
0
 
16
 
4
 
00

4
 
00
 
20
 
16
 
0
 
9
 
8

5
 
00
 
co
 
4
 
9
 
0
 
14

6
 
_
 
00
 
00
 
co
 
8
 
14
 
0
 
_

Bảng dưới đây ghi nhãn của các đỉnh trong các bước lặp của thuật toán, đỉnh đánh
dấu * là đỉnh được chọn để bổ sung vào cây khung (khi đó nhãn của nó không còn bị
biến đổi trong các bước lặp tiếp theo, vì vậy
 
ta
 
đánh dấu - để ghi nhận điếu đó) :

Bước

lập
 
Đ ỉ n h
 
1
 
Đ ỉ n h 2
 
Đ ỉ n h 3
 
Đỉnh 4
 
Đ ỉ n h 5
 
Đ i n h 6
 
V
 
h
 
T

Khởi tạo
 
[0,
 
1]
 
[ 3 3 , 1 ]
 
[17,
 
1]*
 
[ ^ ,
 
ỉ]
 
1^^, 1]
 
1 » ,
 
1]
 
1
 
0

1
 
-
 
[18,3]
 
-
 
[ 16,
 
3J
 
[ 4 , 3 ] *
 
K n
 
1 , 3
 
( 3 , 1 )

2
 
-
 
[ 1 8 , 3 ]
 
-
 
19. 5]*
 
-
 
[ 1 4 , 5J
 
1 , 3 , 5
 
( 3 , 1 ) , ( 5 , 3 )

3
 
-
 
[ 1 8 , 3 ]
 
-
 
-
 
-
 
[8,4]*
 
1 , 3 ,
 
5 , 4
 
( 3 , 1 ) , ( 5 3 ) , ( 4 . 5 )

4
 
-
 
[ 1 8 . 3 1 *
 
-
 
-
 
-
 
'
 
1 , 3 , 5 , 4 , 6
 
(3,1), (5,3), (4,5), (6,4)

5
 
“
 
"
 
”
 
1 , 3 , 5 , 4 ,
 
6, 2
 
( 3 , 1 ) , ( 5 , 3 ) , ( 4 , 5 ) ,

(6,4), (2.3)

213

Phấn 2. Lý tlnivếí đồ thị

T h í d ụ 6. H ình 6 m inh hoạ quá trình tìm cây khung nhỏ nhất của đồ thị cho trong hình
3: Các cạnh đậm là các cạnh được chọn vào cây khung, M ũi tên chỉ hướng chọn đỉnh
tiếp theo, Cạnh đứt nét không cần phải xét trong các bước tiếp theo.

5.4.3.
 
M ộ t số b ài to á n d ẫ n về b ài to á n cây k h u n g n h ỏ n h ấ t

Trong m ục này ta nêu hai bài toán có thể dẫn về bài toán cây khung nhỏ nhất, và vì th ế

có thể giải được nhờ các thuật toán m ô tả trong m ục trước

a)
 
Bài toán cây khung lớn nhất.
 
Dễ dàng nhận thấy rằng trong các thuật toán trên ta
không cần sử dụng đến đòi hỏi về dấu của độ dài. Vì vậy có thể áp dụng chúng đối với
đồ thị có các cạnh với độ dài có dấu tuỳ ý. Vì vậy, giả
 
sử ta phải tìm cây lớn nhất (tức
là có độ dài
 
c{H)
 
lớn
 
nhất)
 
thì chỉ cần đổi dấu
 
tất cả các
 
độ đo và áp dụng m ột trong
hai thuật toán vừa m ô tả.

b) Bài toán tìm m ạng điện với độ tin cậy lớn nhất.
 
Cho lưới điện có
 
n
 
nút. Đường
dây nối nút / với nút
 
j
 
có độ tin cậy
 
1 >
 
p [ i,j] >
 
0,
 
i , i
 
= 1, 2,...,
 
n.
 
Gọi
 
G =
 
(V,
 
E)
 
là đồ
thị tương ứng với lưới điện này. H ãy tìm cây khung
 
H
 
của đồ thị
 
G
 
với
 
độ tin cậy

n

lớn nhất.

Bài toán này dẫn về bài toán tìm cây khung với tổng độ dài nhỏ nhất trên đồ thị
 
G

với độ dài củ a
 
m ỗi
 
cạnh
 
^ G E
 
là
 
- log
 
p{e).
 
Thực vậy,
 
giả
 
sử
 
H
 
là
 
cây khung nhỏ

nhất trên đồ thị với độ dài - loe
 
o(e),
 
ta có

214

Chương
 
5. Cớv và
 
Cá\' klìuni^ Ciỉcỉ dồ ílìị

lo g p (e )
 
<
 
- ] ^
 
log/?{c")

e e / ỉ
 
eG.fi'

với mọi cây khung
 
/ / ' của đồ thị
 
G.
 
Từ đó suy ra
^
 
lo g p (e )
 
>
 
^
 
ìo g p ie )

eçH
 
ư^H'

do đó

■
0
f>
n
 
- ''’êF
i
Ằ
 
h
 
e e H '

hay là

n
 
- n
t e H
 
e ^ H '

với mọi cây khung
 
H \
 
Vậy
 
H
 
là cây khung có
 
độ tin cậy lớn nhất.

215

Phđn 2. Lý thuyết đổ thị

Bài tập

1.
 
Hãy viết các chương trình trên Pascal thực hiện các thuật toán;

a) Xây dựng câv khiirie của đồ thị;

b) X ây dựng tập các chu trình cơ bản của đồ thị;

c) Xây dựng cây khung nhỏ nhất theo thuật toán Prim.

2. Á p dụng thuật toán K ruscal tìm cây khung ngắn nhất cho đồ thị sau dây

3. Áp dụng thuật toán Prim tìm cây khung ngắn nhất cho đồ thị sau đây, lấy đỉnh xuất phát là
đỉnh l

4. Tim
 
cây khung ngắn
 
nhất cho đồ thị có trọng số cho trong hình vẽ dưới đây theo
thuât toán K ruscal và thuât toán Prim

216

Chươn;^
 
5.
 
Cáy \ à Cáy khưni’ của đổ thị

a)
 
b)

8
 
2

5
 
6

3
 
9

6
 
9

4
 
ố

3
 
5

1
 
4

1
1

c)

3
 
=
 
5
 
'
 
7
 
2
 
2

7
 
5
 
7
 
5
 
3
 
11
 
^

5
 
s
 
9
 
5
 
1
 
2
 
7

d)

•
----------
 
-
1
 
1

3

— <

9
 
4
 
5

2
 
Ề

8

3
t
 
5
 
5

e)

5.
 
X ét đồ thị gồm 6 đỉnh A, B,
 
c,
 
D, E, F cho bởi ma trận trọng số

A
 
B
 
C
 
D
 
E
 
F

A
 
0
 
33
 
17
 
H5
 
85
 
85

B
 
33
 
0
 
18
 
20
 
85
 
85

C
 
17
 
18
 
0
 
16
 
4
 
85

D
 
85
 
20
 
16
 
0
 
9
 
8

E
 
85
 
85
 
4
 
9
 
0
 
14

F
 
85
 
85
 
85
 
8
 
14
 
0

Tìm
 
cây
 
khung ngắn nhất
 
theo thuật toán Prim. Yêu cầu viết rõ kết quả trung gian
trong từng bước. K ết quả cuối cùng: Tập cạnh của cây khung nhỏ nhất và độ dài của nó.

6.
 
M ột công ty lập m ột dự án mắc điện thoại cho
 
n
 
(«<100) nhân viên của m ình bằng
m ột lưới các đoạn nối từ m áy của m ột người đến máy của m ột số người khác (không
phải hai người nào cũng được nối với nhau). Dự án phải đảm bảo yêu cầu sau (gọi là
yêu cầu
 
về
 
tính thông su ốt
 
của mạng):
 
Trên lưới điện thoại đó m ỗi nhân
 
viên của

C ôn g ty đều
 
có th ể nhắn
 
tin
 
cho bất cứ m ột nhân
 
viên khác hoặc trực tiếp
 
hoặc

T R R -
 
15
 
217

Phẩn 2. Lý thuyết đồ Ihị

th ô n g q u a m ộ t s ố n h â n viên tru n g gian.
 
Dữ liệu về dự án được ghi trong file văn bản
có tên N E T W .IN P có cấu trúc như sau:

- D òng đầu tiên chứa số n;

- D òng tiếp theo chứa số đường nối;

- T rong
 
các
 
dòng
 
tiếp
 
theo
 
chứa các
 
đường
 
nối
 
của
 
dự án:
 
m ỗi
 
dòng
 
gồm
 
3
 
sô
nguyên ĩheo thứ tự là chỉ số của hai m áy được nối và chi phí nối hai m áy này.

H ãy lập trình nhập dữ liệu vào tù file, sau đó:

a) K iểưi tra xem dự án có đáp ứng yêu cầu về tính thông suốt hay không?

b) T rong truờng hợp dự án đáp ứng yêu cầu thông suốt, hãy tìm cách loại bỏ m ột số
đường nổi sao cho m ạng vẫn là thông suốt đồng thời giảm đến mức tối thiểu chi phí nối
m ạng.

7. N gười ta định ìổ chức m ột m ạng m áy tính gồm
 
m xn
 
m áy được bố tri theo m ột m ạng
ô vuông gồm
 
m x n
 
nút. Nút của lưới ở hàng
 
i
 
cột
 
j
 
gọi là nút (;'j ) ,
 
j= \,2 ,...,n .

M ỗi m áy
 
sẽ được đặt ở m ột nút và các m áy được nối với nhau theo cạnh của các ố
vuông (gọi là các đưòng nối của m ạng). Trong khi m ạng còn đang trong quá trình xây
dựng (mới chỉ có m ột số đường nối nào đó được xây dựng xong), vì phải đưa m ạng vào
phục vụ kịp thời kỳ thi O lim pic Tin học Quốc tế, nguời ta m uốn kiểm tra xem tất cả các
m áy đã trao đổi thông tin được với nhau hay chưa (hai m áy bất kỳ trong m ạng gọi là
trao đổi thông tin được với nhau nếu như chúng có thể trao đổi thông tin được với nhau
hoặc là trực tiếp, hoặc thông qua các m áy trung gian). Trong trường hợp câu trả lời là
phủ định, cần xác định số đường nối ít nhất cần phải gấp rút xây dựng trước sao cho tất
cả các m áy đều trao đổi thông tin được với nhau, nhằm phục vụ kịp thời nhiệm vụ đột
xuất nói trên. Dữ liệu về các đường nối đã xây dựng xong được cho trong m ột file văn
bản có tên C O M N E T .IN P có cấu trúc như sau

- D òng đầu tiên chứa hai số
 
m,

- T rong các dòng tiếp theo, m ỗi dòng chứa thông tin về m ột đường nối đã xây dựng
xong trong thời điểm hiện tại gồm 4 số nguyên dương xác định toạ độ của hai m áy được
nối với nhau bởi đường nối này.

H ãy lập
 
trình nhập dữ liệu vào từ file, sau đó thực hiện các yêu cầu nói trên.

218

CỉìKơìiiị Ố
. Btù ĨO
LU
I
 
dư ờ ng
 
âi ỉìị^cvì nỉiấỉ

6

BÀI TOÁN ĐƯỜNG ĐI NGẮN NHẨT

Trong các ứng dụng thực tế, Bài toán tìm đường đi ngắn nhất giữa hai đỉnh của m ột
đồ thị liên thông có m ột ý nghĩa to lớn. Có thể
 
dẫn về bài toán như vậy nhiều bài toán
thực tế quan trọng. Ví dụ, Bài
 
toán chọn một hành trinh tiết kiệm nhất (theo liêu chuẩn
khoảng cách hoặc thời gian hoặc chi phí) trên một mạng giao thông đưòfng bộ, đường
thuỷ hoặc đường không; Bài toán chọn một phương pháp tiết kiệm nhất để đưa m ột hệ
động lực lực từ trạng thái xuất phát đến m ột trạng thái đích, Bài toán lập lịch thi công
các công đoạn trong m ột công trình thi công lớn, Bài loán lựa chọn đường truyền tin với
chi phí nhỏ nhất trong m ạng thông tin, V..V... H iện nay có rất nhiều phương pháp để giải
các bài toán như vậy. T hế nhưng, thông thường, các thuật toán được xây dựng dựa trên
cơ sở lý thuyết đồ thị tỏ ra là các thuật toán có hiệu quả cao nhất. T rong chương này
chúng ta sẽ xét m ột sô' thuật toán như vậy.

219

Phần 2. Lỷ thuyết đồ ĩhị

6.1. Các khái niệm mỏ đầu

T rong chương này chúng ta chỉ xét đồ thị có hướng
 
G
 
=
 
(V, E),
 
IVI=/Í,
 
\E\=ni
 
với các
cung được gán trọng số, nghĩa là, mỗi cung
 
(u, v)
 
e
 
E
 
của nó được đặt tương ứng với
m ột số thực
 
a{u,v)
 
gọi là trọng số của nó. Chúng ta sẽ đặt
 
a(u, v) = co,
 
nếu
 
{u, v)
 
Ể
 
E.

N ếu dãy

Vo .
 
V ,,
 
. . . ,
 
Vp

là m ột đường đi trên
 
G,
 
thì độ dài của nó được định nghĩa là tổng sau

Ẻ
/=1

tức là, độ dài của đường đi chính là tổng các trọng sô' trên các cung của nó. (Chú ý rằng
nếu chúng ta gán trọng số cho tất cả các cung đều bằng 1, thì ta thu được định nghĩa độ
dài của đường đi như là số cung của đường đi giống như trong các chương trước đã xét).

Bài toán tìm đường đi ngắn nhất trên đồ thị dưới dạng tổng quát có thể phát biểu
như sau; Tim đưcmg đi có độ dài nhỏ nhất từ m ột đỉnh xuất phát
 
e
 
V đến đỉnh cuối
(đích)
 
t e
 
V.
 
Đường đi như vậy ta sẽ gọi là
 
đường đi ngắn nhất từ s đến t
 
còn độ dài
của nó ta sẽ ký hiệu là
 
d{s,t)
 
và còn gọi là
 
kìĩoảng cách
 
từ 5 đến
 
t
 
(khoảng cách định
nghĩa như vậy có thể là số âm). N ếu như không tồn tại đưòmg đi từ
 
s
 
đến
 
í
 
thì ta sẽ đặt

d(s,t) =
 
co. Rõ ràng, nếu như mỗi chu trình trong đồ thị đều có độ dài dương, thì trong
đường đi ngắn nhất không có đỉnh nào bị lặp lại (đường đi không có đỉnh lặp lại sẽ được
gọi là
 
đường đi cơ bản).
 
M ặt khác, nếu trong đồ thị có chu trình với độ dài âm (chu
trình như vậy, để ngắn gọn, ta sẽ gọi là
 
chu trình âm )
 
thì khoảng cách giữa m ột số cặp
đỉnh nào đó của đồ thị có thể là không xác định, bởi vì, bằng cách đi vòng theo chu
trình này m ột số đủ lớn lần, ta có thể chỉ ra đưòng đi giữa các đỉnh này có độ dài nhỏ
hơn bất cứ số thực cho trước nào. Trong những trường hợp như vậy, có thể đặt vấn đề
tìm
 
đường đi cơ bản ngắn nhất, tuy nhiên bài toán đặt ra sẽ trở nên phức tạp hơn rất
nhiều, bởi vì nó chứa bài toán xét sự tồn tại đường đi H am ilton trong đồ thị như là m ột
trường hợp riêng. M ột tính chất của đường đi ngắn nhất nữa có thể phát biểu m ột cách
không hình thức như sau: M ọi đoạn đường con của đường đi ngắn nhất cũng là đường đi
ngắn nhất. Tính chất tuy rất hiển nhiên này nhưng lại hàm chứa m ột nội dung rất sâu
sắc, và người ta thường gọi nó là nguyên lý tối ưu. V iệc chứng m inh tính đúng đắn của
hầu hết các thuật toán tìm đưcmg đi ngắn nhất đều được xây dựng dựa vào nguyên lý
này.

Trước hết cần chú ý rằng nếu biết khoảng cách từ
 
s
 
đến
 
t,
 
thì đường đi ngắn nhất từ

5 đến
 
t,
 
trong trường hợp trọng số không âm, có thể tìm được m ột cách dễ dàng. Đ ể tìm

2 2 0

Chương 6. Bài toán đườnỊỊ đi
 
níỊẳiì
 
nhái

đường đi, chỉ cần để ý là đối với cặp đỉnh 5,
 
t e V
 
tuỳ ý ( í
 
t)
 
luôn tìm được đỉnh V
 
sao
ch'"

d{s\t) = cì{s,v)
 
+
 
a{v,t).

Thực vậy, đỉnh
 
V
 
như vậy chính
 
l à
 
đỉnh đi trước đỉnh
 
t
 
trong đường đi ngắn nhất từ
 
5

đến
 
t.
 
Tiếp theo ta lại có thể tìm được đỉnh
 
u
 
sao cho
 
d{s,v)
 
=
 
d{s,u)
 
+
 
a{u,v), ...
 
Từ giả
thiết về tính không âm của các trọng số dể dàng suy ra rằng dãy
 
t,
 
V ,
 
u, ...
 
không chứa
đ ỉrh
 
lặp 'ại và kết thúc ở đ h h
 
5
 
Rõ ràng dãv thu dươc xác đ 'n h f'neu lật ngược thứ tự
các đỉnh trong nó) đường đi ngắn nhất từ 5 đêíi
 
t.
 
Từ đó ta có thuật toán sau đây để tìm
đưòĩig đi ngắn nhất từ 5 đến
 
t
 
khi biết độ dài của nó.

procedure
 
Find_Path;

(*

Đ ầu vào:

d[v]
 
- khoảng cách
 
từ đỉnh
 
sđến tất cả các đỉnh
 
còn lại
 
V e
 
V;

t
 
- đỉnh đích;

a[u,v]
 
,
 
u, V e V -m a trận
 
trọng
 
số trên các
 
cung.

Đầu ra:

M ảng STACK chứa dãy đỉnh xác định đường đi ngắn nhất từ s đến t

*)

begin

STACK :=
 
0
 
;
 
STACK <= t ;
 
V := t ;

while
 
V
 
s do

begin

u:= đỉnh thoả mãn
 
dlvj = d[uj + a[u,v] ;

STACK c= u ;

V
 
; =
 
u
 
;

end;

end;

Chú ý rằng độ phức tạp tính toán cuả thuật toán là
 
O(n^),
 
do để tìm đỉnh
 
u
 
ta phải
xét qua tất cả các đỉnh của đồ thị. Tất nhiên, ta cũng có thể sủ dụng kỹ thuật ghi nhận
đường đi đã trình bày trong chương 3: dùng biến m ảng Truoc[v],
 
V e V ,
 
để ghi nhớ đỉnh
đi trước V
 
trong đường đi tìm kiếm.

Cũng cần lưu ý thêm là trong trường hợp trọng số trên các cạnh là không âm , bài
toán tìm đường đi ngắn nhất trên đồ thị vô hướng có thể dẫn về bài toán trên đồ thị có
hướng, bằng cách thay mỗi cạnh của nó bởi hai cung có hướng ngược chiều nhau với
cùng trọng số là trọng số của cạnh tương ứng. Tuy nhiên, trong trường hợp có trọng số
âm , việc thay như vậy có thể dẫn đến chu trình âm.

221

Phân 2. Lý thuyết đổ thị

6.2. Đường đi ngắn nhất xuâ't phát từ một đỉnh

Phần
 
lớn các thuật toán tìm khoảng cách giữa hai đỉnh i' và / được xây dựng nhờ kỹ
thuật tính toán m à ta có thể mô tả đại thể như sau: từ ma trận trọng sô'
 
<7[m,v],
 
lí,
 
V e V,
ta tính cận trên J[v] của khoảng cách từ i' đến tất cả các đỉnh I’ e V. Mồi khi phát hiện

d[u] + a [u ,v]< d [v]
 
(1)

cận trên
 
d[v]
 
sẽ được là tốt lên: í/[v] :=
 
d[u] +

Q uá trình đó sẽ kết thúc khi nào chúng ta không làm tốt thèin được bất cứ cận trên
nào. Khi đó, rõ ràng giá trị của mỗi
 
d[\>]
 
sẽ cho ía khoảng cách từ đỉnh i' đến đỉnh V
.
Khi thể hiện kỹ thuật tính toán này trên m áy tính, cận trên
 
d[v\
 
sẽ được gọi là nhãn của
đỉnh V, còn việc tính lại các cận trên này sẽ gọi là phép gán nhãn cho đồ thị và toàn bộ
thủ tục thường gọi là ihủ tục gán nhãn. N hận thấy rằng để tính khoảng cách từ i đến
 
t,
 
ở
đây, ta phải tính khoảng cách từ
 
s
 
đến tất cả các đỉnh còn lại của đồ thị. Hiện nay vẫn
chưa biết thuật toán nào cho phép tìm đường đi ngắn nhất giữa hai đỉnh làm việc thực sự
hiệu quả hơn
 
những thuật toán tìm đường đi ngắn nhất từ m ột đỉnh đến tất cả các đỉnh
còn lại.

Sơ đồ tính toán m à ta vừa mô tả còn chưa là xác định, bởi vì còn phải chỉ ra thứ tự
chọn các đỉnh
 
u
 
và V để kiểm tra điều kiện (1). Thứ tự chọn này có ảnh hưởng rất lớn
đến hiệu quả của thuật toán.

Bây giờ ta sẽ mô tả thuật toán Ford - Bellman tìm đường đi ngắn nhất từ đỉnh i' đến
tất cả các đỉnh còn lại của đồ thị. Thuật toán làm việc trong trường hợp trọng số của các
cung là tuỳ ý, nhưng giả thiết rằng trong đồ thị không có chu trình âm.

p ro c e d u re
 
F o rd _ B e llm a n ;

(*

Đ ầu vào:
 
Đ ồ thị có hướtĩg G={V,E) với n đỉnh,

s e V là đỉnh xuất phát,

a[u,v], u,v
 
G
 
V, ma trận trọng số;

Đ ầ u r a :
 
K hoảng cách từ đỉnh s đến tất cá các đỉnh còn lại
 
úí[v], V e
 
V.

Truoc[v], V e V,
 
ghi nhận đỉnh đi trước
 
V
 
trong đưc/ng đi ngắn

nhất từ s đến
 
V

G iả th iế t:
 
Đ ồ
 
thị không có chu trình ám.

*)

begin

222

Chươn^ 6. Bài toán cỉườỉì^ đi ngắn nhất

(*
 
Khởi tạo
 
*)
for
 
V G V
 
do
begin

d[v] := a[s,v] ;

Truoc[v]:=s;

end;

d[s]:=0;

for
 
k := 1 to
 
n-2
 
do
for
 
v e V \ | s Ị
 
do
for
 
u e
 
V do

if
 
d[v] > d[u] + a[u,v]
 
then
begin

d[v] ;= d[u] + a[u,v] ;

Truoc[v] ;= u ;
end;

end;

Tính đúng đắn của thuật toán có thể chứng m inh trên cơ sờ nguyên lý tối uu
 
của

quy hoạch động. Rõ ràng là độ phức tạp tính toán của thuật toán là
 
0{n^).

Lưu ý rằng chúng ta có thể chấm dứt vòng lặp theo
 
k
 
khi phát hiện trong quá trình
thực hiện hai vòng lặp trong không có biến iry[v'] nào bị đổi giá trị. Việc này có thể xảy
ra đối với
 
k < n-
2
 
,
 
và điều đó làm tăng hiệu quả của thuật toán trong
 
việc
 
giải
 
các
 
bài

toán thực tế. Tuy nhiên, cải tiến đó không thực sự cải thiện được đánh
 
giá
 
độ phức
 
tạp

của bản thân thuật toán.

Đối với đồ thị thưa tốt hơn là sử dụng danh sách ké Ke(v),
 
V & v , á ể
 
biểu
 
diễn
 
đồ

thị, khi đó vòng lặp theo
 
u
 
cần viết lại dưới dạng

for
 
u e Ke(v)
 
do

if
 
d[v] > d[u] + a[u,v]
 
then
begin

d[v] := d[u] + a[u,v] ;

Truoc[v] ;= u ;

end;

T rong trường hợp này ta thu được thuật toán với độ phức tạp
 
0{n.m ).

T h í d ụ 1.
 
Xét đồ thị cho trong hình 1. Các kết quả tính toán theo thuật toán
 
được m ô tả

trong bảng dưới đây

223

Phần 2. Lý thuyết đồ thị

(3)

00
 
1
 
00
 
00
 
3

00
 
00
 
3
 
3
 
8

00
 
00
 
00
 
1
 
-5

00
 
00
 
2
 
00
 
00

00
 
00
 
00
 
4
 
oo

H ìn h 1. M inh hoạ cho thuât toán Ford - Bellman

d [ l] ,

T ru o c[l]

0
,
 
1

0
,
 
1

0, 1

0 ,1

d[2],

Truoc[2]

1
,
 
1

1
,
 
1

1,1

1,1

d[3],

Truoc[3]

CO,
 
1

4 ,2

4 ,2

4 ,2

d[4],

Tm oc[4]

CO,
 
1

4 ,2

3 ,5

3 ,5

d[5],

Truoc[5]

3, 1

-1 ,3

-1 ,3

-1 ,3

Bảng kết quả tính toán theo thuật toán Ford - Bellman

Trong các m ục tiếp theo chúng ta sẽ xét m ột số trường hợp riêng của bài toán tìm
đường đi ngắn nhất m à để giải chúng có thể xây dựng những thuật toán hiệu quả hơn
thuật toán Ford - Bellm an. Đó là khi trọng số của tất cả các cung là các số không âm
hoặc là khi đồ thị không có chu trình.

6.3. Trường hợp ma trận trọng số không âm.

Thuật toán Dijkstra

Trong trường hợp trọng số trên các cung là không âm thuật toán do D ijkstra đề nghị
 
để
giải bài toán tìm đường đi ngắn nhất từ đỉnh 5 đến các đỉnh còn lại của đồ thị làm việc
hữu hiệu hơn rất nhiều so với thuật toán trình bày trong m ục trước. Thuật toán được xây
dựng dựa trên cơ sở gán cho các đỉnh các nhãn
 
tạm thời. N hãn của m ỗi đỉnh cho biết
cận trên của độ dài
 
đường đi ngắn nhất từ 5 đến nó. Các nhãn này sẽ được biến đổi theo
m ộ t thủ tục lặp, m à ở m ỗi m ột bước lặp có m ột nhãn tạm thời trở thành nhãn cố định.
N ếu nhãn củ a m ột đỉnh nào đó trở thành cố định thì nó sẽ cho ta không phải là cận trên
m à là độ dài củ a đường đi ngắn nhất từ đỉnh 5 đến nó. T huật toán được m ô tả cụ thể như
sau.

2 2 4

Chương ố. Bài toán (lươiiỊỊ đi ngắn nhất

procedure Dijkstra;

(*
 
Đ ầ u vào:
 
Đ ổ thị có hướng G=(V,E) với n
 
đỉnh,

s e V là đỉnh xuất phát,
 
a[u,v], u,v
 
e
 
V, ma trận trọng sô';

Giả thiết:
 
a[u,v]
 
>
 
0,
 
H,
 
V
 
e
 
V.

Đ ầu r a :
 
K hoảng cách từ đỉnh s đến tất cả các đỉnh còn lại d[v], v e V .

Truoclv},
 
ve
 
V, ghi nhận đỉnh đi trước
 
V
 
trong đườn^ đi ngấn nhất t ừ s đến
 
V .

*)

begin

(*
 
Khởi tạo
 
*)
for
 
V
 
e
 
V
 
do
begin

d[v] := a[s,v] ;

Truoc[v]:=s;

end;

d[s] := 0;
 
T := V \ {s );
 
(*
 
T là tập các đỉnh có nhãn tạm thời
 
*)

(*
 
Bước lặp
 
*)
w hile
 
T
 
0
 
do
begin

Tim đỉnh
 
u
 
e
 
T thoả mãn
 
d[u] = min{ d[z] : z
 
e
 
T};

T :=
 
T \ { u ) ;
 
(*
 
Cô'định nhãn của đỉnh u *)

for
 
V
 
e T
 
do
 
(*
 
Gán nhãn lại cho các đỉnh trong T *)
if
 
d[v] > d[u] + a[u,v]
 
then

begin
 
,

d[v] := d [u ] + a[u,v] ;

Truoc[v] := u ;

end;

end;

end;

Đ ịnh lý 1.
 
T huật toán D ijkstra lìm được đường đi ngắn nhất trên đồ thị sau thời gian cỡ

oự).

C hứng m inh.
 
Trước hết ta chứng m inh là thuật toán tìm được đưòmg đi ngắn nhất từ
đỉnh
 
s
 
đến các đỉnh còn lại của đồ thị. Giả sử rằng ở một bước lặp
 
nào đó các nhãn cố
định cho ta độ dài các đường đi ngắn nhất từ 5 đến các đỉnh cổ nhãn c ố định, ta sẽ
chứng m inh rằng ở lần lặp tiếp theo nếu đỉnh
 
u*
 
thu được nhãn cố định thì
 
d[u*]
 
chính
là độ dài đường đi ngắn nhất từ
 
s
 
đến w*.

225

Phân
 
2.
 
Lý thuyết đồ thị

Ký hiệu
 
S ị
 
là tập các đỉnh có nhãn cố định còn s , là tập các đỉnh có nhãn tạm thời ỏ'
bước lặp đang xét. Kết thúc m ỗi bước lạp nhãn tạm thời
 
d[v]
 
cho ta độ dài của đường đi
ngán nhất từ .Vđến
 
V
 
chỉ qua những đỉnh nầm hoàn toàn trong tập 5 |. Giả sử rằng đường
đi ngấn nhất từ
 
đến
 
không nằm trọn trong tập S|, tức là nó đi qua lì nhất một đính
của tập 52- Gọi
 
z G S
2
 
là đỉnh đầu tiên như vậy trên đường đi này. Do trọng số trên các
cung ià không âm , nên đoạn đường từ z đến
 
có độ dài L > 0
 
và

d[z]
 
< d[u^]
 
-
 
L
 
< d[ii%

Bất đẳng thức này là m âu thuẫn vói cách xác định đỉnh
 
là đỉnh có nhãn tạm thời nhò
nhất. V ậy đường đi ngắn nhất từ 5 đến /Y
* phải nằm trọn troriR 5 |, và vì th ế
 
cl[ỉớ]
 
là độ
dài cửa nó. Do ở iần lặp đầu ìiên Ẵị = {ỏ Ị và sau mổi lần lặp la chỉ thêm vào 5, mộE đỉnh
¿/*
 
nên giả thiết là
 
d[v]
 
cho độ dài đường đi ngắn
 
nhất từ .Vđến V
' với mọi V
’^ 5, là đúng
với bước lặp đầu tiên. Theo qui nạp suy ra thuật toán cho ta đường đi ngấn nhất từ
 
s
 
đến
m ọi đỉnh của đồ thị.

Bây giờ sẽ đánh giá số phép toán cần thực hỉện theo thuật toán, ở
 
mỗi bước lặp để
tìm ra đỉnh
 
u
 
cần phải thực hiện
 
0
 
(n)
 
phép toán, và để gán nhãn lại cũng cần phải thực
hiện m ột số lượng phép toán cũng là
 
0 {n ).
 
T huật toán phải thực hiện /7-1 bước lạp, vậy
thời gian tính toán của thuật toán là cỡ
 
0
 
{n^).

Đ ịnh lý được chứng minh.

Khi đã tìm được độ dài của đường đi ngắn nhất
 
d[v]
 
thì đường đi này có thể tìm dựa
vào nhãn
 
Truoc[v],
 
V G V, theo qui tắc giống như chúng ta đã xét trong chương 3.

T h í d ụ 2,
 
Tim đưcmg đi ngắn nhất từ đỉnh 1 đến các đỉnh còn lại của đồ thị ở hình 2.

(7)

(
 
1
)

(3)

H ìn h 2. M inh hoạ thuật toán D ijkstra

K ết quả tính toán theo thuật toán được trình bày trong bảng dưới đây. Qui ước viết
hai thành phần của nhãn theo thứ tự:
 
d[v], Truoc[v].
 
Đ ỉnh được đánh dấu
 
là đinh

226

ChươiiỊ’ ố. Bài toán dườiìỊỉ đi n.í>ắn Iilìãì

được chọn để cố định nhãn ở bước lặp dang xét, nhãn của nó không biến đổi ở các bước
tiếp theo, vì thế
 
ta đánh dấu

Bước lặp

Khởi tạo

5

Đỉnh
 
1

0
 
,
 
1

Đính 2

I. 1

Đinh 3

cc,
 
1

6 ,2

4, 4 *

Đỉnh 4

X, 1

3 ,2
 
*

Đ ỉnh 5

co,
 
1

co,
 
1

7,
 
4

7,
 
4

Đ ỉnh 6

co, 1

8 ,2

8 ,2

5 ,3
 
*

6
,
 
6

Bảng kết quả tính toán theo thuật toán D ijkstra

C h ú ý:

1) N ếu chỉ cần tìm đường đi ngắn nhất từ .Vđến một đỉnh
 
t
 
nào đó thì có thể kết
thúc thuật toán khi đỉnh
 
í
 
trở thành có nhãn cô' định,

2) Tương tự như trona mục 6.2. dễ dàng mô tả lại thuật toán cho trường hợp đồ thị
cho bởi danh sách kề. Để có thể giảm bớt khối lượng tính toán trong việc xác định đỉnh

u ở
 
mỗi bước lặp, có thể sử dụng thuật toán Heapsort (tưong tự như trong chưcmg 5 khi
thể hiện thuật toán Kruskal). Khi đó có thể thu được thuật toán với độ phức tạp tính toán
là
 
0
 
{m
 
log /í).

6.4.
 
Đường đi trong đổ thị không có chu trình

Bây giờ la xét trường
 
hợp riêng ihứ
 
hai của
 
bài toán
 
đưímg
 
đi
 
ngán nhất, m à để giải nó
có thể xây dựng thuật toán với độ phức tạp lính toán
 
đó là khi đồ thị không có

chu trình (còn trọng sổ trên các cung có thể là các số ihực tuỳ ý). Trước hết ta chứng
minh định lý sau.

Đ ịnh lý 2.
 
Giả s ử G là đỗ thị không cố chu ĩrìỉĩh. Kììi đó các đỉnh của nó có th ể đánh s ố

sao cho m ỗi cuỉĩíị của đồ thị chỉ hướn^ ĩừ đỉnh có chỉ
 
s ố
 
nhỏ hơn đến đỉnh có ch ỉ s ố lớn

hơn, nghĩa lá m ỗi cun^ của nó có ih ể h iểu diễn dưới clạníỊ
 
(v[/], v[/]),
 
trong đó
 
i < j .

Để chứng m inh định lý ta mô tả thuật toán sau đây, cho phép tìm ra cách đánh số
thoả m ãn điều kiện định lý.

p ro c e d u re
 
N u m b e rin g ;

(*
 
Đ ầu v à c :
 
Đ ồ thị có hướìĩg G ~{V,E) với n đỉnh khôn^ chứa chu trình

được cho bởi
 
danh
 
sáclì ké Ke{v),
 
V
 
e
 
V.

227

Phần 2. Lý thuyết đổ thị

Đầu ra:
 
Với m ỗi đỉnh V e
 
V c h ỉ
 
S Ố N R
 
[v]
 
thod m ãn:

Với m ọi cung
 
{u,v)
 
của đồ thị ta đều có
 
NR[u]
 
<
 
NR[v].
 
*)

begin

for
 
V
 
e
 
V
 
do
 
Vao[v] := 0;

(*
 
Tính Vao[v] = deg-(v)
 
*)
for
 
u e
 
V
 
do

for
 
V
 
G
 
K e(u)
 
do
 
Vao[v]
 
; =
 
Vao[v]
 
+
 
1
 
;

Q U EU E := 0
 
;
for
 
V
 
e
 
V
 
do

if
 
Vao[v] = O then
 
Q U E U E Cr
 
V
 
;
num := 0;

while
 
Q U E U E
 
^ 0
 
ỎO

begin

u
 
^
 
Q U E U E ;

num := num + 1 ;
 
N R [u] := num ;

for
 
V
 
6 K e(u)
 
do

begin

Vao[v] ;= Vao[v] - 1 :
if
 
Vao[v] = 0
 
then
 
Q U E U E
 
V
 
;
end;

end;

end;

Thuật toán được xây dựng dựa trên ý tưcmg rất đơn giản sau; R õ ràng trong đồ thị
không có chu trình bao giờ cũng tìm được đỉnh
 
có bán bậc vào bằng 0 (không có cung
đi vào). Thực vậy, bắt đầu từ đỉnh V, nếu có cung đi vào nó từ
 
thì ta lại chuyển sang
xét đỉnh
 
V j .
 
Nếu có cung từ
 
V 3
 
đi vào
 
V j ,
 
thì ta lại chuyển sang xét
 
V 3 ,
 
... Do đồ thị là
không có chu trình nên sau m ột số hữu hạn lần chuyển như vậy ta phải đi đến đỉnh
không có cung đi vào. Thoạt tiên, tìm các đỉnh như vậy của đồ thị. R õ ràng ta có thể
đánh số chúng theo m ột thứ tự tuỳ ý bắt đầu từ 1. Tiếp theo, loại bỏ khỏi đồ thị những
đỉnh đã được đánh số cùng các cung đi ra khỏi chúng, ta thu được đồ thị mới cũng
không có chu trình, và thủ tục được lặp lại với đồ thị m ới này. Q uá trình đó sẽ được tiếp
tục cho đến khi tất cả các đỉnh của đồ thị được đánh số.

C h ú ý:

1)
 
Rõ ràng trong bước khởi tạo ta phải duyệt qua tất cả các cung của đồ thị khi tính
bán bậc vào của các đỉnh, vì vậy ở đó ta tốn cỡ
 
0
 
{m)
 
phép toán, trong đó
 
m
 
là sô' cung
của đồ thị. Tiếp theo, m ỗi lần đánh số m ột đỉnh, để thực hiện việc loại bỏ đỉnh đã đánh
số cùng với các cung đi ra khỏi nó, chúng ta lại duyệt qua tất cả các cung này. Suy ra để

228

Chương 6. Bài loàn đường đi ngấn nhất

đánh sô' tất cả các đỉnh của đồ thị chúng ta sẽ phải duyệt qua tất cả các cung của đồ thị
m ột lần nữa. V ậy độ phức tạp của thuật toán là
 
0{m ).

2)
 
T huật toán có thể áp dụng để kiểm tra xem đồ thị có chứa chu trình hay không?
Thực vậy, nếu kết thúc thuật toán vẫn còn có đỉnh chưa được đánh sô'
 
(num < n)
 
thì điều
đó có nghĩa là đồ thị chứa chu trình.

T h í dụ 3. Đ ồ thị trong hình 3 có các đinh được đánh số thoả m ãn điều kiện nêu trong
định lý.

7
 
O)
 
n

í=9

Do có thuật toán đánh số trên, nên khi xét đồ thị không có chu trình ta có thể giả
thiết là các đỉnh của nó được đánh sô sao cho mỗi cung chỉ đi từ đỉnh có chỉ số nhỏ đến
đỉnh có chỉ số lớn hơn. Thuật toán tìm đường đi ngắn nhất trên đồ thị không có chu
trình được m ô tả trong sơ đồ sau đây.

procedure
 
C ritical_Path;

(*
 
Tìm đường đi ngắn nhất từ đỉnh nguồn đến tát cả

các đĩnh còn lại trènđồ thị không có chu trình

Đ ầu vào:
 
Đ ồ thị G =
 
(V^,
 
E), troiìỊị đó
 
V
 
={ y[l], v[2],
 
, v[/2] }.

Đ ối với m ỗi cung
 
(v[/],
 
v[ịì)
 
s
 
E, ta có
 
i < j.

Đ ồ thị được cho bài danh sách k ề
 
K e { v ) ,
 
V
 
e V.

Đ ầu r a
 
:
K hoảng cách t ừv{\ ] đến lất cả các đỉnh còn lại

được ghi trong mảng
 
¿/[v’[/]],
 
/ = 2, 3
,
 
n
 
*)

begin

d [v [l]] := 0;
for
 
j:= 2
 
to
 
n do

d[v[j]] := a [ v [ l] ,v U ] ] ;
for
 
j:= 2
 
to
 
n
 
do

for
 
V
 
e
 
Ke[v[j]]
 
do

d[v] :=
 
min ( d[v],
 
d[v[j]] + a[v[j], vj ) ;

end;

229

Phần 2. Lý thuyết đổ thị

Đ ộ phức tạp tính toán của thuật toán là
 
0{m) ,
 
do m ỗi cung của đồ thị phải xét qua
đúng m ột lần.

Các
 
thuật
 
toán
 
mô
 
tả
 
ở
 
trên
 
thường
 
được
 
ứng
 
dụng
 
vào
 
việc
 
xây
 
dựng
 
những
phương pháp giải bài toán điều khiển việc thực hiện những dự án lớn, gọi tắt là
 
PERT
(Project Evaluation and Review Technique) hay CDM (Critical path M ethod). MỘÍ thi
dụ đơn giản cho ứng dụng này được m ô íả trong thí dụ dưới đây.

T h í d ụ 4.
 
V iệc thi công m ột công trình lớn được chia ra làm
 
Ỉ
1
 
công đoạn, đánh số từ 1
đến
 
n. Có
 
m ột số công đoạn m à việc thực hiện nó chỉ được tiến hành sau khi m ột số
công đoạn nào đó đã hoàn thành. Đối với mổì còng đoạn
 
ỉ
 
biết
 
t[i]
 
là thời gian cần thiết
để hoàn thành nó (/ = 1-, 2,...,
 
n).
 
Các dữ liệu với /2 = 8 được cho trong bảng sau đây

Công

đoạn
 
t[i]

Các công đoạn phải
được hoàn thành trước nó

1
 
15
 
không có

2
 
30
 
1

3
 
80
 
không có

4
 
45
 
2 ,
 
3

5
 
124
 
4

6
 
15
 
2 ,
 
3

7
 
15
 
5 , 6

8
 
19
 
5

G iả sử thời điểm
 
bắt đầu tiến hành thi công công trình là 0. Hãy tìm
 
tiến độ thi
công công trình (chỉ rỗ m ỗi công đoạn phải được bắt đầu thưc hiện vào thcfi điểm nào)
để cho công trình được hoàn thành xong trong thời điểm sớm nhất có thể được.

Ta có thể xây dựng đồ thị có hướng
 
n
 
đỉnh biểu diễn hạn chế về trình tự thực hiệc
các công việc như sau: M ỗi đỉnh của đồ thị tương ứng với m ột công việc, nếu công việc
/ phải được thực hiện trước công đoạn
 
j
 
thì trên đồ thị có cung (/j ) , trọng số trên cung
này được gán bằng t[/], xem hình 4 dưới đây.

15
 
30

H ìn h 4.
 
Đ ồ thị m inh hoạ PER T

230

Chươnq (ì. Bài toán dườnỵ di lìiỊổii nhất

Thêm vào đồ thị 2 đính 0 và /;+l
 
tương ứng với hai sự kiện đặc biệt: đỉnh số 0 tương
ứng với công đoạn
 
L ễ khởi côììị>,
 
nó phải được thực hiện trước tất
 
cả các công đoạn
khác, và đỉnh /ỉ+1 tương ứng với
 
công đoạn
 
c ắ t hủnọ, khánh thành công trình,
 
nó phải
thực hiện sau tất cả các công đoạn, với
 
/[0] = /[/?+!] = 0 (trên thực tế chỉ cần nối đỉnh 0
với tất cả các đỉnh có bán bậc vào bằng 0 và nối lất cả các đỉnh có bán bậc ra bằng 0 với
đỉnh /ỉ+1). Gọi đồ thị thu được là
 
G.
 
Rõ ràng bài toán đặt ra dẫn về bài toán tìm đường
đi dài nhất từ đính 0 đến tất cả các đỉnh còn lại trên đồ thị
 
G.
 
Do đồ thị
 
G
 
rõ ràng là
không chứa chu trình, nên dể giải bài toán đặt ra có thể áp dụng các thuật toán m ô tả ở
trên, chỉ cần đổi dấu tat cả các trọng số trên các cung thành dấu ngược lại, hoặc đoín
gián hơn chỉ cần đổi toán tử
 
m in
 
trong thuật toán Critical_Path thành toán tử
 
m a x.
 
Kết
thúc thuật toán, chúng ta thu được
 
d[vị
 
là độ dài đường đi dài nhất từ
 
đỉnh 0 đến đỉnh
 
V .

Khi đó f/[v] cho ta thời điểm sớm nhất có thể bắt đầu thực hiện công đoạn
 
V ,
 
nói riêng

d[n+\ ]
 
là thời điểm sớm nhất có thể cắt bãng khánh thành, tức là thời điểm sớm nhất có
thể hoàn thành toàn bộ công trình.

Cây đường đi dài nhất của bài toán trong thí dụ 4 tìm được theo thuật toán được chỉ
ra trong hình 4.

6.5. Đường đi ngắn nhâ't giữa tất cả các cặp đỉnh

Rõ ràng ta có thể giải bài toán tìm đường đi ngán nhất giữa tất cả các cặp đỉnh của đổ
thị bằng cách sử dụng
 
n
 
lần thuật toán mô tả ở mục trước, trong đó ta sẽ chọn
 
s
 
lần lượt
là các đỉnh của đổ thị. Rõ ràng, khi đó ía thu được thuạt toán với độ phức tạp là 0 ( / / )
(nếu sử dụng thuật toán Ford - Bellman)
 
hoặc
 
0{ỉì^)
 
đối với trường hợp trọng sô' không

âm
 
hoặc
 
đồ Ihị
 
không
 
có chu trình. Trong trường hợp tổng
 
quát,
 
sử
 
dụng thuật toán Ford

-
 
Bellm an
 
n
 
lẩn không phải là cách làm tốt nhất, ở đây ta sẽ mô tả m ột thuật toán giải
bài toán trên với độ phức tạp tính toán 0(/ỉ^): Thuật toán Floyd. T huật toán được m ô tả
trong thủ tục dưới đây.

p ro c e d u re F lo y d ;

(*
 
Tim đường đi ngắn nhất giữa tất cả các cập đỉnh

•
 
Đ ầu vào:
 
Đ ồ thị cho hởi ma (rận trọỉĩíỊ s ốa[ i j ] ,
 
ị , j
 
=

•
 
Đầu ra
 
:

M a ĩrận đường đi ngắn nhcíĩ giữa các cặp đỉnh

d[ij], i j
 
^
 
1,2,.

trong đó d[ìj] cho độ dài đườug đi ngắn nlìấĩ từ i đến j.

M a ỉrận ghi nhận ducmg đi

pUJÌ. i j
 
= U
2
 
,...,ỉì,

trong đó p[i,j] ^hi nhận cỉỉnh đi íru(/c đỉnh ị
 
ỉronq đườnọ, đì ngắn nhất từ i đến j.

*)

231

Phần 2. Lý thuyết đồ thị

begin

(*
 
Khởi
 
tạo
 
*)

for
 
i
 
1
 
to
 
n
 
do

for j
 
1 to
 
n
 
do

begin

d[i,j]
 
:= a [i,j];
p [ij]
 
:= i;

end;

(*
 
Bước lặp
 
*)
for
 
k:= 1 to
 
n
 
do
for
 
i := 1
 
to
 
n
 
do
for
 
j
 
1
 
to
 
n
 
do

if
 
d[i,j]
 
>
 
d[i,k] +
 
d[k,j]
 
then
begin

d[i,j]
 
:=
 
d[i,k] +
 
d[k j ] ;
p[i,j]
 
:=
 
p fk j];
end;

end;

R õ ràng độ phức tạp tính toán của thuật toán là
 
0{n^).

K ết thúc chương này chúng ta trình bày m ột cách thể hiện thuật toán D ijkstra trên
ngôn ngữ
 
PASCAL:

(* Chương trình tìm đường đi ngắn nhất từ đỉnh
 
s
 
đến đỉnh
 
t
 
theo thuật toán D ijkstra *)
uses crt;
const
m ax = 50;
var

n, s, t ; integer;
chon : char;

Truoc ; a ư a y [L .m ax] o f
 
byte;
d
 
: array [1..m ax] o f
 
integer;
a
 
; a ư a y [1..m ax, 1..m ax] o f
 
integer;
final
 
: a ư a y [L .m ax] o f
 
boolean;

procedure N hapSoLieu;
var

f
 
: text;
fnam e : string;

232

ChươiiỊ; ố. Bùi loán cỉitònỊị đi iiỊiắn Iilìấi

i,j
 
: integer;
begin

w rite ("Vao ten file du lieu can doc: ');

readln(fnam e);

assign(f,fnam e);

reset(f);

readln(f,n);
for
 
1 to n do
for j:=
 
1 to n do read(f,a[i,j]
clo se(0 ;
end;

procedure InSoLieu;
var

i, j : integer;
begin

writelnC So dinh cua do thi : '.n);
writelnC M a tran khoang cach:');
for
 
i
 
1 to
 
n
 
do
begin

for j:=
 
1 to
 
n
 
do
 
write(a[i,j];3,'
 
'):
writeln;
end;
end;

procedure InK etQ ua;
var

i, j : integer;
begin

writeln (' DUO N G DI NGAN N H A T T U ',s,' DEN ',1);
write(t,' < = ');
i:=Truoc[t];
while i o s
 
do
begin
w rite(i,' < = ');
i:=Truoc[i];
end;

w riteln(s);

w riteln('D o dai cua duong di la; '.d[t]);
end;

T R R - 1 6
 
233

Phần 2. Lý thuyết đồ thị

procedure D ijkstra;
var
 
V ,
 
u, m inp : integer;
begin

w rite('T im duong di tu s = ');
readln(s);

w rite('
 
den t = ');

readln(t);
for
 
v := l
 
to
 
n
 
do
begin
 
(*
 
Khởi tạo nhãn
 
*)
d[v]:=a[s,v];

Truoc[vJ:=s;
final [v]:=false;
end;

Truoc[s]:=0;

d[s]:=0;

final[s]:=true;

w hile
 
not
 
final[t]
 
do
 
(*****
 
Bước lặp
 
*****)
begin

{
 
Tim u là đỉnh có nhãn tạm thời nhỏ nhất
 
}
m inp;= m axint;
for
 
v;= l
 
to
 
n
 
do

if
 
(not final[v]) and (m inp > d[v]) then
begin
u:= v;

m inp:= d[v];
end;
fm al[u]:= true;
if
 
not
 
final[t] then
for
 
v ;= l
 
to
 
n
 
do

if
 
( not
 
final [ v ] )
 
and ( d[u] + a[u,v] < d [ v ] ) then
begin

d[v]:= d[u] + a[u,v];

Truoc[v]:= u;
end;
end:

end;

end;

2 3 4

ChươiìíỊ 6. Bài tocĩn dường di ngắn nhất

procedure M enu;
begin
clrscr;

writelnC
 
CHUONG TRINH TIM
 
DUONG DI NGAN NH
 
AT TU s DEN t
 
');

writelnC
 
THEO THUAT TOAN
 
DIJKSTRA');

writelnC

writelnC
 
1. Nhap so lieu tu file.');

w-itelnC
 
2.
 
Giai bai toan.');

writelnC
 
3.
 
Ket thuc.');

writelnC-----------------------------------------------------------------------');

writeC
 
Hay chon chuc nang: '#7):
end;

BEG IN
 
(*
 
Chương trình chính
 
*)
repeat

M enu;
 
chon:=readkey;
 
writeln(chon);
case chon o f
T : NhapSoLieu;

'2': begin

InSoLieu;
 
Dijkstra;
 
InKetQua;
end;

'3': Exit;
end;
until false;

END.

2 3 5

P h ầ n 2. L ý th u y ế t đ ồ t h ị

Bài tập

1.
 
Lập trình thực hiện các thuật toán mô tả trong chương 6:

a) T huật toán Ford - Bellm an;

b) T liuật toán D ijkstra;

c)
 
T huật toán Flovd;

d) T huật toán tìm đường đi dài nhất trên đồ thị không có chu trình (PERT).

2.
 
T rong trường hợp đổ thị thưa, các thuậl toán
 
Ford - Bellman,
 
D ijkstra, Floyd sẽ làm
viêc hiệu q u ả hơn nếu ta sử dụng danh sách kề để biểu diễn đồ thị. Hãy mô tả lại các
thuật toán trên cho trườiig hợp này, và đánh giá độ phức tạp tính toán của chúng.

3. Tìm đường đi ngắn nhất theo thuật toán D ijkstra từ đỉnh A đến tất cả các đỉnh còn lại
trên đổ thị cho trong các hình vẽ dưới đây:

a)

5

D
 
E

9
 
y
2
 
/
 
5

N
.

F

\ ^ 3
G
 
\ .

7
 
\
 
7
 
5
 
y /
 
4
 
ỵ

X
 
.
 
4
 
Ẩ
 
4
 
Á

\
 
1
 
X
 
/
 
7
 
/

J
 
K
 
L

b)

2 3 6

C l ì i C o V i Ị
 
Ó .
 
ỉ ì à i
 
Ị o ủ n
 
iĩi{'(')ìì<^ c í ì
 
I Ì ‘
Ạ U Ỉ
 
n l ì d i

4. Ap ílụng thuât tcìaii đánh số dinh tlò kicỉii tra cló Iliị sau clà\
 
cỉiứa chu Irình hav khõiii!

o

( ằ

y

9

5. Xét đổ thị uồni 7
 
đ i n h
 
A. B, c . D, E. F, G
 
c h o
 
boi ma
 
Irậii I r ọ n u
 
s ố

A
 
B
 
C
 
D
 
E
 
F
'
 
G

A
 
0
 
1 1
 
65
 
17
 
65
 
6,5
 
63

B
 
65
 
0
 
12
 
65
 
65
 
10
 
16

C
 
65
 
65
 
0
 
13
 
.14
 
65
 
19

D
 
65
 
65
 
65
 
0
 
65
 
6?
 
18

E
 
65
 
65
 
65
 
65
 
0
 
65
 
15

F
 
65
 
13
 
18
 
65
 
65
 
0
 
10

G
 
65
 
65
 
65
 
65
 
65
 
65
 
0

Tim đườnũ di n^án nhát
 
íừđinlì A đèn diiìh G iheo thuật loán Dijkstra. Yêu cầu viết rõ
kêt quá triinu uian imnu lừna bước. Kốí quá cuối cùim: Đuờnụ đi niĩán nhất từ A đến G
và độ dài cúa nó.

6. Cho mội bảng gồm
 
/7/x// ô.
 
Nếu
 
m ộ l
 
ô
 
năm
 
ỏ'
 
hàne /
 
CỎI
 
/ của bán^ ihì ta
 
sẽ
 
nói
 
ổ
 
này

c ó toạ đ ộ (/./) (/“ 1,2
 
.....
 
/77; / =
 
1,2
 
......
//).
 
T ron e nìỏi ỏ vicì inõl
 
s ố
 
n e u y ê n
 
Ì M ọ ị
 
là
 
uiá tĩỊ cứa

ô). Từ một
 
ò bất
 
kỳ của báne chi có thê di chuyên den nhü'n” ỏ ớ bên
 
phai có chunu
cạng hoặc đinh với nỏ. DCr liệu ve báim nói irén clươc clio trorm một file vãn bán cổ tên
DATA3.INP, dò ne đáu tién của nỏ chứa hai số
 
f)i. n
 
được uhi cách nhau bởi dấu cách.
Mỗi dò ne
 
thứ
 
/
 
tron<ĩ số
 
n ì
 
clòne ĩiếp theo chứa
 
n
 
sổ'
 
iỉhi
 
tronií
 
n
 
ò
 
cúa dòníĩ thứ
 
ĩ
 
cúa

báng* cấc số được ghi cách nhau bới dấu cách (/=1,2
 
.....
fìỉ).
 
Hãy lập trình nhập dữ liệu

vào từ file, sau đó tìm dãy cđc di chuyển từ nicp
 
Irái
 
cúa bâim sane mép phái của bárm
sao cho tống sò các ííiá trị cúa các ô đi qua
 
là nho nhất.
 
Yêu cầu
 
kết quà đưa ra dưới
clạne cỉTiv toạ dộ của các ô cán di chuyến qua hál dáu từ một ồ xuất
 
phát ờ mép trái và
kếr íluìc ở một ố nào đó ỡ mép phái, và tổim sờ' các i!Ìá trị của các ò này.

237

Phcin 2. L v ihuyé'í đ ổ th ị

7. C h o d ã y /? s ố
 
n g u y ê n
 
-V
[ 1
 
],
 
AÌ2],. .. ,
 
.v[/í], tron« đó
 
Ị</7<Ị()()()
 
và
 
l< v[/]< 2()(), / =
 
1.

D ã y
 
s ố
 
đã
 
c h o
 
đuực
 
ghi
 
trone
 
m ột
 
file
 
văn
 
bủn
 
c ó
 
tíMi
 
là
 
D A T A 4 .1 N P .
 
các
 
s ố

được ưhi c á c h nhau bởi ít nhất m ột dấu cá ch h o ặ c dâ'ii xLiốns d ò n « .
 
N h ậ p dũ' liệu và o từ

file, sau đó tìm c á c h
 
xo á b ỏ ít nhất m ột s ố cá c
 
ỊDhần
 
tử của d ãy đã c h o sa o c h o c á c phán

tù
 
cò n
 
lại
 
(iiiừ
 
n e u y ê n
 
thứ
 
tự
 
CLUI
 
c h ú n s
 
troim
 
dãy
 
ban
 
đ ầu)
 
tạo
 
thành
 
nìột
 
d ãy
 
co n

khôim
 
g iám .
 
Đ ư a
 
ra màn
 
hình
 
tổn«
 
s ố
 
cá c
 
phán
 
tử cán
 
x o á
 
và
 
chí
 
s o
 
của
 
ch ú n u
 
trono

dãv đfi ch o.

8.
 
D ãy
 
s ô
 
n u u y ẽn
 
a [ l | .
 
a |2 J ..........a Ịm |
 
được
 
ưọi
 
là
 
d ã y
 
c o n
 
củ a
 
d ãy
 
c o n
 
của
 
day
 
sô

n g u y ên
 
b[ I ], b | 2 |
 
......
 
b[n] (m < n)
 
nếu tìm được dãy c á c ch i s ố j[ 1 1. j | 2 | , . . . J | m |
 
sa o
 
cho

I
 
j [ l l <
 
j | 2 | < . . . < j | n i | < n

và

C h o hai dãy s ố nsLiyèn

a |i l = b | j [ i ] ] , i = 1 . 2
 
.....
 
m.
 
(1)

C[ 1] , C| 2J, . . .
 
, c ị p | ,
 
(2)

d | l l d f 2 ] , . _ d [ q l .
 
(3)

D ữ liệu về hai d ãy s ố được
 
sh i iTOim file
 
Vein
 
bàn c ó tên là
 
D A T A 5 .I N P . d ò n g đấu
 
tiên

chứa hai
 
số
 
p, q đ ư ợ c
 
ghi
 
cách
 
nhau
 
bởi
 
dấu
 
cá ch .
 
T ro n g
 
c á c h
 
d ò n e
 
tiếp
 
theo
 
ehi
 
lán

lượr các
 
phần tử củ a
 
d ãy (2)
 
rồi liếp đ ến cá c
 
phần tứ của dãy
 
(3).
 
c á c
 
s ố
 
^hi c á ch
 
nhau

bới
 
ít nhất m ộ t dấu c á c h
 
hoặc dấu
 
xuốnti d ò n g .
 
H ãy
 
lập trình nhập dũ‘ liệu
 
vào từ file,

sau đ ó tìm d ãy
 
co n
 
c h u n g c ó
 
số
 
phần từ
 
là
 
lớn nhất củ a
 
hai dày
 
đã ch o .
 
K ếi quá dưa ra

file
 
c ó
 
tên
 
K Q U A 5 - O U T :
 
d ò n g
 
đầu
 
tiên
 
chứa
 
s ố
 
phần
 
c ù a
 
dãy
 
c o n
 
ciìunu
 
ù m
 
đ ư ợ c,

trone các
 
dòni:
 
tiếp th e o
 
lần lượt uhi cá c phần tứ của hai
 
dãy
 
chỉ
 
s ố
 
íL i'0'n iz
 
ứnií ch i rõ
 
v ị

trí cúa
 
dãy c o n
 
này
 
tr o n e
 
hai
 
dãy
 
ban
 
đẩu
 
(các
 
s ố uhi
 
c á c h
 
nhau
 
bới
 
ítiihfii
 
m ộ i
 
dán

cách hoặc dấu x u ố n g dòni>.

9.
 
C h o
 
bàn
 
c ờ
 
q u ố c
 
t ế g ổ m
 
n . n
 
ỏ
 
( n
 
<
 
5 0 ).
 
T rong
 
m ỗ i
 
ô
 
( ị j )
 
cú a
 
nó
 
ta
 
điển
 
m ột
 
s ổ

n g u y ê n
 
d ư ơ n g
 
a [ i j ]
 
< 1 0 0 ,
 
/',
 
j
 
=
 
1,2,...,;?.
 
Từ m ộ t
 
ô
 
bất
 
kỳ
 
(/,/)
 
c ủ a
 
bảrm ta c ó
 
thế
 
di

ch u y ển
 
sang ô c ó c ù n g m ầu với nó nếu như
 
aị i j \
 
là s ố chẵn, và sail" ô khác m àu với
 
nỏ

n ếu
 
a[ij]
 
là s ố lẻ.
 
D ữ liệu được c h o trone niột file văn bân c ó tên là D A T A 6 .Ì N P , d ò n íĩ

đầu tiên chứa s ố
 
n.
 
T r o n c cá c d ò n g tiếp th eo chứa c á c
 
phần
 
tử ¿/[1,] ],
 
a\
 
1.2],
 
....
 
aị
 
1

a [/ỉ,2 ],
 
aịỉì.n],
 
c á c
 
s ố đ ư ợ c lần
 
lượt «hi
 
th eo
 
thứ tự vừa n éu
 
và cá ch
 
nhau

bởi ít nhấr m ột dấu c á c h hoặc dấu x u ố n g dòng.

Yêu cầu:
 
T i m
 
m ộ t c á c h
 
d i c h u y ể n
 
m ộ t
 
ô
 
n à o
 
đó ở
 
c ộ t ĩ h ứ n h ấ t
 
sani;
 
m ộ t
 
ô
 
nào
 
đó ớ
 
cột

t h ứ
 
n
 
c ù a b à n
 
c ờ
 
s a o
 
c h o
 
t ổ n «
 
c á c
 
s ố
 
g h i
 
t r o i m
 
c á c
 
ô
 
d i c h u y ế n
 
q u a
 
là
 
n h ó
 
n h ấ t .
 
Đ ư a
 
ra

m à n
 
h ì n h
 
k ế t q u á
 
d iiứ i
 
d ạ i m
 
b a
 
s ố
 
n ỵ u y ê n
 
.V.
 
V.
 
rrona
 
đ ó
 
A'
 
là
 
ìo ạ
 
đ ộ
 
d ò n g
 
c ú a
 
ò
 
x u ấ t
p h á t .
 
V - t o ạ đ ộ dòriỉx CLia ô k ế l t h ú c , L - t ổ n g c á c
 
s ố
 
ỉỉhi t r o n g c á c
 
ô
 
c ầ n
 
d i c h u y ể n
 
q u a .

238

Chương 7. Bài toán luồng cực đại trong mạng

1

BÀI TOÁN LUỒNG
 
cực
 
ĐẠI

TRONG MẠNG

Bài toán luồng cực đại trong m ạng là một trong sô' những bài toán tối ưu trên đồ thị
tìm được những ứng dụng rộng rãi trong thực tế cũng như những ứng dụng thú vị trong
lý thuyết tổ hợp. Bài toán được đề xuất vào đầu những năm
 
1950, và gắn liền với tên
tuổi của hai nhà toán học M ỹ là Ford và Fulkerson. Trong chương này chúng ta sẽ trình
bày thuật toán của Ford và Fulkerson để giải bài toán đặt ra và nêu một số ứng dụng của
bài toán.

7.1. Mạng. Luồng trong mạng. Bài toán luồng cực đại

Đ ịn h
 
n g h ĩa
 
L
 
T a gọi m ạng là đ ồ thị có hướng G = (V, E), trong đó có duy nhất m ội

đỉnh s không có cung đi vào gọi là điểm phát, duy nhất m ộ t đỉnh t không có cung đi ra

gọi là điểm thu và m ỗi cung e
 
= (v,w) G
 
E được gán với m ột s ố không âm c{e)
 
=
 
c{v,w)

gọi là kh ả năng thông qua của cung e.

239

Phân
 
2.
 
Lý thuyết đồ thị

Để thuận tiện cho việc trình bày ta sẽ qui ước rằng nếu không có cung (v,vv) thì khả
nãng thông qua
 
c{v,w)
 
được gán bằng 0.

Đ ịnh n g h ĩa 2.
 
G iả sử cho m ạng G ={V, E). T a gọi luồng f
 
ĩrong nuìììg G -
 
(V,
 
E)
 
ỉíi

ánh xạ f
 
:
 
gán cho m ối cung e -
 
(v,w)
 
G
 
E m ột sô'thực không á m f{e )
 
= /(v^uO,

gọi là luồng trên cung e, ílĩoả mãn các diều kiện sau:

ỉ) Luồng trên m ỗi cung
 
e e E
 
không vượĩ quá khả năng thông qua của nó:

0 <
 
f{e ) < c{e),

2)
 
Đ iều kiện cân bằng luồng ĩrẻn m ỏi đỉnh của mạng: Tổng-ìuổn^ ĩrên ccềc cun^ đi

vào đỉnh
 
V
 
bằng ìổng luồng ĩrên các
 
C i i t ĩ ^
 
đi ra khỏi đỉnh
 
V
,
 
nếu
 
V
 
ĩ :

It'6r“ (v)
 
ueP* (v)

trong đó p (v ) - tập các đỉnh của m ạng mà từ đó có cung đến
 
V,
 
p (v ')
 
-
 
tập các đỉnh cúa
m ạng m à từ
 
V
 
có cung đến nó:

r ( v ) = { H 'e V ;
 
( v l^ v ) e £ ') ,
 
P (
 
v
) = {
 
h
'
 
g
 
V:
 
(
v
,
 
w ) e £ | .

3) Ta gọi giá trị của luồng f
 
là s ố

v a l ự ) =
 
Ỵ ^ f { s , w ) =

vv6r'*^(.ì}
 
M
eV"
 
{{)

Chú ý là đẳng thức thứ hai trong định nghĩa giá trị luồng là hệ quả của điều kiện cân
bằng luồng.

Bài toán luồng cực đại trong mạng:
 
Cho m ạng G= (V,
 
E).
 
H ãy tìm luồng
 
j*
 
trong
m ạng với giá trị luồng
 
va lự * )
 
là lớn nhất. Luồng như vậy ta sẽ gọi là luồng cực đại
trong mạng.

Bài toán như vậy có thể xuất hiện trong rất nhiều ứng dụng thực tế. Chẳng hạn khi
cần xác định cường độ lớn nhất của dòng vận tải giữa 2 nút của m ột bản đồ giao thông.
Trong ví dụ này lời giải của bài toán luồng cực đại sẽ chỉ cho ta các đoạn đường đông
xe nhất và chúng tạo thành
 
"chỗ hẹp"
 
tương ứng với dòng giao thông xét theo 2 nút
được chọn. Một ví dụ khác là nếu xét đồ thị tương ứng với m ột hệ thống đưòfng ống dẫn
dầu. Trong đó các ống tương ứng với các cung,
 
điểm phát có thể coi là tàu chở dầu,
điểm thu là bể chứa, còn những điểm nối giữa các ống là các nút của đồ thị. K hả năng
thông qua của các cung
 
tưcfng ứng với tiết diện các ống. Cần phải tìm
 
luồng dầu lớn
nhất có thể botn từ tàu ch ở dầu vào bể chứa.

240

C hươnị^ 7. B ải
 
ío ú fi liiótìíị cực d ạ i ĩroỉìí^ lỉìạỉìíị

7.2. Lát cắt. Đường tăng luồng. Định lý
 
Ford
 
- Fulkerson

Đ ịn h n g h ĩa
 
3.
 
Ta gọi lá! cắt
 
(X,
 
X ) là m ột cách phàn hoạch tựp đỉnh V của mạng ra

thành hai tập X và ỉC
 
=
 
V
 
\ X,
 
iron^ dó s e X và
 
ĩ
 
6
 
X . Klìd ncĩn !^ :hâng qua của lái cắt

(X, X
 
)
 
là s ố

ve,V

U
'fe.v
"

L á ĩ c ắ ĩ v ớ i
 
khá
 
ììănọ, ĩìiô ììg q u a n h ỏ n h á i d ư ợ c
 
í^ọi tủ
 
Ỉáỉ cắt hẹp n h ấ t.

Bổ đề 1.
 
Giá trị của m ọi ỉuồnọ, f
 
ĩroniị mợỉìỉ^ lỉiỏỉì nhô lìơn lìoặc bằng khả nâng thông

qua của lát cắí ịX ,X )
 
hấĩ kỳ trong nó:
 
yaỉ(f)
 
< íịX ,ỉỉ) .

C h ứ n g m in h . Cộng các điều kiện cân bằng luồns
 
Dì\\{\')
 
= 0 với m ọi V G X
 
Khi đó ta

c ó

z
 
(
 
z
 
z
 
/ ( ' ’>"'))
 
=
 
- v a l ự )

V
 
e
 
.V

vt'
 
e
 
r
 
(v)
 
vt’ e
 
r^ (v ;

tổng này sẽ gồm các số hạng dạng /(ỉ/,v) với dấu cộng hoặc dấu trừ m à trong đó có ít
nhất m ột trong hai đỉnh
 
u,
 
V
 
phải thuộc tập
 
X.
 
Nếu cà hai đinh
 
u,
 
V
 
đều trong tập X thì
xuất hiện với dấu cộng trong
 
Di\’
j{v)
 
và với dấu trừ trong
 
D
 
í V ị { u ) ,
 
v ì
 
thế, chúng
triệt tiêu lẫn nhau. Do đó, sau khi giản ước các sô hạng như vậy á v
 
ê' trái, ta thu được

vg
X
 
V
€
,V
*

U
’g.v’
 
H-€A
'

hay là

v a / { /) =
 
ỵ ^ f { v , w ) -
 
X /(v ,u -).

l-E
.V
 
i-e.v’

u e .V
 
.V

M ặt khác, từ
 
điều kiện 1 rõ ràng là

ỵ ^ f ( v , w ) <
 
ỵ^c{v,w),

• € . v
 
v e .\
X€ .V

u-eA '
 
ire.v'

Cổn

-
 
ỵ ^ f { v , w ) <
 
0
 
.

V
€.v‘

U6.V

suy ra
 
valự ) < cịX, )C).
 
Bổ đề được chứng minh.

241

Phần 2. Lý thuyết đổ thị

Từ
 
bổ đề 1 suy ra

H ệ q u ả 1.
 
Giá trị luồng cực đại trong m ạng không

VIÍ0
 
quá khả năng th ô n ^ qua của lát

cắt
 
hẹp nhất trong mạng.

Ford và Fulkerson đã chứng mitih rằng giá trị luồng cực đại trong m ạng đúng bằng
khả năng thông qua của lát cắt hẹp nhất. Đ ể có thể phát biểu và chứng m inh kết quả này
chúng ta sẽ cần thêm m ột số khái niệm .

Giả sử /
 
là m ột luồng trong m ạng
 
G = (V, E).
 
Từ m ạng
 
G = (V, E)
 
ta xây dựng đồ
thị có trọng số trên cung ơy. =
 
(V, Ej),
 
với tập cung
 
Ej
 
và trọng số trên các cung được xác
định theo quy tắc sau:

1)
 
Nếu
 
e
 
= (v,w) êí
 
E
 
với/(v,w ) = 0, thì (v,H’) e
 
với trọng số c(v,w);

2)
 
N ếu
 
e =
 
(v,w) 6
 
E
 
với/(v,w ) =
 
C
’( v ,w ) ,
 
thì (w,v) e
 
EịVÔì
 
trọng s ố
 
f{v,w )\

3)
 
N ếu
 
e -
 
(\',w) e
 
£
 
với 0 < f(v,w) < c(v,w), thì (v,w) e
 
E f
 
với trọng số
 
-

fiy ,w )
 
và
 
( w , v )
 
G
 
E f
 
với trọng số/(v,w ).

Các cung của
 
Gf
 
đồng thời cũng là cung của
 
G
 
được gọi là
 
c u n g th u ậ n ,
 
các cung còn lại
được gọi là
 
c u n g nghịch.
 
Đ ồ thị ơy^được gọi là
 
đ ồ th ị tă n g luồng.

T h í d ụ : Các số viết cạnh các cung của
 
G
 
ở hình 1 theo thứ tự là khả năng thông qua và
luồng trên cung.

3.0

G

H ìn h 1. M ạng
 
G
 
và lu ồ n g / . Đ ồ thị có trọng số
 
Gf
 
tương ứng.

242

Chương 7. Bcỉi toán ỉuồng cực dại ĩroiig niạng

G iả sử
 
p
 
= {s ~
 
V,;,
 
V /,
 
v ..
 
Vị.
 
~ t)
 
là một đường đi lừ .Vđến
 
Ị
 
trên đổ thị tăng
luồng
 
Gj,
 
Gọi ô là giá trị nhỏ nhất của các trọng sô cúa các cung trên đường đi p . Xây
dựng l u ồ n g / ' trên m ạng
 
G
 
theo quy tắc sau:

f
 
(w, v) +
 
ỗ,
 
nếu {ii,v)
 
e
 
p ¡à cung íhuận,

f {u,
 
v) -
 
s,
 
nếu (u,v) & p ỉà cung nghịch,

/ ( m , v ) ,
 
n ê ĩ i { u , v ) í P .

D ể dàng kiểm tra được r ằ n g / ' được xáy dựng như trên là luồng trong m ạng và
 
v a lự ') =

val(f)
 
+
 
5.
 
Ta sẽ gọi thủ tục biến đổi luồng vừa nêu là
 
tă n g lu ồ n g dọc theo dư ờng p .

Đ ịn h
 
n g h ĩa
 
4. Ta gọi đườỉig tăng l u ồ n g /
 
là m ọi dường di từ

s
 
đến t trên đồ thị tăng

luồng Gự).

Đ ịnh lý dưới đây cho mối liên hệ giữa luồng cực đại, đường tăng luồng và lát cắt.

Đ ịn h lý 1.
 
C ác mệnh đ ề dưới đây là tương đương:

(/)
 
/
 
là luồng cực đại trong mạng:

(ii)
 
K hông tim được đưcyng tãn^ lu ồ n q f:

(///)
 
valự) -
 
c {X X ) yới m ột lát cắt {X,
 
/ )
 
nìio đó.

C h ứ n g m in h .

(;■) => (//). Giả sử ngược lại, tìm được đưcmg tăng luồng
 
p .
 
Khi đó ta có thể tăng giá
trị luồng bằng cách tãng luồng dọc theo đường
 
F.
 
Đ iều đó m âu thuẫn với tính cực đại
của lu ồ n g /.

(í7) =>
 
(Ui).
 
G iả sử không tìm được đường tãng luổng. Ký hiệu
 
X
 
là tập tất cả các
đỉnh có thể đến được từ đỉnh 5 trong đồ thị Gy, và đặt X* = V \ X K hi đó (X,
 
X )
 
là lát cắt,
và
 
f{v ,w ) =
 
0 với m ọi
 
V
 
e )C,W e X
 
nên

v a i { f) =
 
ỵ ^ f ( v , w ) ~ ỵ ^ f { v , w ) =
 
ỵ ^ f { v , w )

veA'
 
vg
 
A'*

u e X'
 
H'eA’
 
ue.Y*

Với
 
v e x , w
 
e )C,
 
do
 
(v,
 
w)
 
Ể Gy, n én /(v , w) = c(v, vv). Vậy

v ứ / { / ) =
 
Y ^ f { v , w ) =
 
Ỵ _ ^ c(v,w ) = c { X , X ' ) .

V € X
 
ve.V

ireA
'
 
u'eA
’

{Ui)
 
=> (/). Theo Bổ đề
 
\ ,val{f) < c{X, X )
 
với mọi lu ồ n g /
 
và với mọi lát cắt
 
{X, )C).

Vì vậy, từ đẳng thức
 
val(f) = c ịX ,){)
 
suy ra lu ồ n g / là luồng cực đại trong mạng.

Đ ịnh lý được chứng minh.

243

Phẩn 2. Lý ĩỉĩuyêì dồ tỉìị

7.3. Thuật toán tìm luồng cực đại trong mạng

Đ ịnh lý 1 là cơ sở để xây dựng thuật toán lặp sau đây để tìm luồng cực đại trong m ạng:
Bất đầu từ luồng với luồng trên tất cả các cung bằng 0 (ta sẽ gọi luồng như vậy là luồng
không), và lặp lại bước lặp sau đây cho đến khi thu được luồng m à đối với nó không còn
đường tăng:

B ư ớ c lặp tă n g lu ồ n g
 
(Ford - Fulkerson): Tim đường tăng
 
p
 
đối với luồng hiện có. Tăng
luồng dọc theo đường
 
p .

Khi đã có luồng cực đại, lát cất hẹp nhất có thể tìm theo thủ tục m ô tả trong chứng m inh
định lý 1. Sơ đồ của thuật toán Ford - Fulkerson có thể m ô tả trong thủ tục sau đây:

p ro c e d u re M a x
 
F lo w ;

(*
 
T h u ậ t toán F o rd
 
-
 
F u lk e rso n
 
*)

begin

(*
 
Khởi tạo: Bắt đầu từ luồng với giá trị 0
 
*)
for u e
 
V do

for
 
V
 
e
 
V do
 
f(u,v);=0;

Stop:=false;
w hile not Stop do

if
 
<Tìm được đường tání> luồng p>
 
then
 
<Tăníị luồng dọc theo p>

else
 
Stop:=true;

end;

Đ ể tìm
 
đường tăng luồng trong ơy có thể sử dụng thuật toán tìm
 
kiếm
 
theo chiều
rộng
 
(hay
 
tìm
 
kiếm
 
theo chiều
 
sâu) bắt đầu từ đỉnh
 
trong đó không cần xây
 
dựng
tường m inh đồ thị
 
Gf.
 
Ford - Fulkerson đề nghị thuật toán gán nhãn chi tiết sau đây để
giải bài toán luồng cực đại trong m ạng. Thuật toán bắt đầu từ luồng chấp nhận được nào
đó trong m ạng (có thể bắt đầu từ luồng không), sau đó ta sẽ tăng luồng bằng cách tìm
các đường tăng luồng. Để tìm đường tăng luồng ta sẽ áp dụng phương pháp gán nhãn
cho các đỉnh. M ỗi đỉnh trong quá trình thực hiện thuật toán sẽ ỏ m ột trong 3 trạng thái;
chưa có nhãn, có nhãn chưa xét, có nhãn
 
đ
 
ã
 
xét. N hãn của m ột đỉnh
 
V
 
gồm 2 phần và có
m ột trong 2 dạng sau:
 
[+p(v),£(v')] hoặc
 
[-/?(v),£(v)]. Phần thứ nhất
 
+p{v)
 
(hoặc
 
-p{v))

chỉ ra là cần tăng (hoặc giảm ) luồng theo cung
 
Qy{v),
 
I’) (cung (v,
 
p{v))
 
còn phần thứ hai
£(v) chỉ ra lượng lớn nhất có thể tăng hoặc giảm luồng theo cung này. Đ ầu tiên chỉ có
đỉnh 5 được khởi tạo nhãn và nhãn của nó là chưa xét, còn tất cả các đỉnh còn lại đều
chưa có nhãn. T ừ 5 ta gán nhãn cho tất cả các đỉnh kế với nó và nhãn củ a đỉnh 5 sẽ trở
thành
 
đ ã
 
xét. T iếp theo, từ mỗi đỉnh
 
V
 
có nhãn chưa xét ta lại gán nhãn cho tất cả các

244

Chươììiị 7. Bcìi ỉoán Ịuổììs> cực dại íroỉìí^ ỉnọỉĩíị

đ ỉn h c h ư a c ó n h à n
 
k ề
 
với
 
n ó và nhãn c ủ a đin h
 
V
’
 
trở ih àn h đã xét.
 
Q u á
 
trình s è đ ư ợ c
 
lặp

lại c h o đ ến khi h o ặ c
 
là đ ỉn h
 
ĩ
 
trở ih àn h c ó nhàn h o ặ c
 
là nhãn c ủ a tất c ả c á c đ ỉn h c ó
 
n hàn

đ ề u
 
là đ ã
 
x ét
 
n h ư n g
 
đ ỉn h
 
t
 
vẫn
 
k h ô n g
 
c ó
 
nhãn.
 
T ro n g
 
trường
 
h ợ p thứ nhất
 
ta tìm
 
đ ư ợ c

đ ư ờ n g
 
tăn g
 
lu ồ n g ,
 
c ò n
 
tro n g
 
trường
 
hợp
 
thứ hai
 
d ố i
 
với
 
lu ồ n g
 
đ a n g x é t
 
k h ồ n g lồ n
 
tại

đ ư ờ n g tăn g l u ồ n g (tứ c là lu ồ n g đã là c ự c đại). M ỏ i khi tìm
 
đ ư ợ c
 
đ ư ờ n g tă n g l u ồ n g ,
 
ta
 
lại

tăn g
 
lu ồ n g
 
t h e o
 
đ ư ờ n g
 
tìm
 
được,
 
sau
 
đ ó
 
x o á
 
tấl cá c á c
 
n h ã n
 
và đ ố i
 
với
 
lu ồ n g
 
m ớ i
 
thu

đ ư ợ c
 
lại
 
sử d ụ n g
 
p h é p
 
g á n
 
nhãn
 
c á c
 
đỉn h
 
để
 
tìm
 
đ ư ờ n g
 
tăn g
 
lu ồ n g .
 
T h u ậ t
 
toán
 
s ẽ
 
kết

ih ú c khi n à o đ ố i
 
với l u ồ n g đ a n g c ó trong m ạ n g k h ô n g tìm đ ư ợ c đ ư ờ n g tă n g lu ồ n g .

H ai thủ tục T im
 
đ ư ờ n g táng iUổng và T á n g lu o n g c ó thể m ô lả n h ư sau.

p ro c e d u re F in d
 
P a th ;

(*
 
T h ủ tục g á n n h ã n
 
tìm
 
đ ư ờ n g tăn g lu ồ n g

p [v ],
 
e[ v ]
 
là n h ã n c ủ a đ ỉnh v;

V j
 
-
 
danh s á c h
 
các
 
đ ỉn h
 
có
 
nhãn n h ư n g ch ư a xét;

c [u ,v j - k h ả n ă n g t h ô n g qua c ủ a c u n g (u, v), u,
 
V
 
G V;

f[u ,v ] - lu ồ n g írên c u n g (u, v), (u,
 
V
 
€
 
V )

b e g in

p[s] ;= s;
e[s]:=: +co;

V
t
 
=
 
V \ Ị s Ị ;

PathFound:=true;
while
 
0
 
do
begin

uc
= V
 
t
 
;
 
(*
 
Lày
 
u
 
luV.,-'’-')

for
 
V e
 
v \ Vx do

begin

if
 
(c[u, vj > 0) and (l'[u, v] < c[u,vj) then
begin

p[v]:= u;

£ [v ]:- min Ị e[u]. cfu,vj - f[u,vj;

V j = V-,
 
u
 
j vỊ; (* Nạp
 
V
 
vào danh sách đỉnh có nhãn *)
if
 
V
 
= t then
 
exit;

end;

if
 
(c[v,u] > 0) and (f[v, u] > 0) then
begin

p[v]:= -u;

e[v ]:= m in
 
Ị e[u], f[v,u] Ị;

Wj =
 
V,.
 
u
 
IVI; (* Nạp
 
V
 
vào danh sách đinh có nhãn *)

245

Phần 2. Lý thuyết đồ thị

if
 
V
 
= t then
 
exit;

end;

end;

PathFound:=false;

end;

procedure Inc_Flow ;

(*
 
Tăng luồng theo đường tăng *)
begin

V
 
:= p[t]; u:=t; tang:= e[t];

while u
 
s do

begin

if
 
V
 
> 0 then f[v, u] := f[v, u] + tang

esle

begin

v:= -v;

f[u,v]:= f[u,v] - tang;

end;

u:=v; v;==p[u];

end;

end;

Thuật
 
toán Ford - Fulkerson được thực hiện nhờ thủ tục:

procedure M ax
 
Flow;

(*
 
T h u ậ t toán F o rd - F u lk e rso n *)

begin

(*
 
Khởi tạo: Bắt đầu từ luồng với giá trị 0
 
*)
for u 6 V do

for
 
V
 
e
 
V do
 
f[u,v]:=0;

Stop:=false;
while not Stop do
begin

Find_Path;

if
 
PathFound
 
then
 
Inc_Flow
else
 
Stop:=true;

end;

<
 
Luồng cực đại trong m ạng là f[ u ,v j, u , v
 
e V
 
>

< Lát cắt hẹp nhất là (V j, V \V j) >

end;

246

C ỉ ì t ỉ ' i / / n ^
 
7.
 
B à i
 
ỉ o á n
 
ỉ i i o n ^ ^
 
C ' ự ( '
 
( ĩ ạ i
 
ì r o i r ^
 
l ì ỉ Ợi ỉ ' ^

G ia
 
sừ là khá
 
n ă n e
 
tliôna qua cú a
 
tát ca c á c
 
cuim cúa d ổ ihị
 
là c á c
 
s ố
 
n g u y ê n .
 
Khi
 
đó

sau
 
m ỗi
 
lần
 
Vầnz
 
luồnu.
 
uiá
 
trị
 
luổni:
 
sò tã n e
 
lên
 
ít nhăì
 
là
 
1. T ừ đ ó
 
suy
 
ra thuật
 
toán

Ford - F u ik erso n
 
sẽ dừrm sau
 
k h ỏ n g
 
quá
 
vcilự)
 
lán lãnu
 
ỉuổim
 
và c h o ta lu ổ n e cự c đại

tronu niạnu.
 
Đ ổ im
 
rhời. rồ ràne
 
f{ỉt,v)
 
sè !à s ố nm iyên
 
đói
 
với m ỏ i
 
c u n s
 
(//.
 
V)
 
G E.
 
Từ

đ ó ta c ó c á c kết q u ả sau:

Đ ịnh lý 2
 
(Đ ịnh lý
 
vế
 
liiổng
 
cục dại
 
trong m ạng
 
vcì
 
lát
 
cắt hẹp
 
nhát), Litổìv^
 
cực
 
dại

tron<i nìọny
 
hẳn^ khá năny ĩhông qua Cỉìa láĩ cáỉ hẹp nìiấĩ.

Đ ịnh
 
lý 3. (Đ ịnh
 
lý
 
v é
 
tính
 
nguyên).
 
Nế u
 
ĩấĩ
 
c à cúc
 
khà
 
năng
 
thông
 
qua
 
lâ
 
ràr sô

l ỉ ị ỉ L i y é n
 
í í ỉ ì
 
luôn ĩìrn diíợc ¡lióììg cực
 
d ợ ỉ
 
với
 
Ỉiiồỉìg
 
ỉ r ứ i ì
 
í - ú c
 
cung
 
l à
 
c ác
 
s
 
ố
 
nguycn.

Hai định lý vừa nêu đư ợc sứ d u n e iroỉiu việc
 
ứniì dụnu iu ồ n e cực đại vào v iệ c siá í q u y êì

nhiều bài toán tr o n s tố họp.

T u y
 
n h iên ,
 
nếu
 
c á c
 
khá
 
n ã n e
 
thổnu qua là các
 
số
 
râì
 
lóìì thì
 
giá
 
trị cú a
 
lu ồ n g
 
cực

đại c ũ n e c ó thế là rất ỉớn và khi d ó thuật toán m õ tã ờ trẽn sẽ clòi h ỏi thực hiện rất nhiều

bước tăng
 
lu ổ n e . T h í dụ ĩroni; hình
 
2 sẽ mi nh
 
hoạ ch o điều này. H ình
 
2(a)
 
m ổ tá m ạ n e

cần
 
xét với c á c khả năim
 
ĩ h õ n e
 
qua (rên các
 
CLiim.
 
Hình 2(b) m ổ rá ỉuồng trên các cu n g

( s ố thứ hai b èn
 
cạnh c u n g ) sau
 
khi
 
thực hiện
 
lang luóniĩ d ọ c
 
theo đươim tănu
 
lu ồ n g
 
(s,

a, h, í).
 
H ình
 
2 ( c )
 
m ò
 
tả
 
ỈL iổ n a
 
trên
 
các
 
ciiriií
 
sau
 
khi
 
thực
 
hiện
 
tănu
 
luồnu
 
d ọ c
 
theo

đươnư
 
tãim
 
luổnií
 
[s, h,
 
í/,
 
ỉ).
 
R õ ràne. sau
 
2AƠ'
 
láii tãnu luồng th eo
 
đườriiỉ
 
(.V,
 
a. h.
 
/)
 
và

(s, b.
 
C L
 
ĩ)
 
m ộ t c á c h luân phien ta ihu được luổni> cực đại.

5
 
5

IC/M
r
 
\iO^O
 
iCM
 
/
 
\ i O M

/
 
1.
 
1
 
\
 
/
 
1.0

a
 
\
 
/
 
b

i0^.1
 
\
 
/ W
 
. 0
 
i o m X
 
j
 
/
 
lOM

( a )
 
( b )

H ình
 
2.
 
V í du tồi tệ đối với thuật toán Ford " Fulkerson.

ỉ

(C)

Hơn
 
t h ế nũ’
a,
 
nếu
 
các
 
khả
 
nãnu
 
thông
 
qua là các
 
s ố vô tý,
 
người
 
ta cò n
 
x â y
 
dựrm

được
 
ví dụ
 
để
 
c h o
 
thuật
 
toán
 
k h ô n e
 
dừỉìg,
 
và tệ
 
hoTì
 
là nếu
 
dãy
 
c á c
 
g iá
 
trị
 
lu ồ n g
 
xây

dựnư th e o thuật toán
 
hội tụ thi
 
n ó c ò n k h ôn g hội tụ đến
 
íziá trị l u ổ n s cự c đại.
 
N h ư vậy.

247

Phún 2. Ly Ịhuyẽí dổ Ịỉu

iiìLiòn lỉiLiàỉ toán lànì việc hiệu qua. việc lựa chọn dườne lăna luóim cần dược liên liànli
hêt sức cân thận.

Edmonds và Karp clìi ra rániz nếu đườim lãnu luổn” được chọn
 
là du‘
ờniz nuan nliái

ù r
 
.V
 
đ ế n
 
ĩ
 
i r ẽ i ì
 
đ ổ
 
thị
 
( j ị
 
.
 
Điéu
 
đ ỏ
 
c ó
 
thế thực hiện,
 
n ế u
 
Iron^ thú
 
IL ỈC
 
tìm dirừne
 
U ÌIÌ1>

Find_Path mò tá ờ trên, danh sácỉi \ 'y được tổ clul'c dưới dạna Q U E U E (nulìĩa là la llmc
hiện tìm đườnn lane bởi thú tục ĩìm kiếm theo chiéu rộnu) llìì thuật loán sẽ kếl thúc sau
khổim quá
 
ỉìỉii/2
 
láii
 
sứ dụri” đườna
 
íanu
 
liiổĩm.
 
Nêìi
 
ciể ý rànu,
 
tìm
 
kiếm
 
theo clìiéu
rộne Irẽn đổ ĩhỊ clòt hoi llìời man 0(//+///), thì Ihuậi loáiì íhii được sẽ có độ phức tạp línli
toán ỉà ()(///// ).

Nliờ cácỉì lố chúv lìm duoim tănu khéo léo hơn, nuười
 
la đã xãv dựnu dược
 
llìitậi
loán
 
với
 
độ
 
phức
 
tạp
 
tínlì
 
toán
 
tốt
 
hơn
 
như;
 
0(//"//í)
 
(Dinic,
 
1970),
 
0 (// ')
 
(Kai/,i.!iiov.
1974),
 
0 ( / ỉ V í / ‘'‘)
 
(Cherkasky,
 
I 9 7 7 j , 0( ///7/
 
loa
 
fỉ)
 
(Sleaior -Tarjan,
 
1980).

Ta kêì thúc mục này boi
 
ví dụ minh hoạ cho tluiật toán Ford - Fulkerson sau dây.
Hình 3 (u) cho m ạn e G CÙHR với khá nănii ihònii qua của các cuiiíi va luónu ‘
iiá
 
tỉ ị 10
ironụ
 
nó.
 
Hai
 
số
 
viết
 
bên
 
cạnh
 
mỏi
 
CLinu là khá
 
n ã n u
 
thốim
 
qua
 
cúa
 
CLiim
 
(số
 
tronu
neoặc)
 
và kiổnụ Irên cung.
 
Đường tãnu
 
ỈUÓIÌU cỏ dạne
 
(s.
 
v_,.
 
1
\-. r^,. Vt.
 
t).
 
l a
 
tính

đtrợc
 
¿ ị t )
 
=
 
ỉ, aiá trị luổne lãng từ 10 lẻn 1 1. Hình 3 (b) cho luồnc thu được sau khi lăng
kiổnu
 
i h e o
 
đườnu tăne
 
ù m
 
được.

Luồiig iroim hình 3 (b) đã là cực đại. Lát cắl hẹp nhất

|.v. v_,.
 
\ \ ] , X ^ {
 
ì',.
 
/ Ị.

Giá tri luồn^ cưc dai là 1 1.

(a)
 
6
 
(
 
6
.)

0(2)
 
0(2)
 
‘'"'-..v,

:4N

Chương 7. Bài toán ỊuổỉỉíỊ cực dại ỉro/ìịĩ ỉìỉọní^

(b)
 
ỗ (6)

V,
 
/'•■-'"0(2)
 
V,
 
0(2)

V3
 
10(10)
 
V
3
 
4(4)
 
V,
H ìn h 3. Tăng luồng dọc theo đường tăng

7.4. Một số bài toán luồng tổng quát

Trong phần này la nêu ra m ột sô dạng bài toán về luổng tổng quát m à việc giải chúng
có thể dẫn về bài toán luồng cực đại trình bày ở trên.

a) M ạn g với n h iều điểm p h á t và điếm thu.

Xét m ạng
 
G
 
với
 
p
 
điểm phát
 
s ,
 
.....và t/ điểm thu /|,
 
Giả sử rằng luồng có

thể đi từ một điểm phát bất kv đến taì cả các điểm ihu. Bài toán tìm luồng cực đại từ các
điểm phái đến các điểm thu có thổ đưa về bài loán với một điểm phát và m ột điểm thu
bằng cách đưa vào một điểm phát giả
 
.V
 
và một điểm thu giả
 
t
 
và các cạnh nối
 
s
 
với tất cả
các điểm phát và các cạnh nối các điểm thu với
 
t.

Hình 4 minh
 
hoạ cho cách đưa m ạng với nhiều diểm phát và nhiều điểm
 
thu về
inạng chỉ có một điểm phát và một điểm thu. Khả năng thông qua của cung nối i’ với
điểm phát S; sẽ bằng
 
+0 0
 
nếu không có hạn chế vể lượng phát của điểm phát
 
Sị.,
 
và nếu
lượng phát của
 
bị hạn chế bởi
 
hị
 
thì cung
 
{s, s^)
 
có
 
khả năng thông qua là
 
hị..
 
Cũng
như vậy, đối với các cung nối
 
t/.
 
với điểm thu
 
l,
 
giá trị khả năng thông qua của
 
{t/., t)
 
sẽ
là giới hạn hoặc không giới hạn tuỳ theo lượng thu của điểm thu này có bị giới hạn hay
không.

TR R -
 
17
 
249

Phần 2. Lý ĩhuyết đồ thị

L
............
 
.

Các điểm phát
 
Các điểm thu

H ìn h 4. M ạng với nhiều điểm phát và thu

Trường hợp m ột số điểm thu chỉ nhận "hàng" từ m ột số điểm phát ta có bài toán nhiều
luồng là m ột bài toán phức tạp hơn rất nhiều so
 
V Ớ I
 
bài toán luổng cực đại giữa điểm
phát
 
s
 
và điểm thu /,

b) Bài toán với khả năng thòng qua củâ các cung và các đỉnh.

G iả sử trong đồ thị G, ngoài khả năng thông qua của các cung
 
c{u,
 
v), ở m ỗi đỉnh
 
V e V

còn có khả nãng thông qua của đỉnh là ¿/(v), và đòi hỏi tổng luồng đi vào đỉnh V không
được vưcrt quá ¿(v), tức là

s
 
/(w ,v)
 
<
 
d{y).

vve V

C ần phải tìm luồng cực đại giữa 5 và f trong m ạng như vậy.

X ây dựng m ột m ạng
 
G'
 
sao cho: m ỗi đỉnh
 
V
 
của
 
G
 
tương ứng với 2 đỉnh v^,
 
V '
 
trong

G',
 
m ỗi cung
 
(u, v)
 
trong
 
G
 
ứng với cung («', v^) trong
 
G ’,
 
m ỗi cung (v,w) trong
 
G
 
ứng
với cung (v', vv'*^) trong
 
G'.
 
N goài ra, m ỗi cung (v^, v ) trong
 
G '
 
có khả năng thông qua là

d(v),
 
tức là bằng khả năng thông qua của đỉnh
 
V
 
trong
 
G.

t
 
d,

H ình 5a. M ạng
 
G
 
với khả năng thông qua ở cung và đỉnh.

250

Chương 7. Bài toán luồng cực dại troní’ mạng

u*
 
í!.,
 
ư

H ình 5.b. M ạng
 
G'
 
tương ứng chỉ có khả năng thông qua trên các cung.

H ình 5.
 
M ạng với khả năng thông qua Irên các đỉnh và các cung.

Do luồng đi vào
 
đỉnh v"" phải
 
đi qua cung (v"^, I’ ) với khả năng thông qua í/(v), nên
luồng cực đại trong
 
G'
 
sẽ bằng luồng cực đại trong
 
G
 
với khả năng thông qua của các
cung và các đỉnh.

c) M ạng trong đó khả năng thông qua của mỗi cung bị chặn hai phía.

X ét m ạng
 
G
 
m à trong
 
đ ó
 
m ỗi cung
 
(u,
 
V
’)
 
có khả năng thông qua (cận trên của luồng
trên cung)
 
c{it,
 
v) và cận dưới của luồng là
 
d { i ( ,
 
V ) .
 
Bài toán đặt ra là liệu có tồn
 
tại
luồng tLfơng thích từ .5 đến
 
t,
 
tức là luồng {/(«,
 
V & v
} thoả m ãn thêm ràng buộc

d{ u,
 
V)
 
< f { u ,
 
v)
 
<
 
c ị u,
 
v ) ,
 
V
 
{u, V)
 
e
 
£ .

hay không?

Đ ưa vào m ạng
 
G
 
đỉnh phát giả
 
và đỉnh thu giả
 
và xây dựng m ạng
 
theo qui tắc:
M ỗi cung
 
{u,
 
v) m à
 
d{u,
 
v)
 
0 sẽ tưcfng ứng với 2 cung (.5,,, v) và
 
{u, t j
 
với khả nãng
thông qua là
 
d{u,
 
v). Giảm
 
c{u,
 
v) đi
 
d{u, v)
 
tức là thay khả năng thông qua của cung (w,
v) bởi
 
c{u,
 
v) -
 
d{u,
 
v) còn cận
 
dưới cuả nó đặt bằng 0. Ngoài ra thêm vào cung (í,
 
s)
 
với

cự,
 
í ) =
 
0 0
 
.

H ình 6a cho ví dụ m ạng
 
G
 
với khả năng thông qua của các cung bị chặn cả hai
phía. Đ ồ thị G„ tương ứng được cho trong H ình ố(b).

u

H ình 6a

251

Phần 2. Lý thuyết đổ thị

Hình 6b

H ìn h 6. M ạng với khả năng thông qua bị chặn hai phía.

Ký hiệu

c/* =
 
^
 
d ( u , v ) .

Ta có kết quả sau đây.

Đ ịn h lý 4.
 
N ếu luồng lớn nhất trong rnạng
 
từ
 
đến
 
bằng cí ĩhì
 
tồn tại luồng

tương í
 
hích ĩ
 
rong G.

2)
 
N ểu luồng lớn nhất ỉroỉĩíỊ m ạng
 
từ
 
đến
 
r,
 
Ic) khác ( f ĩhì khôn^ ĩồn tại ỉuồn^

tương thích trong
 
G.

7.5.
 
Một số ứng dụng trong tổ hợp

Bài toán luồng cực đại có rất nhiều ứng dụng trong việc giải nhiều bài toán tổ hợp. Khó
khăn chính ở đây là phải xây dựng m ạng tương ứng sao cho việc tìm luồng cực đại trong
nó sẽ tương đương với việc giải bài toán tổ hợp đặt ra. M ục này sẽ giới thiệu m ột số bài
toán như vậy.

a) B à i toán đám cưới vù n g quê,
 
Có
 
m
 
chàng trai ở m ột làng quê nọ. Đối với mỗi chàng
trai ta biết các cô gái m à anh ta vừa ý. H ỏi khi nào thì có thể tổ chức các đám cưới trong
đó chàng trai
 
nào cQng sánh duyên với cô gái m à m ình vừa ý.

252

’hiừ/nìị
 
7.
 
Bíii toán luống cực đại íroiiỊ^ mợiĩỊ’

Ta có íhè xây dựng đồ thị với các đỉnh biểu
 
thị các chàng trai và các cô gái, còn
các cung biểu thị sự vừa ý của các chàng trai đối với các cô gái. Khi đó ta thu được m ột
đồ thị hai phía.

T h í d ụ . Có 4 chàng trai Ị7’|, r , , r , , 7'.
 
Ị và 5 cô gái
 
|G |, G\, G „ Ơ4, ơ ,} . Sự vừa ý cho
trong bảng sau

Chàng trai
 
Các cô gái mà chàng trai unig ý

Ty
 
Ơ2, ơ „ Ơ4

T,,
 
Ơ2, Ơ4

ĐỒ thị tương ứng được cho trong hình 7.

G,

H ìn h 7. M ạng tương 1,'m
g vrtị Rài toán dám n n tị vùng quê

Đưa vào điểm phát
 
s
 
và điểm thu
 
t.
 
Nối .Vvới tất cả các đình biểu thị các chàng trai,
và nối
 
t
 
với tất cả các đỉnh biểu thị các cô gái. Tất cả các cung của đồ thị đều có khả
năng thông qua bằng
 
1. Bắt đầu từ luồng 0, ta tìm luồng cực đại trong m ạng xây dựng
được theo thuật toán Ford - Fulkerson. Từ định lý về tính nguyên, luồng trên các cung
là các số 0 hoặc
 
1. R õ ràng là nếu luồng cực đại trong đồ thị có giá trị
 
=
 
m,
 
thì bài
toán có lời giải, và các cung với luồng bằng 1 sẽ chỉ ra cách tổ chức đám cưới thoả m ãn
điều kiện đặt ra. Ngược lại,
 
nếu bài toán có lời giải thì
 
=
 
m.
 
Bài toán về các đấm
cưới vùng quê là m ột trường hợp riêng của bài toán về cặp ghép trên đồ thị hai phía m à
để giải nó có thể xây dựng thuật toán hiệu quả hơn.

b) B ài to á n về hệ th ố n g đ ại diện chung.

Cho tập m phần t ử x =
 
{Z|,
 
Zj,...,
 
Z, J.
 
Giả sử
 
<Aị,
 
A„> và
 
< f i | ,
 
B„>
 
là hai dãy

các tập con của tập
 
X.
 
Dãy gồm
 
n
 
phần tử khác nhau của
 
X:
 
<ữ|,
 
a
2
 
,.:, a„>
 
được gọi là hệ

253

Phần 2. Lý thuyết đổ thị

thống các đại diện chung của hai day đã cho nếu như tìm được m ột hoán vị ơ của tậ p 1 1,

2....,
 
n ]
 
sao cho <£/|,
 
Û
2
 
.....
 
ứ„> là hệ thống các đại diện phân biệt của hai dãy < /\|, Aj,,..,

A„>
 
và <5ơ(i),
 
ßa(„)>> tức là điều kiện sau được thoả mãn: a, e
 
A , n
 
ß„„i
 
, i =
 
1,

2....,
 
n.
 
Xây dựng m ạng
 
G -
 
{V, E)
 
với tập đỉnh

\ / =
 
{5, / )
 
u
 
{ X , , X
 
2
 
......
 
x„ ]
 
u
 
{ « , ,
 
«
 
2
 
,..., M„,ị

V2
.....
v
„,|
u
 
{3;,,>-2,...,>'„Ị,

trong đó đỉnh
 
X ị
 
tưcfng l'mg với tập
 
Aị,
 
đỉnh V
, tương ứng với tập
 
Bị,
 
các phần tử
 
Uj ,
 
Vj

tưcmg ứng với phần tử
 
Zj.
 
Tập các cung của m ạng
 
G
 
được xác định như sau

E
 
= {
 
{s,x,):
 
1 < ; < /í Ị u
 
{
{XịMj)'.
 
với
 
Zj
 
e
 
Aị,
 
1 </ ■<«,
 
l <y < /r; ¡U

u
 
{( Uj ,
 
Vj):
 
ì
 
< j < m \
 
KJ

{
 
{ Vj , y i ):
 
v ớ i
 
Zj
 
e
 
ß „
 
ị
 
<
 
i
 
<
 
n ,
 
ì
 
< j
 
<
 
m
 
/ ) :
 
1 < / < / ; } .

K hả năng thông qua của tất cả các cung được đặt bằng
 
1. Dễ dàng thấy rằng
 
hệ thống

đại diện chung của hai dãy
 
<Aị, A
 
2
 
,.... A„>
 
và
 
<B¡, Bị,..., B„> tồn tại khi và c h ỉ khi

trong m ạng G = {V, E) tìm được luồng với giá trị n.
 
Đ ể xét sự tồn tại của luồng như vậy
có thể sử dụng thuật toán tìm luồng cực đại từ
 
s
 
đến
 
t
 
trong m ạng
 
G
 
=
 
(V, E).

c) Về m ột bài toán tối ưu rời rạc.

Trong m ục này ta sẽ trình bày thuật toán được xây dựng dựa trên thuật toán tìm luồng
cực đại để giải m ột bài toán tối ưu rời rạc là m ô hình toán học cho m ột số bài toán tối
ưu tổ hợp.

Xét bài toán tối ưu rời rạc:

=
 
m a x
 
Ỷ
 
X
 
y
 
^
 
m i n
 
( 1 )

với điều kiện

. / = 1

Xy = 0 hoặc 1,
 
1 ,2 ,..., «
 
(3)

trong đó
 
a, j E
 
{0,1}, / = 1, 2
 
,
 
m \ j =
 
ì, 2
 
,
 
n,
 
Pi
 
-nguyên dương, / = 1 , 2 ,
 
m.

Bài toán (l)-(3 ) là m ô hình toán học cho nhiều bài toán tối ưu tổ hợp thực tế. Dưới
đây ta dẫn ra m ột vài ví dụ điển hình.

B à i toán p h á n n h ó m
 
sin h hoạt.
 
Có
 
m
 
sinh viên và
 
n
 
nhóm sinh hoạt chuyên đề. Với
mỗi sinh viên
 
biết

a¡j =
 
1, nếu sinh viên
 
i
 
có nguyện vọng tham gia vào nhóm
 
j,

a ,=
 
0, nếu ngược lại,

(
2
)

254

Chương
 
7.
 
B¿ii loan ìuónụ cực đại trong mạng

và
 
P ị
 
là sõ lượng nhóm chuyên đề m à sinh viên
 
i
 
phải tham dự,
 
ì =
 
1, 2,
 
m ' , j -
 
1, 2,

n.

Trong số các cách phân các sinh viên vào các nhóm chuyên đề mà họ có nguyện
vọng tham gia và đảm bảo mỗi sinh viên / phải tham gia đúng
 
Pị
 
nhóm , hãy tìm cách
phân phối vói sô' người trong nhóm có nhiều sinh viên tham gia nhất là nhồ nhất có thể
được.

Đưa vào biến số

=
 
1, nếu s'nh \ iên
 
tham gia v à i n h ó n
 
j,

X ịj ~
 
0, nếu ngược lại,

i =
 
1, 2
 
,
 
m , j =
 
1 , 2 , /ỉ, khi đó dễ thấy mô hình toán học cho bài toán đặt ra chính
là bài toán (!) - (3).

B à i toán lập lịch cho hội nghị.
 
Một hội nghị có
 
m
 
tiểu ban, mỗi tiểu ban cần sinh hoạt
trong m ột ngày tại phòng họp phù hợp với nó. Có
 
n
 
phòng họp dành cho việc sinh hoạt
của các tiểu
 
ban. Biết

= 1, nếu phòng họp
 
i
 
là thích hỢp với tiểu ban
 
j,

a¡j=
 
0, nếu ngược lại,

i
 
-
 
1, 2,
 
m \
 
j
 
-
 
1 , 2
 
......
 
/ỉ.
 
Hãy bô' trí
 
các
 
phòng họp cho các tiểu ban sao cho hội nghị

kết thúc sau ít ngày làm việc nhất.

Đưa vào biến số

Xịj
 
= 1, nếu bố trí tiểu ban / làm việc ở phòng
 
j,

x ¡ j ~
 
0, nếu ngược lại,

/ = 1, 2,
 
777, y = 1 , 2 ,
 
/ỉ, khi đó dỗ thấy mô hình toán học cho bài toán đặt ra chính

là bài toán (1) - (3), trong dó p, = 1,
 
/ =
 
1, 2,...,
 
m.

Bổ đề 2.
 
Bài toán (I)-(3) cỏ phương áìì
 
tổi
 
ưu
 
khi và
 
chỉ khi

i =
 
(4)

ỳ=i

C h ứ n g m in h ,
 
Điều kiện cần của bổ đề là hiển nhiên vì từ sự tồn tại phương án của bài
toán suy ra các bất đẳng thức trong (4) được thực hiện ít nhất dưới dạng dấu đẳng thức.
Để chứng minh điều kiện đủ, chỉ cần chỉ ra rằng nếu điều kiện (4) được thực hiện thì bài
toán luôn có phương án. Thực vậy, giả sử điều kiện (4) được thực hiện. Khi đó
 
nếu ký
hiệu

l,, = ị

thì
 
I I+i I >
 
p , , / = 1, 2
 
......
 
m. Do đó nếu gọi

255

Phẩn 2.
 
Lỷ
 
thuyết đổ thị

I,
 
c;
 
I Ị l =
 
P i
, ; = 1
 
, 2
 
,
 
m ,

thì
 
X* =
 
{x*ịj)
 
,„x„ với các thành phần được xác định theo công thức

= 1 , ỹ 6 I| ,
 
X*i^
 
= 0 , j
 
Ể I , , / =
 
1 , 2 ,
 
m,
 
(5)

là phương án của bài toán (1) - (3).
 
Bổ đề được chứng m inh.

Do (4) là điều kiện cần để bài toán (l)-(3 ) có phương án, nén trong trong phần tiếp
theo ta r.ẽ luôn giả thiết rằng điều kiện này được thực hiện.

Bây giờ ta sẽ chỉ ra rằng việc giải bài toán (l)-(3 ) có thể
 
dẫn
 
về việc
 
giải
 
một số

hữu hạn bài toán luồng cực đại trong m ạng. Trước hết, với niỗi
 
sô' nguyên
 
dương
 
k.
 
xây

dựng m ạng
 
G(k) -
 
(V,E)
 
với tập đỉnh

V =
 
{íỊ ư
 
{ « ,: / = 1, 2,
 
m I u
 
(
 
Wj-.j
 
=
 
1 ,2 ,...,
 
n
 
I u ịr},

trong đó
 
s
 
là điểm phát,
 
t
 
là điểm thu, và tập cung

E = {(s,u,) :
 
/ - 1 , 2
 
.....
m]
 
u
 
{(Uị,Wj
) : /= 1 ,
 
2,..., m: j =
 
1 ,2 ,...,
 
n
 
Ị

:ỹ =1, 2,...,
 
n
 
Ị.

M ỗi cung
 
e G E
 
được gán với khả nãng thông qua
 
q{e)
 
theo qui tắc sau:

qis.Ui) =Pi .
 
i=

q{ U; , Wj )
 
=
 
ũ:j , i =
 
1
,
 
2
 
,...,
 
m ; j
 
=
 
1
,
 
2
 
, . .. ,
 
n;

q{ Wj ,
 
t)
 
=
 
k , j
 
=
 
1
,
 
2
 
,, ..,
 
n.

H ình 8 chỉ ra cách xây dựng m ạng
 
G(k).

Ký hiệu:
 
ơ = ^ P i -

Bổ đề sau đây cho thấy m ối liên hệ giữa luồng cực đại trong m ạng
 
G{k)
 
và phương án
của bài toán (l)-(3 ).

Chương
 
7.
 
Bài
 
Ỉ O C Ì Ỉ Ì
 
Ỉiỉồỉìi’ cực dại íroniỊ nuiỉỉị^

B ổ đ ề 3.
 
Giả sử đối với sốníịiiyêìì cliừrníị k nào dó, lnổìự cực dại nguyên Ệ
 
tronu, mạng

G(k) có
 
^ i á
 
t r i
 
là ơ. K hi đó
 
X*
 
=
 
( - V * , , ) „ , x „
 
yới các tlìànli phần được xá c định theo
 
C Ỏ / Ỉ Ị .

thức

. v*, ^
 
=
 
ệ ' { U
 
ị , w
 
^ )
 
,
 
i
 
=
 
1 , 2
 
..........
m
 
:
 
, / = 1 . 2
 
.............
n .

là phươiỉíỊ án của bài toán
 
(l)-(3 ).

Chứnị«, m in h . Thực
 
vậy, do
 
luồng cực đai
 
trong
 
mang
 
có
 
giá
 
trị
 
!à
 
ơ
 
và là
 
luồng
nguyên nên

=
 
P i
 
, i -
 
1 , 2 ......
m,

ệ ' { u , , W j )
 
e
 
j O ,
 
1 ị , /
 
=
 
1 , 2 , . . . ,
 
m ;
 
j
 
=
 
1, 2
 
......
 
n.

từ đó suy ra

= Pn i
 
=

y=l
 
y=l

Vậy
 
)C
 
là phương án của bài toán (l)-(3 ). Bổ đề được chứng minh.

Bổ đề 4.
 
Giả
 
sửỉC
 
--
 
{x',,
)
 
là phương án tối lũi và k' là giá trị tối lũi của hài toán
 
(1 )-(3).

K hi đố luồng cực đại trong mạng G{k*) có giá trị là ơ.

C h ứ n g m in h . Do giá trị của luồng cực đại trong m ạng
 
G(k*)
 
không vượt quá ơ , nên để
chứng
 
minh
 
bổ đề ta chỉ cần chí ra luồng
 
với giá trị ơ trong m ạng
 
G {k').
 
X ây dựng
luồng
 
ị*
 
theo công thức sau;

ị \ s M i ) = P i,
 
ị\u „ W j) = .x*^j,

n
i

i = ì,2 ,- ,m , j
 
= 1,2,.
, . , / 7 .

/=
!

Dẻ dàng kiểm tra được rằng
 
là luồng trong m ạng
 
G{m)
 
có giá trị ơ. Bổ đề được
chứng minh.

Bổ đ ề 5.
 
N ếu k = m thì luồng cực đại trong m ạng G{m) có giá trị là ơ .

C h ứ n g m in h . Lập luận tương tự như trong Bổ đề 4, ta chỉ cần chỉ ra luồng với giá trị ơ
trong m ạng
 
G{m).
 
Thực vậy, giả sửx* =
 
là phương án của bài toán (l)-(3 ) xây

dựng
 
theo công thức (5). Xây dựng luồng
 
theo công thức giống như trong chứng

m inh bổ đề 4, ta có luồng vófi giá trị ơ. Bổ đề được chứng minh.

257

Phần 2. Lv thuyết đồ thị

Từ bổ đề 3 và 4 suy ra việc giải bài toán (1) - (3) dẫn vế việc tìm g il-trị
 
k*
 
nguyên
dương nhỏ nhất sao cho luồng cực đại trong m ạng Ơ(Ấ:‘) có giá trị ơ. Bổ đề 5 cho thấy
giá trị
 
k* e
 
[1,
 
m].
 
Vì vậy để giải bài toán (1) - (3) ta có thể áp dụng phương pháp tìm
kiếm nhị phân trên đoạn [1, m] để tìm giá trị
 
k \
 
trong đó ở mỗi bước cần giải m ột bài
toán luồng cực đại. Để giải bài toán tìm luồng cực đại trong m ạng có thể sử dụng các
thuật toán đa thức như đã nói ở trên. Từ đó suy ra kết quả sau

Đ ịn h lý 5.
 
Bài ĩoán
 
(l)-(3 )
 
giải được nhờ thuật toán đa thức với ĩhời gian tính là Ì
0
 
g
2
 
m

X
 
, trong đó O
f^Ị. là thòi gian ĩínlỉ của ĩhuật toán giải bài toán tìm luong cực đại

íroỉig m ạnỉịG {k)

258

Chương
 
7.
 
Bài toán ỉuồng cực đại trong mạng

Bài tập

1
.
 
X ét mạng cho trong hình vẽ sau. các số bên cạnh các cung là khá năng thòng qua của nó

T h ự c
 
h iện
 
thuật
 
toán
 
F ord-F u Ịk erson
 
tìm
 
lu ồ n g
 
cự c đại
 
trên
 
m ạ n g
 
đ ã c h o
 
bắt đầu
 
từ lu ồ n g
 
0.

T rình b ày c á c kết quả tính toán trong m ỗi bước lặp b ao gồm :

•
 
Đ ồ thị lã n g lu ồ n g ,

•
 
Đ ư ờ n g
 
tăng lu ồ n g
 
tìm
 
đư ợc th eo tìm
 
k iế m
 
th eo c h iề u
 
rộn g
 
và k hả n ăn g
 
th ô n g
 
q u a củ a

n ó (G iả thiết khi d u y ệ t c á c đ ỉn h k ề củ a m ột đ ỉnh
 
ta d u y ệ t th eo thứ tự tăn g dần
 
củ a ch ỉ

số),

•
 
M ạ n g c ù n g lu ồ n g thu đư ợc sau khi tăng lu ồn g.

K ết q uả c u ố i cù n g; Cần đưa ra g iá trị củ a lu ồ n g cự c đại và lát cắt h ẹp nhất

2. Cho
 
G -
 
(V,
 
E)
 
đồ thị có hướng trong đó không có cung
 
{s,
 
t).
 
Chứng minh rằng số
đường đi cơ bản nối hai đỉnh Ẵ
’ và
 
t
 
là bằng số ít nhất các đỉnh của đổ thị cần loại bỏ để
trong đổ thị không còn đường đi nối 5 với
 
ĩ.

3. X ây dựng thuật toán tìm
 
tập
 
Eị
 
tất cả các cung của đổ thị
 
m à việc
 
tăng khả
 
năng

thông qua của bất kỳ cung nào trong
 
E
 
đều dẫn đến tăng giá trị
 
của luồng
 
cực đại trong

mạng.

4. Cho hai dãy số nguyên dương
 
{Pị,
 
/- 1 , 2,...,
 
m\
 
và
 
ịqj,
 
j = l , 2,...,
 
n\ .
 
H ãy xây dựng
m a trận
 
A = ịaịj :
 
/=1, 2,...,
 
m;
 
j = l , 2,...,
 
n]
 
với các phần tử
 
ãịj
 
G jO, 1 ì có tổng các phần
tử trên dòng
 
i
 
là /?,, tổng các phần tử trên cột
 
j
 
là
 
cỊj.

5. Có
 
m
 
chàng trai,
 
n
 
cô gái và
 
k
 
bà mối. M ỗi bà m ối
 
p {p =
 
ì,
 
2,...,
 
k)
 
có m ột danh sách
m ột số chàng trai và cô gái trong số các chàng trai và cô gái nói trên là khách hàng

của bà ta. Bà m ối
 
p
 
có thể se duyên cho bất cứ cặp trai-gái nào là khách hàng của bà ta,
nhưng không đủ sức tổ chức quá
 
đám cưới. Hãy xây dựng thuật toán căn cứ vào danh
sách
 
p = 1, 2,..,,
 
k,
 
đưa ra cách tổ chức nhiều nhất các đám cưới giữa
 
m
 
chàng trai
và
 
n
 
cô gái với sự giúp đỡ của các bà mối.

259

Phần 2. Lý thuyết đồ thị

6. B à ijo à n phủ đỉnh nhỏ nhất:
 
Cho đồ thị vô hướng
 
G
 
=
 
(V',
 
E)
 
với trọng số trên các
đỉnh c(v), V €
 
V. M ột tập con các đỉnh của đồ thị
 
s
 
được gọi là phủ đỉnh nếu như mỗi
cạnh của đồ thị có ít nhất m ột đầu m út trong
 
s.
 
Trọng lượng của phủ đỉnh
 
s
 
là tổng các
trọng số của các đỉnh trong nó. Bài toán đặt ra là tìm phủ đỉnh có trọng lượng nhỏ nhất
(m à ta sẽ gọi là phủ đỉnh nhỏ nhất). H ãy chỉ ra cách qui dẫn bài toán tìm phủ đỉnh nhỏ
nhất trên đồ thị hai phía về bài toán luồng cực đại.

7. Cho đơn đồ thị vô hướng
 
G
 
= (V',
 
E).
 
Giả sử 5,
 
t
 
là hai đỉnh của đồ thị. Sử dụng lý
thuvết luồng cực đại trong m ạng chứng m inh khẳng định sau:
 
" S ố lượng lớn nhất các

đường đi đôi m ột không có cạnh chung nối hai đinh s và t là bưng s ố cạnh ít nhất cần

¡oại b ỏ khỏi đổ thị G đ ể không còn đường đi nối s và f \

8. Bài toán ghép cặp trên đồ thị hai phía: Cho đổ thị hai phía
 
G
 
=
 
(X uY , E).
 
M ột tập con
các cạnh của đổ thị được gọi là m ột cặp ghép nếu như hai cạnh bất kỳ trong nó không
có đỉnh chung. Bài toán đặt ra là tìm cặp ghép có lực lượng lớn nhất của
 
G.
 
H ãy chỉ ra
cách qui dẫn bài toán đặt ra về bài toán luồng cực đại trong m ạng.

9. X ây dựng hình chữ nhật latinh. Hãy chỉ ra cách xây dựng hình chữ nhật la tinh cấp

m x n {m < n)
 
nhờ sử dụng thuật toán tìm cặp ghép lớn nhất trên đồ ihị hai phía.

260

PHẨN III

HÀM ĐẠI
 
SỐ LOGIC
■

Chương Ị . Mớ dầu

1

Mỏ
 
ĐẦU

1.1. MÔ hình xử lí thòng tin và hàm đại số lôgic

Trong nhiều vấn đề, ta thưòìig gặp một m ô hình xử lý thông tin dạng đơn giản, gồm m ột
đầu vào và m ôt đầu ra:

Vào

Xử lí thông tin

Ra

Đ ầu vào và đầu ra lấy giá trị từ
 
những tập hữu hạn
 
X
 
và
 
Y.
 
Ta xem m ô hình hoạt động
trên m ột trục thời gian được phân chia thành những thời điểm rời rạc. Tại thời điểm
 
t,

tín hiệu vào là ,r, e X
 
và tín hiệu ra là
 
y,
 
G
 
Y.
 
Giả thiết rằng mô hình hoạt động không
nhớ, tức là tín hiệu ra tại thời điểm
 
t
 
chỉ phụ thuộc vào tín hiệu vào tại thời điểm đó.
N hư vậy, có thể m ô tả sự hoạt động của mô hình bằng một hàm
 
f : X ^ Y ,
 
trong đó J =

f{x )
 
là tín hiệu ra tương ứng với tín hiệu vào
 
X.

T rong kỹ thuật điều khiển tự động, các tín hiệu thường được truyền đi và c h ế biến
dưới dạng chỉ có 2 giá trị, m à ta sẽ ký hiệu là 0 và 1. Vì vậy có thể xem
 
X
 
như tập hợp

E"
 
và
 
Y
 
như tập hợp
 
E"',
 
trong
 
âó E =
 
{0, 1 Ị (với
 
n
 
và
 
m
 
được chọn thích hợp). Mỗi

263

Plĩẩn 3. Hàm đại sô'ỉõgic:

phần tử.v e X có dạng X = Gr,, Xj,
 
A'„) và mỗi phần tử > 'e
 
Y
 
có dạng V =
 
{}’[•
 
v,,..., v,„)
trong đó ,v,, >’
, e
 
E.

M ột h à m /:
 
X ^
 
Y
 
được phân tích thành m ột hệ
 
m
 
hàm

> 'l
 
=
 
/ l U
 
|.-^ '2
 
............
 
o

>2
 
'^2.
 
'O

y,„=L,i-^u^2'
 
— -O

M ỗi hàm
 
=/(.V |, A'jr --,
 
x„)
 
có các đối số nhận giá trị 0. 1 và hàm cũng nhân các giá trị

0, l . M ột hàm như th ế được sọ i là m ột hàm đại số logic.

Đ ịn h n g h ĩa .
 
M ột hàm đụi sô 'logic của n đối sô'là m ột ánh xạ
 
E"
 
E.

M ột hàm đại sô' logic thường được xác định bằng bảng giá Irị của nó, nghĩa là Irong
đó liệt kê tất cả các ảnh của các bộ đối sô' có thể có. T hí dụ bảng dưới đày xác định một
hàm đại sô' logic 3 đối số:

X
 
i
 
^
'^
2
 
f ( X i , X

2
,Xj)

0
 
0
 
0
 
0

0
 
0
 
1
 
0

0
 
1
 
0
 
1

0
 
1
 
1
 
1

1
 
0
 
0
 
1

1
 
0
 
1
 
1

I
 
1
 
0
 
0

1
 
1
 
1
 
1

H ìn h 1

Vì
 
I £■" I = 2"
 
và
 
I £■ I = 2
 
nên số các hàm đại số logic của
 
n
 
đối số là 2^
 
, chẳng hạn
với /7 = 3, con số này là
 
2
*
* = 256.

M ột hàm đại sô' lôgic J
 
=
 
x„)
 
được gọi là
 
phụ thuộc thực sự vào đối số
 
X,
 
nếu

có 2 bộ giá trị của đối số chỉ khác nhau m ột thành phần thứ ;■m à giá trị của hàm tại 2 bộ
này là khác nhau.

K hông phải mọi hàm đại số logic của n đối số đều phụ thuộc thực sự vào cả
 
n
 
đối số
của nó. C hẳng hạn các hàm hằng
 
y = 0
 
hay
 
y = ỉ
 
không phụ thuộc thực sự vào đối sô'
nào cả. G ọi
 
A„
 
là số tất cả các hàm đại số logic phụ thuộc thực sự vào n đối SG. Khi đó
dễ dàng tính được
 
/4„ theo hệ thức truy hồi dưới đây:

264

Chương 1. M ỏ đâu

Ao = 2 ,

A „=
 
2^"

T hông thường, việc m ã hoá nhị phân tập
 
X
 
bị dư thừa, nghĩa là có m ột số phần tử của

X
 
tại đó hàm /
 
không xác định (chẳng hạn nếu X có 6 phần tử thì khi m ã hoá nó bằng
tập
 
E \
 
ta thừa 2 phần tử). Một hàm
 
/ :
 
M -> £ , với M là m ột tập con thực sự của
 
E"

được gọi là một hàm đại số logic không đầy đủ và tập con M được gọi là m iển xác định
của nó. R õ ràng tại những nơi m à /
 
không xác định, ta có thể cho nó m ột giá trị (0 hoặc
1) tuỳ ý để dược m ột hàrn đại sô' lôgic dầy oủ. Nói cácn khác, VỚI m ọi hàin đại số logic
không đầy đ ủ / c ó miền xác định
 
M ,
 
luôn xâv dựna đưọc m ột hàm đại số lôgic đầy đủ
 
F

để
 
=/CV|,...,a'„) với mọi (x
 
.....
 
,A'„) G
 
M.
 
Hàm
 
F
 
như vậy được gọi là hàm p h u

của h à m /.
 
Dễ thấy rằng, số lượng các hàm phủ /
 
bằng
 
2*, trong đó Ẩ
: = 2" - 1M I.

1.2.
 
Các hàm đại số logic sơ cấp

Dưới đây ta sẽ xét cụ thể các hàm đại số logic phụ thuộc thực sự vào
 
n
 
đổi sô' với
 
n < 2.

Các hàm này được gọi là các hàm sơ cấp.

a)
 
n
 
= 0: có 2 hàm là hàm hằng 0 và hàm hằng 1.

b)
 
n -
 
\'.C Ỏ
 
2
 
hàm cho bởi bảng

■
'
 
1

X
 
f ,
 
L

0
 
0
 
1

1
 
1
 
0

H àm / 2(A) được gọi là phủ định của X và được ký hiệu là 1 X hay
 
X

c) « = 2: có 10 hàm cho bởi bảng

X
 
81
 
Ấ
'2
 
84
 
85
 
&
 
c?7
 
&
 
89
 
810

0
 
0
 
0
 
0
 
0
 
1
 
1
 
1
 
1
 
1
 
0
 
0

0
 
1
 
0
 
1
 
1
 
1
 
0
 
0
 
1
 
0
 
1
 
0

1
 
0
 
0
 
1
 
1
 
0
 
0
 
0
 
1
 
1
 
0
 
1

1
 
1
 
1
 
I
 
0
 
1
 
1
 
0
 
0
 
1
 
0
 
0

trong đó có m ột số hàm thông dụng như sau:

•
 
hàm
 
gịix,
 
y)
 
được gọi là hội
 
(hay tích) của X và
 
y,
 
ký hiệu là X &
 
J hay
 
x.ỵ, xy

•
 
hàm
 
gjix, y)
 
được gọi là tuyển của .Vvà
 
y,
 
ký hiệu
 
X V
 
y

•
 
hàm gjCr, >
>
)
 
được gọi là tổng (theo m odun 2) của X và y, ký hiệu
 
là
 
X
 
+ y

•
 
hàm
 
gẶx,
 
y)
 
được gọi là hàm kéo theo, ký hiệu
 
X
 
- ^ y

TR R -
 
18
 
265

Phán 3. Hàm đại sốlôqic

•
 
hàm
 
y)
 
được gọi là hàm tương đương, ký hiệu A
' <=>

•
 
hàm
 
gf,{x,
 
y)
 
được gọi là hàm V ebb, ký h iệ u
 
x o ỵ

•
 
hàm
 
gy{x, y)
 
được gọi là hàm Sheffer, ký hiệu
 
X
 
I y

Q uan trọng nhất là các hàm tuyển, hội và phủ định. Chúng tương ứng với các phép
toán
 
"hoặc", "và", "khống" trong đại số m ệnh đề, trong đó giá trị 1 ứng với"đúng"
 
và

giá trị 0 ứng với "sai". Dễ thấy rằng các tính chất dưới đây
 
của các hàrn
 
tuyển, hội
 
phủ

định
 
được suy từ
 
các tính chất quen thuộc của đại số m ệnh đề
 
(hoặc cũng có thể suy
từ bảng giá trị):

•
 
K ết hợp

X V iy V z) = ( x v y) V z - X
 
V
 
>
'
 
V
 
z,

X & (v &
 
7.) = {.X
 
& y) & z = X &. y &. z.

•
 
G iao hoán

X V
 
y
 
= y
 
\ / X,

X &
 
V =
 
y
 
&
 
X.

Phân hô'

x v
 
{ y &
 
z )
 
-
 
( x \ / y )
 
&
 
{ x v
 
z ) ,

X &
 
V
 
z ) =
 
(Jt & _y)
 
V
 
( x &
 
z ).

Đ ố i ngẫu

X
 
v y
 
=
 
X
 
&
 
y .

X
 
&
 
ỵ
 
=
 
X
 
V
 
y .

T rong kỹ thuật, các hàm tuyển, hội, phủ định được thực hiện nhờ những linh kiện
đon giản. M ục trình bày dưới đây khẳng định rằng, m ọi hàm đại số lôgic đều có thể
được xây dựng từ những linh kiện đcm giản này.

1.3.
 
Biểu diễn các hàm đại số logic

qua hệ tuyến, hội và phú định

Đ ể tiện trình bày, ta đưa vào quy ước sau đây: giả sử
 
X
 
là m ột biến và ơ- e
 
{0, 1 Ị. Khi
đó

X, nếu
 
ơ =
 
1,

X,
 
nếu cr= 0.

Từ định nghĩa trên dễ thấy

266

Ch
 
ươn
 
1. M ỏ đầu

,
y
'^=
 
1
 
. x-=ơ- .

G iả sử
 
I / ; / € / Ị là một họ các hàm đại số logic. Ta sẽ dùng ký hiệu

V
 
/
 
và
 
&
 
/;

i e
 
ỉ
 
ị E ỉ

để chỉ tuyển và
 
hội
 
của tất
 
cả các hàm
 
này, nói riếng
 
nếu / = {/, 2,...,
 
m },
 
thì ta sẽ dùng

các ký hiệu

nì
 
m

V ' /
 
và
 
&
 
/

Í =
 
1
 
í' =
 
1

để thay thế. Ta
 
cũng
 
quy ướcràng nếu
 
/ là tập rỗng thì

V
 
/
 
= 0
 
và
 
&
 
/
 
= 1.

; e
 
/
 
/
 
e
 
/

Với m ỗi hàm
 
fix ,,..., x j ,
 
ký hiệu
 
Tf
 
là tập

Tj-=
 
|(.v
.V j e £ " : / ( A - ...............A-„) =
 
1 Ị

và gọi nó là tập đặc trưng của / . Dễdàng chứng
 
m inh
 
tương ứng giữa hàm đại số logic

với tập đặc trưng của nó là tương ứng 1-1 và có các tính chất:

T j
 
=
 
T¡ ,
 
7 } u 7 ^ ,,
 
= 7 } n

Đ iều này cho phép chuyển các chứng minh trên đại số logic sang các chứng m inh tương
ứng trên đại số tập hợp.

Định
 
lý.
 
M ọi hàm
 
đại sô' lôíỊÌc f{ .\
.......
 
x„)
 
đéii có th ể được biểu diễn dưới dạng:

f u
 
......
 
-O
 
=
 
V
 
/(c r,,c r,,...,ơ ,,x ,.^ ,,...,x „ )

(CT|
.....
ơị)
 
G
 
E'

trong đố
 
i
 
là s ố tự nhiên bất kỳ, ị < i < n.

Chứng minh.
 
G iả sử (X|,...,.vJ e
 
Tj
^, khi đó số hạng ứng với bộ giá trị Ơ
-,
 
= Xị,
 
ơị
 
=

x¡
 
trong tuyển vế phải

x ỉ '
 
.
 
.
 
.

sẽ bằng
 
1, điều này kéo theo toàn bộ vế phải sẽ bằng 1. Ngược lại, nếu vế phải bằng 1,
thì phải xảy ra bằng
 
1 tại m ột sô' hạng nào đó,
 
chẳng hạn tại số hạng ứng với bộ giá trị
(ơi,...,o;),
 
Khi đó
 
X| = ơ | , X ,
 
= ơ;
 
và
 
(x
 
......
 
x„) e
 
7}. Đ ịnh lý được chứng m inh.

Cho / =
 
1 trong định lý và nhận xét rằng vai trò của các biến
 
Xị
 
là như nhau, ta được:

267

Phẩn 3. Hàm đại sổlôgìc

H ệ
 
quả 1,
 
H àm đợi s ố logic
 
có th ể được khai triển theo m ột đố i s ố x ,:

V
 
x , / ( x „ . . . , x , , „
 
1,
 
.....
x „ )

Cho / =
 
n
 
trong định lý và bỏ đi các nhân tử bằng I trong m ột tích, ta được:

H ệ q u ả 2,
 
H àm đại s ổ ¡ôgicf{xị,...,x„) có th ể được khai triển dưới dạníị:

f i x
 
......
 
x„)
 
V
 
x p . . . x ; "

(ơ ,
 
.....
ơ
„ ) e
 
T
ị

C ông thức khai triển này còn được gọi là dạng tuyển chuẩn íắc hoàn loàn của /
 
và
m ỗi số hạng của nó được gọi là m ột cấu tạo đơn vị c ủ a / .

T h í d ụ . D ạng tuyển chuẩn tắc hoàn toàn của h à m /c h o bởi bảng ở hình 1 là

X3)
 
=
 
X
 
ị
 
X2
 
X3 V
 
X|
 
X-, V
 
X ị
 
X2
 
X
 
ị
 
V
 
X
 
ị
 
X2 X3 V .V, X2 -'^.v

Từ hệ quả 2, ta nhận được khẳng định sau đây:
 
M ọi hàm đại sô' logic đều có th ể xả y

dựng từ các hiến nhờ các hàm tuyển, hội và phủ định.

Bằng luật đối ngẫu, ta có thể chứng m inh m ột kết quả tương tự bằng cách thay phép
tuyển bằng phép hội và ngược lại, từ đó dẫn đến việc biểu d i ễ n / qua m ột hội các tuyển.
Biểu diễn này
 
được gọi là dạng hội chuẩn tắc hoàn toàn c ủ a / . Chẳng hạn, trong thí dụ
vừa nêu, dạng hội chuẩn tắc hoàn toàn c ủ a /
 
là

/ ( x , , X2, X3) =
 
(X |V ^2 V ^3 ) &
 
(X |V X2 V
 
X3 ) &
 
(
 
X, V
 
^2 V X3 ).

N goài hê tuyển, hội và phủ định, tồn tại nhiều hệ khác cũng có tính chất m ọi hàm
đại số lôgic
 
đểu được biểu diễn qua các thành viên của hệ. M ột hệ hàm như vậy được
gọi là m ột hệ đầy đủ. Chẳng hạn có thể chứng m inh các hệ

{0, l , x
 
+ y, X&}; }, { x , x v j } ,
 
{jr,
 
{xl}' ),
 
Ịjt o

đều là những hệ hàm đầy đủ.

V iệc nghiên cứu tính đầy đủ của m ột hệ hàm có m ột ý nghĩa thực tiễn quan trọng, nó
trả lời câu hỏi có thể xây dựng m ọi hàm lôgic từ m ột số hàm đơn giản chọn trước hay
không? V ề vấn đề này. Post đã thực hiện m ột cách hệ thống từ năm
 
1921, bạn đọc có
thể tìm hiểu m ột cách chi tiết
 
q ua cuốn sách tiếng N ga "H àm đại số logic và các lớp
Post" xuất bản năm
 
1966 của các tác giả S.B.Iablonski, G .p. G avrilov, V .B.Kudriavcev.

2 68

Chương !. M à đấu

1.4. Biểu diễn tối thiểu của hàm đại sô logic

Biểu diểr. m ột hàm đại số logic /
 
qua m ột hệ hàm đầy đủ
 
H
 
là không duy nhất. T hí
dụ hàm Sheffer, khi biểu diễn qua hệ tuyển, hội và phủ định, có thể có các cách

XI >’
 
- x
 
y
 
v
 
x
 
y
 
v
 
x
 
y
 
= X V
 
ỵ .

Mỗi m ột biểu diễn /
 
tương ứng với m ột cách "ghép" các thành viên của
 
H
 
(m à ta gọi là
c ic yếu tô' cơ bản) để th'1 đ ư ợ c /. Hiển nhiên, m ột vấn đề có ý nghĩa thực tế qu?.n trọng
là, cần ĩìm m ột biểu diễn sao cho việc ghép như thế
 
là !ốn ít yếu tô' cơ bản nhất. Theo
m ột nghĩa nào đó, điểu này
 
dẫn về việc tìm m ột công thức trên hệ
 
H
 
biểu diễn hàm /
với số ký hiệu các yếu tố này là ít nhất.
 
M ột công thức như vậy, dược gọi là m ột biểu
diễn tối thiểu của h à m / trong hệ
 
H.

Về nguyên tắc, số công thức biểu diễn /
 
là hữu hạn, nên bằng cách duyệt tất cả các
khả năng, ta luôn tìm được biểu diễn tối thiểu c ủ a /. Tuy nhiên, số khả năng này
 
là rất
lớn và việc duyệt nó đòi hỏi m ột khối lượng tính toán khổng lồ, do đó trên thực tế khó
mà thực hiện được dù rằng ngay cả với những siêu rnáy tính.

V iệc xây dựng những thuật toán hữu hiệu
 
tìm biểu diễn tối thiểu của các hàm đại số
logic, vì th ế
 
càng trở nên cấp bách
 
nhưng đồng thời nó cũng là bài toán rất khó. Cho
đến nay, bài toán này vẫn chưa được giải quyết thoả đáng ngay cả trong m ột số trường
hợp đcm giản
 
và còn đang được tiếp tục nghiên cứu.

M ột hệ đầy đủ được nghiên cứu nhiều nhất là hệ tuyển, hội và phủ định. Bài toán tìm
biểu diễn tối thiểu của các hàm
 
đại số lôgic trong hệ này đã được nghiên cứu nhiều
trong vài chục năm
 
gần đây. Tuy nhiên, các kết quả đạt được thường mới chỉ đề cập
đến m ột dạng biéu diễn riêng biệt trong hệ, đó là dạng tuyển chuẩn tắc của các hàm đại
số logic m à ta sẽ xét kỹ trong chương sau.

269

Phan 3. Ham dgi so logic

Bai tap

1.
 
X et cac ham
 
dai so I6gic 3 d6'i
 
s
, 6
 
f{x, y, z).
 
Cho t^p dac trung 7} . X ac dinh dang
tuyen c h u in tac hoan loan ciia/:

a )T ^ =
 
((0, 1„ 1 ) , ( 1 , 0 , 0 ) , ( 1 ,
 
l , 0 ) i

b)
 
T^=
 
1(0, 0, 1), (0, 1, 1), (1. 0, 0), (1, 0, 1), ( 1 , 1 , 1 ) }

c ) 7 > = {(0, 0, 0 ),(1 , 1, 1), (0, 1, 1) , ( 1 , 0 , 0)1

2. Co bao nhieu ham dai so logic 3 ddi so m a tap dac trung
 
T^cua
 
no c6 5 phan ti!r? Khai
quat hoa; c6 bao nhieu ham dai so logic
 
n
 
doi so m a iap dac trung T^CLia no c6
 
k (k <
 
2
 
")

phan til?

3. Tim dang tuyen chuan tac hoan toan ciia cac ham dudi day:

a) fi x ,
 
}>) = .r + J (ham cong m odun 2)

b)/(.v,
 
y) = x o y
 
(ham Vebb)

c)/(.v,
 
y) = x \ y
 
(ham Sheffer)

d)/(.r,> ', z) = (XV j ) &
 
z

e )/(x ,
 
y , z ) ^ x \ / y w z

f)f {x, y, z)
 
=
 
(x
 
& j ) V (x & z) V (y & z)

g )/(x ,
 
y , z ) = ( x \ y ) o z

4. H am dai so logic /(x ,
 
y,
 
z) nhan gia tri 0 tai (0, 0, 0). N eu thay doi gia tri bat cii doi so
nao cua no thi gia tri cua ham cung thay doi (so v6i gia tri truoc da'y). Tim dang tuyen
chu^n tac hoan toan ciia/ .

5. X et xem cac h a m /,
 
g
 
du6i day khac nhau hay bang nhau;

a ) f ( x , y , z ) = i x & y ) v
 
z

g{x, y , z ) - {
 
x \ / y w
 
z ) & ( x v
 
y \ /
 
z ) & ( x v > ’ v
 
z )

b )/(x ,
 
y , z ) = i x \ y ) o z

g(x,
 
y , z ) = x & ( y + z)

6. C hung m inh cac he ham sau day la he day dii:

{0, 1 , X + J , X & ) ' ) ,
 
{ x, xv>>}, {
 
x , x & j } ,
 
( x l j ) ,
 
¡ x o j }

7. Bieu di6n h am /(x ,
 
y)
 
= x v
 
y
 
qua cac he ham :

a) {
 
x , x & y )

b) {xl>>)

c ) { x o > ’}

270

Chương 2. Dạng tuyển chuẩn ĩắc của hàm đại sốỊỏgic

2

DẠNG TUYỂN CHUẨ
n
 
TẮC

CỦA HÀM ĐAI SỐ LÔGIC

2.1. Các khái niệm cớ bản

G iả sử cho
 
n
 
biến
 
Xị. X
2
 
, x „ .
 
M ột biểu thức dạng

cr,
 
Ơ-J
 
cr,

X..
 
'x ,.
 
^ . . x .
 
'

/,
 
ụ

trong đó
 
CT|,...,
 
ƠJ
 
e
 
|0 ,
 
1), 1 < /|,
 
ij <
 
n
 
va
 
i,
 
nếu
 
t
 
ỉ às
 
được gọi là m ột hội sơ
cấp của
 
n
 
biến
 
X |,
 
x„.

Số các
 
biến xuất hiện trong một hội sơ cấp được gọi là hạng của hội sơ cấp đó.
C hẳng hạn, hội
 
s ơ
 
cấp
 
,V|
 
X, X
4
 
có hạng
 
3 ,
 
hội
 
s ơ
 
cấp
 
X
 
2
 
Xị
 
x ,
 
x-j
 
c ó
 
hạng
 
4 .

Giả sử
 
/(.V ,,...,
 
x„)
 
là m ột hàm đại số lôgic. M ột công thức biểu d iễ n /d ư ớ i dạng
tuyển của một số hội sơ cấp khác nhau của các biến
 
A'|,
 
x„
 
được gọi là m ột dạng
tuyển chuẩn tắc của hàm đó.

271

Phần 3. Hàm đại sô' logic

T h í dụ 1.

x y
 
V
 
X
 
y
 
là m ột dạng tuyển chuẩn tắc của hàm
 
X
 
+ y.

x
 
v
 
y
 
v a
 
x
 
y
 
\
 
/
 
x
 
y
 
v
 
x
 
ỵ
 
là
 
c á c
 
dạng tuyển chuẩn tắc của hàm Sheffer
 
.V
 
I
 
V.

D ễ thấy rằng, dạng tuyển chuẩn tắc hoàn toàn c ủ a / là dạng chuẩn tắc duy nhất của
/
 
m à trong đó m ọi hội sư cấp đều có hạng
 
n.
 
M õi hội sơ cấp (hạng
 
n)
 
trong dạng luyển
chuẩn tắc hoàn toàn c ủ a / được gọi là một cấu tạo đcíri vị c ủ a /.

T a gọi độ phức tạp của mội dạng chuẩn tắc là sô' các ký hiệu biến xuất hiện trong
dạng chuẩn tắc đó.

T hí dụ 2.

X
 
y
 
V
 
X V
 
V
 
X
 
y
 
có độ phức tạp là 6,

X
 
V
 
y
 
có độ phức tap là 2.

D ạng tuyển chuẩn tắc của / có độ phức tạp bé nhất được gọi là dạng tuyển chuẩn
tắc tối thiểu c ủ a /. D ạng tuyển chuẩn tắc tối thiểu, theo m ột nghĩa nào đó, tương ứng với
m ột sơ đồ tối thiểu (thuộc m ột loại nhất định) thực hiện /.
 
N hững phần tiếp theo của
chưcmg này, giới thiệu m ột số phương pháp tìm dạng tuyển chuẩn tắc tối thiểu của một
hàm đại số logic.

T a đưa thêm m ột khái niệm quan trọng sau đây.

G iả sử
 
x„)
 
là m ột hàm đại số logic. M ột hàm
 
g{Xị,...,
 
x„) được gọi là một

nguyên nhân (im plicant)
 
c ủ a / nếu
 
là tập con của 7jr, nói cách khác, nếu
 
ig - > f ) =
 
I
(vì th ế có tên gọi là nguyên nhân).

Dễ dàng thấy rằng mỗi hội sơ cấp trong m ột dạng tuyển chuẩn tắc của /
 
là m ột
nguyên nhân của / .

X ét m ột hội sơ cấp
 
A.
 
V iệc xoá bớt m ột biến trong nó làm tập đặc trưng
 
của nó
"nở" ra. Đ iều đó khiến cho, nếu trước đó
 
A
 
là m ột nguyên nhân c ủ a / , thì sau khi xoá
m ột biến,
 
A
 
có thể không phải là nguyên nhân c ủ a /
 
nữa. M ột hội sơ cấp
 
A
 
được gọi là
m ột nguyên nhân nguyên tố c ủ a / , nếu
 
A
 
là m ột nguyên nhân c ủ a / , sao cho không thể
xoá đi bất cứ biến nào trong nó (cùng với dấu phủ định nếu có) để
 
A
 
vẫn còn là nguyên
nhân c ủ a / .

T h í dụ 3.

x y
 
\ ầ.
 
X
 
y
 
l à
 
các nguyên nhân nguyên tố của hàm
 
X +
 
y.

X
 
M
ầ. y
 
là các nguyên nhân nguyên tố của h à m
 
X
 
1
y
 
nhưng các hội
 
X ỹ,
 
x y
 
,

X
 
y
 
không phải là các nguyên nhân nguyên tố của nó.

772

Chương 2. Dọỉìiị ỉuvểỉì chuẩn tấc của Ỉìàỉìỉ đại sốlôíỊÌc

2.2. Dạng tuyển chuẩn tắc thu gọn

Đ ịnh
 
lý 1.
 
Tuyển
 
của m ộĩ s ố hcít kỳ cúc n^uỵén ỉìluvì của hàm f
 
cung là m ộĩ nguyên

nhân của hàm đó,

C h ứ n g m in h . Tập đặc trưng của tuyển này là hợp cúa các tập đặc trưng của các nguyên
nhân đang xét, vì thế
 
nó cũng là tập con của tập đặc trưng của h àm /

Đ ịnh !ý đirợc
 
chờn;y
 
minh.

G iả sử
 
5
 
là m ột hệ các nguyên nhân c ủ a /. Ta nói rằng hệ
 
s
 
ià đắy đủ nếu với m ọi

giá trị
 
ơ e
 
luôn tìm được ưiột nguyên nhân
 
iỊ
 
thuộc hệ để
 
ơ e T^.

Đ ịnh lý 2.
 
G iả s ử S là m ột hệ dầy đủ các nguyên nỉìán của h à m f .
 
K hi đó tuyển của ĩất

cả các nguyên nlĩán trong
 
s
 
s ẽ trùng v ớ i f (ta cùng nối ĩuyển này thực h iệ n f).

C h ứ n g m in h . Từ định nghĩa của nệ đầy đủ, ta nhận được

^
 
T.
 
=
 
Tf

nhưng vế trái của đẳng thức trên chính là tập đặc trung của tuyển -iHng xét. Từ đó nhận
được định lý.

Đ ịn h lý 3.
 
T uyển của tất cả các nguyên nhân nguyên tố của hàm f
 
là
 
thực lìiện f .
 
N ó i

khác đi, hệ các nguyên nhân nguyên tô'của f
 
Ici m ột hệ đẩy dủ.

C h ứ n g m in h . Đ ể chứng m inh định lý, ta sẽ chứng minh răng

U
 
7 ,
 
=
 
r ,

g e S

trong đó
 
5
 
là hệ các nguyên nhân nguyên tô' c ủ a /.

Vì
 
s
 
gồm các nguyên nhàn của / n ê n
 
vế trái của đẳng thức trên là tập con của vế
phải. Ta chỉ cần chứng tỏ điều ngược lại. Thật vậy, gọi
 
S'
 
là hệ các cấu tạo đơn vị c ủ a /,
ta có (dạng luyển chuẩn tắc hoàn toàn c ủ a / ) :

u
 
T ,
 
=
 
T,

g '^ S '

Xét
 
g' e
 
s \
 
nếu ẹ' không phải là nguyên nhân nguyên tố của / , thì bằng cách xoá
bớt m ột số biến (cùng với dấu phủ định nếu có)
 
trong
 
g \
 
ta thu được m ột nguyên nhân
nguyên tố c ủ a /. Gọi nguyên nhân này là g (ẹ
 
G
 
5).
 
Rõ ràng
 
T^.
 
là tập con của
 
T^.
 
T ừ đó
nhận được

u
 
T ,
 
=
 
T,
 
c
 
u
 
r ,

273

Phân 3. Hàm dại so logic

g 'e S '
 
g e S

hay

<
?e
 
s

và định lý được chứng minh.

Tuyển của tất cả
 
céic
 
nguyên nhân nguyên tố c ủ a /'đ ư ợ c gọi là dạng tuyển chuẩn tắc
thu gọn c ủ a /. Vì tập hợp các nguyên nhân nguyên tố c ủ a / l à hoàn toàn xác định, nên
dạng tuyển chuẩn tắc thu gọn của nó là duy nhất.

Chú ý rằng, dạng tuyển chuẩn tắc thu gọn của một hàm đại số lôgic, nói chung còn
khác xa với dạng tuyển chuẩn tắc tối thiểu của hàm đó. C hẳng hạn,
 
hàm (x + }0
 
V
 
z
 
(.V

V
 
y )
 
c ó
 
dạng tuyển chuẩn tắc thu gọn là

X y
 
X
 
y
 
V
 
X z
 
V
 
y
 
z
 
,

nhưng m ội dạng chuẩn tắc tối thiểu của nó là

X
 
ỵ
 
V
 
X
 
y
 
V
 
A' z.

Mạc dù
 
dạng tuyển chuẩn tác thu gọn chưa phải là tối thiểu, nhưng việc tìm nó,
như trong những phương pháp trình bày dưới đây, là m ột bước trung gian quan trọng
trong quá trình tìm dạng tuyển chuẩn tắc tối thiểu.

2.3. Dạng tuyến chuẩn tắc nghẽn

và dạng tuyên
 
chuẩn tắc tô1 thiểu

M ột hệ nguyên nhân nguyên tố của h à m /đ ư ợ c gọi là m ột hệ nghẽn, nếu nó đầy đủ và
không m ột hệ con thực sự nào của nó là đầy đủ. Nếu
 
s
 
là m ột hệ nghẽn c ủ a /
 
thì tuyển
của các thành viên trong
 
s
 
sẽ thực h iệ n /. Tuyển này được gọi là dạng tuyển chuẩn tắc
nghẽn c ủ a /. Nói khác đi dạng tuyển chuẩn tắc nghẽn c ủ a / là m ột dạng tuyển chuẩn tắc
gổm các nguyên nhân nguyên tố c ủ a /, thực h i ệ n / m à không thể bỏ bớt đi m ột số hạng
nào để vẫn thực hiện đ ư ợ c/.

Chú ý rằng, dạng tuyển chuẩn tắc nghẽn của m ột hàm
 
đại số lôgic là không duy
nhất, chẳng hạn hàm

f{x, y,
 
z )
 
=
 
x ỵ
 
v x y v x z v y z

có hai dạng tuyển chuẩn tắc nghẽn là

X y
 
V
 
X
 
y
 
V
 
X
 
z
 
và
 
X y
 
V
 
X
 
y
 
V
 
y

274

Chương 2. Dạng tuyển chuẩn tắc của hàm đợi sổỉôgic

Đ ịn h
 
lý 4. M ợ/
 
dạng tuyển chiỉcỉn ĩắc tối tììiểii của m ột hàm đại s ố logic f
 
đều Icỉ m ột

dạng íityển chuẩn tắc nghẽn của hàm đó.

C h ứ n g m in h . Đ ể chứng m inh định lý, ta chỉ cần chứng tỏ rằng nếu
 
p
 
là m ột hội sơ cấp
của một dạng tuyển chuẩn tắc tối thiểu c ủ a /, thì
 
p
 
phải là m ột nguyên nhân nguyên tố
c ủ a /.

Giả sử
 
p
 
không phải là nguyên nhân nguyên tố c ủ a /. Khi đó, bằng cách bỏ đi m ột
số
 
D Ì ế n
 
(cùng với dấu phủ định nếu có), ta luôn lìm đươc m ột phần con thực sư
 
q
 
của
p, để
 
C
Ị
 
là m ột nguyên nhân nguyẻn tố
 
c ủ a /. Gọi
 
p w
 
p
 
là dạng tuyển chuẩn
 
tắc
 
tối thiểu

c ủ a /
 
{P
 
là m ột tuyển của m ột số hội
 
sơ cấp nào đó). Thay
 
p
 
bởi
 
q
 
trong
 
tuyển này,
 
ta

nhận được
 
q \/ p
 
cũng là m ột dạng tuyển chuẩn tắc c ủ a /. Đ iều này m âu thuẫn với
 
tính
tối thiểu của
 
p
 
V
 
p ,
 
và định
 
l ý
 
được chứng minh.

Chú
 
ý rằng, điểu
 
ngược
 
lại của định
 
lý 4
 
là không
 
đúng:
 
có
 
những dạng
 
tuyển
chuẩn tắc nghẽn m à không phải là d ạn s tuyển chuẩn tắc tối thiểu, thí dụ hàm

f i x ,
 
y , z)
 
=
 
( x + y )
 
V
 
( x
 
+
 
z )

CÓ m ộ t d ạ n g c h u ẩ n
 
tắ c n g h ẽ n
 
là

X
 
z
 
V
 
.V _y
 
V
 
.V 3^
 
V
 
.V z
 
,

nhưng đó không phải là tối thiểu, m ột
 
dạng như th ế c ủ a / là

X
 
z
 
V
 
A' y
 
V
 
y z .

Đ ịnh lý 4 cho thấy rằng, để tìm dạng tuyển chuẩn tắc tối thiểu, ta chỉ cần xét các
dạng tuyển chuẩn
 
tắc nghẽn. M à dể tìm các dạng tuyển chuẩn lắc nghẽn ihì cần biết
dạng tuyển chuẩn tắc thu gọn, Đ ó cũng là cơ sở cho cách tìm dạng tuyển chuẩn tắc tối
thiểu trình bày trong chương sau.

275

Phán 3. Hàm đại sổ logic

Bài tập

1. Cho hàm đại số lôgic/O r,
 
z) xác định bởi bảng:

y
 
z
 
f(x , y, z)

0
 
0
 
0
 
0

0
 
0
 
1
 
0

0
 
1
 
0
 
1

0
 
1
 
1
 
1

1
 
0
 
0
 
1

1
 
0
 
1
 
0

1
 
1
 
0
 
0

1
 
1
 
1
 
0

a) Liệt kê tất cả các nguyên nhân c ủ a / , trong đó mỗi nguyên nhân được viết
dưới dạng tuyển của m ột số hội sơ cấp. Sô' lượng của chúng là bao nhiêu (kể cả tuyển
rỗng và tuyển chuẩn tắc hoàn toàn)?

b) X ác định các nguyên nhân nguyên tố trong các nguyên nhân đã tìm.

2. Cho hàm đại số lôgic
 
n
 
đối số. Biết dạng tuyển chuẩn tắc hoàn toàn của nó gồm
 
k
 
hội
sơ cấp. Đ ếm tất cả các nguyên nhân của hàm đã cho.

276

Chương 3. Thuật toán lìm dạng tiivển cìuỉẩỉì tắc ĩối thiểu

3

THUẬT TOÁN TÌM DẠNG TUYẩN

CHUẨN TẮC TỐI THlểu

3.1.
 
Chú ý mỏ đẩu

Từ những cơ sở lý thuyết đã trình bày trong chương 2, ta có thể chia quá trình tìrn
dạng tuyển chuẩn tắc tối thiểu của một hàm đại số lôgic
 
/(.V ,,
 
x „ )
 
thành 2 giai đoạn:

a) X uất phát từ dạng tuyển chuẩn tắc hoàn toàn c ủ a/ , tìm dạng tuyển chuẩn tắc thu
gọn c ủ a /.

b) Xuất phát từ dạng tuyển chuẩn tắc thu gọn c ủ a /, tìm các dạng tuyển chuẩn tắc
nghẽn c ủ a / và lựa chọn từ các dạng này để được các dạng tuyển chuẩn tắc tối thiểu của
/

Vì dạng tuyển chuẩn tắc thu gọn c ủ a / l à
 
duy nhất, nên giai đoạn a) hoàn toàn xác
định. Trái lại, giai đoạn b) cần phải xây dựng các dạng nghẽn từ dạng rút gọn, sau đó
lựa chọn trong chúng
 
để được dạng tối thiểu. Số các dạng nghẽn của m ột hàm đại sô'

277

Phần 3. Hàm đại sốlôgỉc

lôgic có thể rất lớn, điều này làm cho việc lựa chọn trở nên khó khăn, nhiều khi không
khác m ấy so với việc "lựa chọn toàn bộ". lablonski đã xây dựng được những hàm đại số
lô gic/(X |,...,
 
X,)
 
m à số các nguyên nhân nguyên tố của nó lớn gấp
 
2"^^ lần số các hội sơ
cấp trong dạng tuyển chuẩn tắc hoàn toàn
 
c ủ a /. G lagolev chứng m inh rằng, đối với hầu
hết các hàm đại số l ô g i c / c ủ a
 
n
 
đối số, số các dạng tuyển chuẩn tắc nghẽn của
 
/
 
là

2
 
^ { \ - e )

vượt quá
 
2
 
, trong đó 6
^ -> ớ khi
 
n
 
00, luravliev đưa ra một thí dụ đcm giản

sau đây: khi /7 > 3, hàm

/ u
 
,
 
......
 
-v„) =
 
[( .r,
 
+
 
x , )
 
V
 
(X
2
 
+
 
-r ,) ]
 
(x,
 
+
 
...
 
+
 
.v„)

—
 
4

có 5
 
dạng tuyển chuẩn tắc nqhẽn.

N hư vậy, về nguyên
 
tắc, việc
 
tìm
 
dạng
 
tuyển chuẩn
 
tắc tối Thiểu lừ dạng
 
tuyển
chuẩn tắc thu gọn đòi hỏi phải tiến hành những sự lựa chọn phức tạp. Tuy nhiên, các
phương
 
pháp được trình
 
bàv
 
dưới đây, m ặc
 
dù
 
nói
 
chung, chúng
 
không
 
tránh
 
được
những khó khăn và phức tạp nói trên, trong nhiều trường hợp cụ thể, chúng cũng tỏ ra
có hiệu quả.

Dưới đây là m ột số phép toán m à ta sẽ dùng nhiều lần trong quá trình biến đổi

(i) phép nuốt sơ cấp

A B
 
V
 
A
 
=
 
A

(ii) plìép dán

A
 
X
 
V
 
A
 
X
 
=
 
A

(iii) phép dán không đầy đủ

A
 
X
 
V
 
A
 
X
 
=
 
A
 
V
 
A
 
X V
 
A
 
X

(iv) phép dán m ỏ rộng

A C
 
V
 
B
 
C
 
=
 
A C
 
w
 
B
 
C
 
V
 
A B

Trong các phép toán đó
 
A , B
 
vầ
 
c
 
là các biểu thức bất kỳ, X là biến.

3.2. Tìm dạng tuyển chuẩn tắc thu gọn

M ỗi hội sơ cấp hạng
 
k

ơ,
 
ơ ,
 
ơ

J

X ,
 
' X,
 
-
 
... X ,
 
^

/,
 
/2
 
/;.

được gọi là m ột nguyên nhân hạng
 
k
 
của h à m /, nếu nó là m ột nguyên nhân c ủ a /. M ột
cấu tạo đơn vị của /
 
là m ột nguyên nhân hạng
 
n
 
của nó.

278

Chương 3. Tỉmậĩ toán tìm dạng tuyển chuẩn tắc tối thiểu

Đ ịnh lý 1,

a) M ộĩ nguyên nhổn hạng k của h à m f
 
ịk < n)
 
ỉà kết quả của phép dán hai nguyên

nlìăn hạn^ k
 
+ 1
 
của hàm f đó.

h)
 
M ột nquỵên nhân hạng k của h à r n f ịk
 
<n)
 
là nguyên nhân nguvên t ố của f nếu

khôĩìí’ th ể dán được với bất kỳ m ộĩ nguyên nhân hạng k nào củaf .

C h ứ n ^ m in h .

a)
 
Giả sử
 
A
 
là m ột nguyên nhân hạng
 
k (k < n)
 
c ủ a / . Tun được biên
 
A'
 
không có
mặt trong
 
A.
 
Khi đó các hội
 
A X
 
vầ
 
A
 
X
 
sẽ là các nguyên nhân hạng Ấ:-f 1 c ủ a / , và
 
A

nhận được từ phép dán hai nguyên nhân này.

b)
 
G iả sử >4 là một nguyên nhân hạng
 
k {k < n)
 
c ủ a /. N ếu
 
A
 
không phải là nguyên
nhân nguyên tố thì luôn tìm được m ột biến X trong
 
A
 
để sau khi xoá nó (cùng với dấu
phủ định nếu có)
 
khỏi A, ta được phần con
 
B
 
là m ột nguyên nhân c ủ a /. Có thể giả thiết

Á = B X.
 
Khi đó
 
A ' =
 
B X
 
cũng là m ột nguyên nhân hạng
 
k
 
c ủ a /
 
và
 
A
 
có thể dán với

Từ định lý 1, ta có Ihuật toán Q uine sau đây để tìm dạng tuyển chuẩn tắc thu gọn
của hàm đại số lôgic /(.Vp...,

Bitóc
 
y.
 
T ìm
 
dạng tuyển chuẩn tắc hoàn toàn c ủ a /, ký h iệ u /j.

Bước 2.
 
Từ
 
fị
 
xây dụmg/^,^
 
bằng cách tro n g /, thực hiện tất cả các phép dán không
đầy đủ đối với các hội sơ cấp
 
hạng
 
n-i,
 
sau đó xoá bỏ tất cả các hội sơ cấp hạng
 
n-i

có thể được bằng phép nuốt sơ cấp.

Bước 3.
 
Lặp lại bước 2 cho đến khi thu được
 
/^.,1 = /¿ .
 
Khi
 
ã ó f \
 
sẽ là dạng tuyển
chuẩn tắc thu gọn c ủ a /.

Từ cách xây dựng
 
f ị
 
, có thể chứĩìg m inh quy nạp điều khẳng định: trongm ỗi
 
f ị
 
, có
m ặt tất cả các nguyên nhân nguvên tố hạng không nhỏ hơn
 
1 và tất cả các nguyên
nhân hạng
 
n-k
 
c ủ a / , và chỉ có chúng.

Nếu /^^1
 
= fị.
 
thì theo phần b) của định lý 1, m ọi nguyên nhân hạng
 
n-k
 
c ủ a / tr o n g

f
 
đều là nguyên tố và như vậy/^. chứa tất cả các nguyên nhân nguyên tố c ủ a / , do đó nó
là dạng tuyển chuẩn tắc thu gọn c ủ a /.

T h í d ụ 1. Tim dạng tuyển chuẩn tắc thu gọn của hàm

f = x y z v x y z
 
v x y z v x y
 
z v x y z .

Ta có
 
fo
 
= /. D ùng các phép dán không đầy đủ đối với các hội sơ cấp hạng 3, ta được

y z
 
V
 
X z
 
V
 
X y
 
V
 
x y z
 
V
 
X ỵ z
 
V
 
X ỵ z
 
V
 
X ỵ
 
z
 
W X y
 
z .

2 7 9

Phân 3. Hàm dại so logic

Sau đó dùng các phép nuốt sơ cấp ta được

f ị
 
= y
 
z
 
V
 
.V z
 
V
 
.V V
 
V
 
X
 
ỵ
 
z
 
.

Đến đây các hội sơ cấp hạng
 
2 không dán được với nhau, tức l à /2
 
= /1 và
 
fị
 
là dạng
tuyển chuẩn tắc thu gọn c ủ a /.

Thuật toán
 
Quine không
 
chỉ rõ việc tìm
 
cho hết các
 
phép dán
 
có
 
thể có. Vì ihế
M cC luskey đề nghị bổ sung thuật toán Q uine m ột thủ tục hình thức như trình bày dưới
đây.

Giả s ử /
 
là hàm của
 
n
 
biến
 
X p .. .,
 
M ỗi hội sơ cấp của
 
n
 
biến đó đươc biểu diễn
bằng m ột dãy
 
n
 
ký hiệu trong bảng
 
{0 , 1, -}
 
theo quy ước: ký tự thứ / ỉà 1 hay 0 nếu

Xị
 
có
 
m ặt
 
trong hội là bình thưòng
 
hay vói dấu phủ định, còn nếu A
', không có m ật thì
ký lự này !à
 
Chẳng hạn hội sơ cấp của 5 biến
 
A
'^:
 
X3 A
*
5 được biểu diễn bởi

1-0-1. Hai hội sơ cấp được gọi là lân cận nhau, nếu các biểu diễn nói trên của chúng chỉ
khác nhau ờ m ột vị trí. Rõ ràng các hội sơ cấp chi có thể dán được với nhau nếu chúng
là lân cận nhau.

T h u ậ t toán Q u in e
 
-
 
M cC luskey,

Thuật toán Quine, theo thủ tục M cC luskey, được tiến hành như sau: Lập m ột bảng
gổm nhiều cột để ghi kết quả các phép dán. Sau đó lần lượt thực hiện các bước:

Bước 1.
 
V iết vào cột thứ nhất, các biểu diễn của các nguyên nhân hạng
 
n
 
(tức là các
cấu tạo đơn vị) của h à m /. Các biểu diển được chia thành từng nhóm , các biểu diẻn
trong m ỗi nhóm có số các ký hiệu
 
1 bầng nhau và các nhóm xếp theo thứ tự số các
ký hiệu 1 tăng dần (các nhóm được đánh số từ 1).

Bước 2.
 
Lần lượt thực hiện tất cả
 
các phép dán các biểu diễn trong nhóm
 
i
 
với các
biểu diễn trong nhóm /■+1 (/ =
 
1, 2, . . . ). Biểu diễn nào tham gia ít nhất m ột phép dán
sẽ được ghi nhận m ột dấu *
 
bên cạnh. K ết quả dán được ghi vào cột tiếp theo.

Bước 3.
 
Lặp lại bước 2 cho cột k ế tiếp cho đến khi không thu thêm được cột nào mới
(tức là tại cột hiện hành, không thực hiện được m ột phép dán n ào cả). Khi đó, tấí cả
các biểu diễn không có dấu * sẽ cho ta tất cả các nguyên nhân nguyên tố c ủ a /.

T h í d ụ 2. Tim dạng tuyển chuẩn tắc thu gọn của hàm

/ =
 
X
 
ỹ
 
Z u
 
V
 
x y
 
Z u
 
v
 
x
 
y
 
z
 
u
 
v
 
x
 
y
 
z
 
u

V
 
x ỹ z u
 
V
 
x y z u
 
V
 
x y z u ,

Thủ lục M cC luskey được tiến hành bởi bảng sau đây

280

Chương 3. Thuật toán tìm dạtĩỊỉ tuyển chuẩn tắc tối thiểu

0001
 
*
 
0-01
 
*
 
0 - 1

0101
 
*
 
00-1
 
*
 
-
 
0-1

0011
 
*
 
-001
 
*
 
- 1 1

1001
 
*
 
-011
 
*

1011
 
*
 
10-1
 
*

0111
 
*
 
01-1
 
*

1111
 
*
 
0-11
 
*

1-11
 
*

- l l ỉ

Dạng tuyển chuẩn tắc thu gọn của h à m / là

f
 
=
 
X
 
u
 
V
 
y u
 
V
 
z u.

T h í d ụ 3. Tim dạng tuyển chuẩn tắc thu gọn của hàm

f
 
-
 
X2
 
X3
 
X ị
 
V
 
~Xị
 
X j Xị
 
V
 
Xị
 
X2
 
X
 
ị
 
X4
 
V
 
,V| ^2
 
,^3

V
 
X ị X 2
 
X 3X 4
 
V
 
A',
 
V
 
x , x - , x - , x .
I
 
^ 2
 
-^3 ''-4

Thủ tục M cC luskey được tiến hành bởi bảng sau đây.

0 0 1 0
 
*
 
001
-
 
11
-

0011
 
*
 
-011

1100
*
 
110
- *

1011
 
*
 
11
-
 
0
 
*

1101
 
*
 
1-11

1110
*
 
11-1
 
*

1111
 
*
 
11
! - *

Dạng tuyển chuẩn tắc thu gọn của h à m / là

f = X ị X

2
 
V
 
JC|
 
^2
 
Xj
 
V
 
Xj
 
X3 X4
 
V
 
X ị
 
X
 
2
 
X ị
 
.

T huật
 
toán
 
Q uine
 
cùng
 
với sự cải
 
tiến của
 
M cCluskey gọi
 
chung
 
là thuật toán
Q uine -M cC luskey. Tliuật toán này cho phép tìm dạng tuyển chuẩn tắc thu gọn từ dạng
tuyển chuẩn tắc hoàn toàn.

Dưới đây trình
 
bày thêm phưcmg pháp Blake - Poreski, cho p h ép tìm dạng tuyển
chuẩn tắc thu gọn từ m ột dạng tuyển chuẩn tắc tuỳ ý. Cơ sở củ a phương pháp này là
định lý sau đây:

281

Phần 3. Hàm đại sốlôgic

Đ ịn h lý
 
2.
 
Nếu trong một dạng tuyển chuẩn tắc tuỳ ý
 
của hàm đại sô'lôgic
 
f { X ị ,
 
....
 
x j

ta liên tiếp thực
 
hiện
 
tất cả các phép dán m ở rộng có
 
th ể có được rồi
 
sau đó thực hiện

tất cả các phép nuốt sơ cấp, thì s ẽ thu
 
được
 
dạng tuyển chuẩn tắc thu gọn của h à m f.

Có thể chứng m inh định lý này bằng quy nạp theo số các đối số của h à m /. Tuy
nhiên chúng tôi không trình bày chi tiết ở đây.

T h í d ụ 4. Tim dạng tuyển chuẩn tắc thu gọn của hàm

f = x y z v z x v
 
x y .

Thực hiện liên tiếp các phép dán m ở rộng và các phép nuốt sơ cấp ta được

f = x y z v z x v
 
x y

= x y
 
z V z x
 
W
 
x y v x y v y z v y z

= x z
 
w x y
 
x y
 
\/
 
y
 
z
 
\/ y z
 
w y

= x z
 
w y.

V ậy
 
X z
 
V
 
y
 
là dạng tuyển chuẩn tắc thu gọn của hàm / .

T h í d ụ 5. Tim dạng tuyển chuẩn tắc thu gọn của hàm

f = ự
 
+ y ) s / { ỵ + z).

Ta có

/
 
=
 
x y v x y v y z v y z

=
 
x
 
y
 
v
 
x
 
y
 
v
 
y
 
z
 
v
 
y
 
z
 
v
 
x
 
z
 
v
 
x
 
z

Đ ó là dạng tuyển chuẩn tắc thu gọn của hàm / . T hí dụ 5 chứng tỏ rằng, dạng tuyển
chuẩn tắc thu gọn của m ột h à m / có thể "dài" hcfn dạng nguyên thuỷ của nó.

3.3. Tìm dạng tuyển chuẩn tắc tối thiểu

Sau khi tìm
 
được dạng
 
tuyển
 
chuẩn tắc thu
 
gọn
 
của / ,
 
nghĩa
 
là tìm
 
được tất cả các
nguyên nhân nguyên tố của nó, ta tiếp tục phưcmg pháp Q uine tìm dạng tuyển chuẩn tắc
tối thiểu của f như sau;
 
Lập m ột bảng chữ nhật, m ỗi cột ứng với
 
m ột cấu tạo đơn vị của
/
 
và m ỗi dòng ứng với m ột nguyên nhân nguyên tố c ủ a /. Tại ô
 
ụ , j ) ,
 
ta đánh dấu + nếu
nguyên nhân nguyên tô' ở dòng
 
i
 
là m ột phần con của cấu tạo đơn vị ở cột
 
j.
 
Ta cũng nói
rằng khi đó, nguyên nhân nguyên tố
 
i
 
là phủ cấu tạo đơn vị
 
j.
 
M ột hộ
 
s
 
các nguyên nhân
nguyên tố c ủ a /
 
được gọi là phủ h à m /, nếu m ọi cấu tạo đơn vị c ủ a /
 
đều được phủ ít

282

Chươ/ĩg 3. Thuật toán tìm dạng tuyển chuẩn tắc tối thiểu

nhất
 
bởi m ột thành viên thuộc hệ. Dễ thấy rằng, nếu hệ
 
s là phủ h à m /
 
thì nó là đầy
đủ, nghĩa là tuyển của các thành viên trong

s
 
là thực h iệ n /.

M ột nguyên
 
nhân nguyên
 
tô' được gọi
 
là cốt yếu,
 
nếu
 
thiếu
 
nó
 
thì m ột hệ
 
các
nguyên nhân nguyên tố không thể phủ hàm / . Các nguyên nhân nguyên tô' cốt yếu được
tìm như sau: tại những cột chỉ có duy nhất một dấu +, xem dấu + đó thuộc dòng nào thì
dòng đó ứng với m ột nguyên nhân nguyên tố cốt yếu.

Việc lưa chọn
 
các nguyên nhân nguvên tố trên bảne đã đánh dấu, để được m ột
dạng tuyển chuẩn tắc tối thiểu, có Ihể tiến hành theo các bước sau đây;

Bước 1.
 
Phát hiện tất cả các nguyên nhân nguyên tố cốt yếu.

Bước 2.
 
X oá tất cả
 
các cột
 
được phủ bởi các nguyên nhân
 
nguyên tô' cốt yếu, tức là
tất cả các cột có ít nhất một dấu +
 
tại những dòng ứng với các nguyên nhân nguyên
tố cốt yếu.

Bước 3.
 
Trong bảng còn lại, xoá nốt những dòng không còn dấu + và sau đó nếu có
hai cột giống nhau thì xoá bớt một cột.

Bước 4.
 
Sau các bước trên, tìm một hệ

s
 
các nguyên nhân nguyên tố với số biến ít
nhất phủ tất cả các cột còn lại.

Tuyển của các nguyên nhân nguyên tố cốt yếu và các nguyên nhân trong hệ

s
 
sẽ là
dạng tuyển chuẩn tắc tối thiểu của hàm /.

Các bước
 
1 , 2 , 3
 
có tác dụng rút gọn bảng trước khi lựa chọn. Đ ộ phức tạp chủ yếu
nằm
 
ở bước 4. Tinh
 
huống tồt nhất là m ọi nguyên
 
nhâii nguyên
 
tố đều là cốt yếu.
Trường hợp này không phải lựa chọn gì
 
và hàm /
 
có duy nhất m ột dạng tuyển chuẩn
tắc tối thiểu cũng chính là dạng tuyển chuẩn tắc thu gọn. T inh huống xấu nhất là không
có nguyên nhân nguyên tố nào là cốt yếu. Trường hợp này ta phải
 
lựa
 
chọn
 
toàn bộ

bảng. Các thí dụ sau đây minh hoạ các tình huống có thể xảy ra.

Thí dụ 1.
 
Tim dạng tuyển chuẩn tấc tối thiểu của h à m /c h o trong thí
 
dụ
 
1,
 
m ục
 
2.
 
Bảng

sau khi đã đánh dấu
 
+
 
có dạng

x y
 
z
 
x y
 
1
 
X
 
y
 
z
 
x y
 
1
 
X
 
y
 
1

+
 
+

x z
 
+

y z
 
+
 
+

X
 
ỵ
 
z
 
+

283

Pìiần 3. H àm dai số lô g ic

Trong trường hợp này m ọi nguyên nhân nguyên tố đều là cốt yếu. H à m /
 
có m ột dạn g
tuyển chuẩn tắc tối thiểu, đồng thòi cũng là dạng tuyển chuẩn tắc thu gọn:

f
 
=
 
x
 
y
 
v
 
x
 
z
 
v
 
y
 
z
 
v
 
X
 
ỹ
 
z
 
.

T h í d ụ 2. Tim dạng tuyển chuẩn tắc tối thiểu của h à m /c h o trong thí dụ 3, m ục 2. Sau
khi đánh dấu + , bảng có dạng

A 'j
 
X2

X 3 X ,
 
X 3X 4

X, ^2

X3
 
X4

X , ^2

+
 
+
 
+

X ,
 
^
 
2-^3
 
+
 
+

^2 X3 X4
 
+

X3 X4
 
+

Có hai nguyên nhân nguyên tố cốt yếu nằm ở dòng
 
1 và 2. Sau khi rút gọn, bảng
còn hai dòng 3, 4 và m ột cột 3. V iệc chọn
 
s
 
khá đcm giản: có thể chọn m ột trong hai
nguyên nhân nguyên tô' còn lại. Vì vậy ta được hai dạng tuyển chuẩn tắc tối thiểu là

f
 
=
 
X ị X2
 
V
 
X ị
 
X2
 
X3
 
V
 
X j X ị
 
X4 ,

f
 
=
 
X ị X2
 
V
 
X ị
 
X2
 
V
 
X2 Xy
 
.

T h í d ụ 3. Tiếp tục thí dụ 5, m ục 2. D ạng tuyển chuẩn tắc hoàn toàn của h à m /
 
là

/ =
 
x y
 
2
 
v x y z v x y z v x y z v x y z v x y z .

Ta lập bảng

X
 
y
 
z
 
x y
 
1
 
x y i
 
X
 
y
 
z
 
X
 
y z
 
x y
 
2

+
 
+

X
 
ỹ
 
+
 
+

ỹ z
 
+
 
+

y ĩ
 
+

x z
 
+

X
 
2
 
+
 
+

284

Chương 3. Thuật toán tim dạng tuyển chuẩn tắc tối ihiểu

Không có nguyên nhân nào là nguyên nhân nguyên tố cốt yếu. Trường hợp này phải lựa
chọn toàn bộ. Có hai hệ phủ hàm /
 
với sô' biến ít nhất, chúng tương ứng với hai dạng
tuyển chuẩn tắc tối thiểu:

f
 
=
 
x y
 
V
 
y z
 
x
 
ỉ
 
,

f
 
=
 
x
 
y
 
v
 
y
 
ĩ
 
v
 
x
 
z
 
.

Hệ
 
(
 
X
 
V,
 
X
 
y ,
 
y
 
z,
 
y
 
z
 
}
 
phủ
 
/
 
không thừa, nó chơ ta m òt dạng tuyển chuẩn tắc
nghẽn

/ =
 
x y
 
V
 
X
 
ỹ
 
V
 
ỹ
 
z
 
-V y
 
ĩ

nhưng không phải là tối thiểu.

3.4. Sơ đồ tối thiểu

D ạng tuyển chuẩn tắc của m ột hàm đại sô' logic là m ột loại biểu diễn đơn giản, nó tương
ứng với m ột loại sơ đồ nào đó thực hiện hàm đã cho. Trong ứng dụng kỹ thuật, vấn đề là
với m ột hàm đại số lôgic cho trước, làm thế nào để xây dựng m ột sơ đồ thực hiện được
hàm đó, với ít yếu tô' cơ bản nhất. Sơ đồ như vậy được gọi là sơ đổ tối thiểu của hàm
đang xét. N ói chung, sơ đồ ứng với dạng tuyển chuẩn tấc tối thiểu m à ta tìm trong mục
trước, chưa phải đã là sơ đồ tối thiểu.

T h í dụ.
 
Sơ đồ thực hiện h à m /
 
theo dạng tuyển chuẩn tắc tối thiểu

f
 
=
 
x
 
y
 
\
 
/
 
x
 
z
 
v
 
y
 
z
 
v
 
x
 
y
 
z

cần
 
dùng 8 yếu tố & (hội) và
 
V
 
(tuyển), trong khi đó sơ đồ theo biểu diễn

/
 
=
 
x ( y v z )
 
V
 
y
 
z
 
\y
 
X
 
ỹ
 
Z

tốn tất cả là 7 yếu tô' &
 
và
 
V .

Vân dề tìm sơ đồ tối ihiểii (không nhất thiết là dạng tuyển chuấn tắc)
 
của m ột
 
hàm

đại
 
số logic
 
(trong hệ V, &, -) là một \'ấn đề phức tap. Hiện nay chưa có m ột
 
thuật
 
toán

283

Phẩn 3. Hám dại s ố logic

hữu hiệu nào để giải quyết vấn đề này. Thông thường, người ta tìm dạng tuyển chuẩn
tắc tối tiiiểu, rồi sau đó dùng các luật phân bố để rút bớt số các chữ biến. Làm như vậy,
tuy chưa hẳn đạt được m ột biểu diễn tối thiểu, nhưng nói chung, cũng thu được một
biểu diễn cho phép xây dựng m ột sơ đồ tương đối tiết kiệm.

Rõ ràng là vấn đề còn trở nên phức tạp hơn nhiều, nếu xét việc biểu diễn trên một
hệ đầy đủ bất kỳ. N goài ra, trên thực tế, ta thường gặp việc xây dựng một sư đồ thực
hiện đồng thời m ột hệ hàm đại số lôgic. Có thể xây dựng riêng rẽ sơ đồ tối thiểu cho
từng hàm , rồi ghép chúng
 
lại, với chú ý là có thể lợi dụng những phần chung
 
trong
chúng. Tuy nhiên, cần xét vấn đề này một cách căn bản và có hệ thống hơn.

M ột vấn đề nữa là, trên thực tế, ta lại hay gặp những hàm
 
đại số logic xác định
không đầy đủ (do việc m ã hoá nhị phân các ìín hiệu rờị rạc). V iệc chọn những ciá trị
cho hàm tại những nơi không xác định, càng làm tâng thêm các khả năng được xét.

Tóm lại, đối với việc tổng hợp các sơ đổ thực hiện các hàm
 
đại số logic còn rất
nhiếu bài toán khó khăn và lý thú. G iáo trình này chỉ đề cập đến m ột vài khía cạnh cơ
bản nhất. Bạn đọc nào quan tâm , cần tham khảo thêm các tài liệu khác.

286

Chương 3. Thiiậí toán tìm dạng tiivến chuẩn lác tối ĩhiểu

Bài tập

1. Tim tất cả các nguyên nhân nguyên tố của các hàm dưới đây theo thuật toán
 
Qui
 
ne -

M cCluskey:

a . ) f ( x , y , z ) =
 
x y
 
z
 
V X y
 
z
 
V
 
x y z
 
V
 
X V z

b ) f ( x , y , z ) =
 
x ỹ z
 
V X V z
 
V
 
.Xy z
 
V
 
X
 
V-
 
V
 
X y
 
z

V,
 
z) = X y z
 
V X ỵ z
 
V
 
A V
 
z
 
V
 
A
' y r
 
V
 
,Y _
v 2

d ) / U ) ’, r ) = ( x l > ) i z

e )/(x ,
 
J, z) = .VI 0^ + z)

f )f {x, y, z) = x o ( y \ z)

g ) f ( x ,
 
y ,
 
z )
 
=
 
( x o
 
j )
 
I z

h ) / u
 
y, z) = (x + y) o z

2.
 
Tìm dạng tuyển chuẩn tắc
 
thu gọn của các hàm
 
cho trong bài
 
1.

3. V iết chương trình tìm dạng tuyển chuẩn
 
tắc thu gọn
 
của m ột
 
hàm đại số lôgic /? đối

số dựa trên dạng tuyển chuẩn tắc hoàn toàn của nó.

Dữ liệu vào là file văn bản có dạng:

•
 
dòng đầu ghi giá trị
 
n
 
(là số đối số của
 
hàm)

•
 
dòng sau ghi giá trị
 
k
 
(là số hội sơ cấp
 
trong dạng tuyển chuẩn tắc hoàn toàn của

hàm )

•
 
k
 
dòng tiếp, mỗi dòng ghi m ột hội sơ cấp tương ứng dưới dạng m ột dãy
 
n
 
ký tự

viết liền nhau, trong đó ký tự thứ í mô tả trạng thái của đối thứ
 
/ theo
 
quy ước;
 
0

nếu đối có dấu phủ định, 1 nếu đối không có dấu phủ định.

K ết quả ghi ra file văn bản có dạng (nếu có nhiều dạng tối thiểu thì chỉ ghi một):

•
 
dòng đầu ghi giá trị
 
m
 
(là sô' hội sơ cấp trong dạng tuyển chuẩn tắc tối thiểu
 
của

hàm )

•
 
m
 
dòng sau, mỗi dòng ghi m ột hội sơ cấp tương ứng dưới dạng m ột dãy
 
n
 
ký tự

viết liền nhau, trong đó ký tự thứ
 
i
 
m ô tả trạng thái của đối thứ / theo quy ước: -
nếu đối không có mặt, 0 nếu đối có dấu phủ định, 1 nếu đối không có dấu
 
phủ

định.

T hí dụ: File dữ liệu vào cho hàm (thí dụ 3, m ục 3)

f{x, y , z )
 
=
 
X y z
 
V
 
X y
 
z
 
V
 
x y z
 
V
 
A
' J
 
z
 
V
 
X
 
y z
 
\/ x y
 
z .

và file kết quả tưcmg ứng với dạng tuyển chuẩn tắc tối thiểu
 
x y
 
\J
 
y z \/ X
 
z
 
có nội

dung:

287

Phần 3. Hàm đại sô'logic

4.
 
H ệ th ố n g cảnh báo tự động.

Người ta cần thiết kế m ột m ạch logic điều khiển hệ thống cảnh báo tự động trong m ột
ngôi nhà. Trong hệ thống cảnh báo này người ta sử dụng hai dạng bộ cảm biến (sensor);
tích cực và thụ động. Bộ cảm biến tích cực sẽ phát tín hiệu
 
1 khi mọi việc đều bình
thường và tín hiệu 0 nếu phát hiện có sự cố (cửa ra vào hoặc của sổ bị mở). Bộ cảm biến
thụ động sẽ phát tín hiệu 0 nếu m ọi việc bình thường và tín hiệu 1 nếu phát hiện sự cố
(làm chuyển động hoặc va đập vào nó). Ngôi nhà có 4 phòng R |, R 2,
 
R3, R4.
 
Trong mỗi
phòng Rj có m ột bộ cảm biến tích cực phát tín hiệu
 
Xị
 
và m ột bộ cảm biến thụ động phát
tín hiệu
 
y¡. Sơ
 
đồ của ngôi nhà được m ô tả trong hình 1 (các đoạn đứt là các cửa thông
phòng hoặc ra vào).

H ình 1

M ạch logic điều khiển phải phát ra tín hiệu 0 khi không có sự cố nào xảy ra và phát tín
hiệu 1 để kích còi báo động. Ta cần kích còi báo động nếu xảy ra ít nhất m ột trong các
tình huống sau đây:

•
 
Trong phòng R | có ít nhất m ột trong hai bộ cảm biến
 
X|
 
hoặc
 
phát hiện sự cố;

•
 
Trong bất cứ phòng R,, ỉ > 1, cả hai bộ cảm biến
 
Xị
 
và
 
yị
 
đéu phát hiện sự cố;

•
 
Trong hai phòng có cửa thông nhau có hai bộ cảm biến phát hiện sự cố.

a) Hãy xây dựng biểu thức cho hàm biến b
 
u
 
n
 
n
 
h
 
ậ
 
n
 
giá trị
 
1
khi và chỉ khi cần kích còi báo động.

b)
 
Tim dạng tuyển chuẩn tắc hoàn toàn c ủ a /;

c) Á p dụng thuật toán Q uine-M cC luskey tìm dạng tuyển chuẩn tắc thu gọn c ủ a /.

^88

TOAN R d l RAC

Tài liêu tham khảo

1.
 
Hall M.
 
C om h'm atonal
 
Theory.
 
Blaisdeil Publishing Com pany, London, 1967.

2.
 
K aufm an A.
 
Introduction a la com binatorique en vue des applications.
 
Dunod,
Paris, 1968.

3.
 
A ho
 
A.W .,
 
H opcroft J.E., U ltm an
 
J.D.
 
The design
 
a n d analysis
 
o f com puter

algorithm s.
 
A ddison - W esley Publishing Co., Inc., 1974.

4.
 
R eingold
 
E.M ., N ievergelt J., Deo N.
 
C om binatorial Algorithm s. Theory and

Practice.
 
Prentice-H all Inc. Englew ood Cliff, N ew Jersey, 1977.

5.
 
Papadm itriou C.H., Steiglitz K.
 
C om binatorial O ptim ization.
 
Prentice Hall Inc.,
N. J., 1982.

6.
 
R ubnikov K.A.
 
Introduction in com binatorial analysis.
 
N auka, M oscow , 1972.
(in R uss.)

7.
 
Sachkov
 
V.N.
 
C om binatorial
 
M ethods
 
o f
 
D iscrete
 
M athem atics.
 
N auka,
M oscow , 1977. (in Russ.)

8.
 
Conway
 
R .W .,
 
M axw ell W .L., M iller L.W .
 
T heory o f Scheduling.
 
A ddison
 
-
W esley R eading, M ass., 1967.

9.
 
Tanaev V.C., Skurba V.V.
 
Introduction to Scheduling Theory.
 
N auka, M oscow,
1975. (in R uss.)

10. K ovaliev M .M .
 
D iscrete O ptim ization.
 
Izd.BGU, M insk, 1977 (in R uss.)

11. Berg C.
 
T heorie des Graphes et ses Applications.
 
D unod, Paris, 1958.

12. O re O.
 
T heory o f Graphs.
 
A m erican M athem atical Society, 1962.

13. Ford L.R ., Fulkerson D.R.
 
F low s in N etw orks.
 
Princeton Univ. Press, Princeton,
N .J., 1962.

14. Busacker R .G ., Saaty T.L.
 
F inite G raphs a n d N etw orks. A n Introduction with

A pplication.
 
M cG raw H ill, N .Y ., 1965.

15. H arary F.
 
G raph Theory.
 
A ddison W esley Publishing
 
A cadem ic Press, N .Y .,
1973.

289

Tài liệu íham khảo

16. C hristofides
 
N.
 
Graph
 
Theory.
 
An
 
algorithm ic
 
approach.
 
A cadem ic
 
Press,
N .Y ., 1975.

17. lab lo n sk i s .v .
 
Introduction to D iscrete M athem atics.
 
N auka, M oscow, 1979. (in
R uss.).

18. Liu
 
C L .
 
E lem ents
 
o f D iscrete
 
M athem atics.
 
M cGraw
 
- Hill
 
Book
 
Company,
1985.

19. R osen
 
K.H.
 
D iscrete M athem atics and its A pplications.
 
M cG raw
 
- Hill
 
Book
C om pany, 1991.

20. Johnsonbaugh R.
 
D iscrete M athem atics.
 
Prentice Hall Inc., N. J., 1997.

21. H oàng Tuỵ.
 
D ổ thị hữu hạn và các ứng dụng trong vận trù học,
 
NXB Khoa học,
H à nội, 1964.

22. Phan đình Diệu.
 
L ý thuyết ốtôniat hữu hạn và thuật toán.
 
N XB Đ H THCN , Hà
nội, 1977.

290

NHA XUấT ÍỈRN ĐỌI HỌC ọ u ố c Gin HỈ^ NỘI

16 Hàng C huối - Hai Bà Trưng - Hà Nội
Điên thoai: Biên tãp -Chê' bản: (04) 39714896:

Hành chính: (04) 39714899: Tổng Biên tảp: (04)
 
3 9 7 1 4 8 9 7 :

Fax: (04) 39714899

C h i u
 
t r á c h
 
n h i ê m
 
x u á t b ả n :

Gi a m đỏc:
 
P G S . TS. P H Ù N G
 
Qưốc
 
BẢO

T ỏ n g biên tậ p :
 
T S. PH Ạ M T H Ị TRÀM

B iên táp:
 
P H Ạ M
 
P H Ú TR IÊ M

B iên tậ p tái bản:
 
Đ ỗ
 
H Ữ U P H Ú

H Ồ Đ Ổ N C

T rin h
 
b ày bìa:
 
V Ă N SÁNCỈ

Đ ỏi tác liên k ế t x u ấ t h ã n :

H ỏ Đ Ổ N (Ỉ